{
  "address": "0xc75f4330C26bC358b3D8d209B3a05605890C1a0e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        }
      ],
      "name": "BetCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "affirmationRefund",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "negationRefund",
          "type": "uint256"
        }
      ],
      "name": "BetKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "winner",
          "type": "int256"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "negationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "privateBet",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liveness",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "imgUrl",
          "type": "bytes"
        },
        {
          "internalType": "enum OO_BetHandler.BetStatus",
          "name": "betStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "cancelBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "claimWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        }
      ],
      "name": "createQuestion",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "getSettledData",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "killBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_affirmation",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_counterBetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_privateBetRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "loadBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "requestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_bondCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liveness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_privateBet",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_imgUrl",
          "type": "string"
        }
      ],
      "name": "setBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "settleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x69a5bb6048b8adeb96559c9ebb4c5777cfdc9580b58d2b241fd9bc531d7e014e",
  "receipt": {
    "to": null,
    "from": "0x4204FDD868FFe0e62F57e6A626F8C9530F7d5AD1",
    "contractAddress": "0xc75f4330C26bC358b3D8d209B3a05605890C1a0e",
    "transactionIndex": 32,
    "gasUsed": "3688552",
    "logsBloom": "0x
    "blockHash": "0xc3dbdc292f5bff70b7c096c2389b0baee589839edc51cee15853e9a450509f56",
    "transactionHash": "0x69a5bb6048b8adeb96559c9ebb4c5777cfdc9580b58d2b241fd9bc531d7e014e",
    "logs": [],
    "blockNumber": 8049478,
    "cumulativeGasUsed": "7673261",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "4ae1631712f085637ba9846640adf81b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"BetCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"affirmationRefund\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"negationRefund\",\"type\":\"uint256\"}],\"name\":\"BetKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"winner\",\"type\":\"int256\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"negationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateBet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liveness\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"imgUrl\",\"type\":\"bytes\"},{\"internalType\":\"enum OO_BetHandler.BetStatus\",\"name\":\"betStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"}],\"name\":\"createQuestion\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"getSettledData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"killBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_affirmation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_counterBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_privateBetRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"loadBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_bondCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_privateBet\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_imgUrl\",\"type\":\"string\"}],\"name\":\"setBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"settleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OO_BetHandler.sol\":\"OO_BetHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleV2Interface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    struct RequestSettings {\\n        bool eventBased; // True if the request is set to be event-based.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\n     * @dev Calling this method has a few impacts on the request:\\n     *\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\n     *    with the request.\\n     *\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\n     *    prematurely proposes a response loses their bond.\\n     *\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\n     *    the requesting contract.\\n     *\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setEventBased(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets which callbacks should be enabled for the request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\n     */\\n    function setCallbacks(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        bool callbackOnPriceProposed,\\n        bool callbackOnPriceDisputed,\\n        bool callbackOnPriceSettled\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbfd9778b3e7c86e149cc140eda5e7210ef4a604cde576abaaa46c1289c5e334f\",\"license\":\"AGPL-3.0-only\"},\"contracts/OO_BetHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract OO_BetHandler is ReentrancyGuard {\\n    // Create an Optimistic oracle instance at the deployed address on G\\u00f6rli.\\n    OptimisticOracleV2Interface oo =\\n        OptimisticOracleV2Interface(0xA5B9d8a0B0Fa04Ba71BDD68069661ED5C0848884);\\n\\n    uint256 requestTime = 0; // Store the request time so we can re-use it later.\\n    bytes32 constant IDENTIFIER = bytes32(\\\"YES_OR_NO_QUERY\\\"); // Use the yes no idetifier to ask arbitary questions, such as the weather on a particular day.\\n    address constant ZERO_ADDRESS = address(0);\\n    // 0x0000000000000000000000000000000000000000\\n\\n    struct Bet {\\n        uint256 betId;\\n        bytes question;\\n        uint256 expiry;\\n        IERC20 bondCurrency;\\n        address creator;\\n        bool privateBet;\\n        uint256 liveness;\\n        bytes imgUrl;\\n        BetStatus betStatus;\\n    }\\n\\n    struct BetAmount {\\n        uint256 betId;\\n        address affirmation; // Address of the side of the bet that affirms the question.\\n        uint256 affirmationAmount; // Amount deposited into the bet by the affrimation.\\n        address negation; // Address of the side of the bet that negates the question.\\n        uint256 negationAmount; // Amount deposited into the bet by the negation.\\n        uint256 reward;\\n    }\\n\\n    enum BetStatus {\\n        LOADING,\\n        OPEN,\\n        ACTIVE,\\n        SETTLING,\\n        SETTLED,\\n        CLAIMED,\\n        DEAD\\n    }\\n\\n    // ******** EVENTS ************\\n\\n    event BetSet(\\n        address indexed creator,\\n        address indexed bondCurrency,\\n        bytes indexed ancillaryData,\\n        uint256 betId\\n    );\\n\\n    event BetTaken(address indexed taker, uint256 indexed betId);\\n\\n    event DataRequested(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event BetSettled(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event WinningsClaimed(\\n        uint256 indexed betId,\\n        uint256 indexed totalWinnings,\\n        int256 indexed winner\\n    );\\n\\n    event BetCanceled(\\n        uint256 indexed betId,\\n        address indexed bondCurrency,\\n        uint256 indexed refundAmount\\n    );\\n\\n    event BetKilled(\\n        uint256 indexed betId,\\n        uint256 indexed affirmationRefund,\\n        uint256 indexed negationRefund\\n    );\\n\\n    uint256 public betId = 0; // latest global betId for all managed bets.\\n    mapping(uint256 => Bet) public bets; // All bets mapped by their betId\\n    mapping(uint256 => BetAmount) public betAmounts; // All bet amounts mapped by their betId.\\n    mapping(address => uint256[]) public userBets; // All bets the user is and has participated in.\\n\\n    // ********* MUTATIVE FUNCTIONS *************\\n\\n    function setBet(\\n        string calldata _question,\\n        address _bondCurrency,\\n        uint256 _liveness,\\n        uint256 _expiry,\\n        bool _privateBet,\\n        string calldata _imgUrl\\n    ) public nonReentrant {\\n        bytes memory ancillaryData = createQuestion(_question); // Question to ask the UMA Oracle.\\n        bytes memory imgUrl = bytes(_imgUrl);\\n        IERC20 bondCurrency = IERC20(_bondCurrency); // Use preferred token as the bond currency.\\n\\n        Bet memory bet = Bet(\\n            betId,\\n            ancillaryData,\\n            _expiry,\\n            bondCurrency,\\n            msg.sender,\\n            _privateBet,\\n            _liveness,\\n            imgUrl,\\n            BetStatus.LOADING\\n        );\\n\\n        // Make sure to approve this contract to spend your ERC20 externally first\\n\\n        emit BetSet(msg.sender, _bondCurrency, ancillaryData, betId);\\n\\n        bets[betId] = bet;\\n        userBets[msg.sender].push(betId);\\n        betId += 1;\\n    }\\n\\n    function loadBet(\\n        uint256 _betId,\\n        bool _affirmation,\\n        uint256 _betAmount,\\n        uint256 _counterBetAmount,\\n        address _privateBetRecipient,\\n        uint256 _reward\\n    ) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        require(msg.sender == bet.creator, \\\"not creator\\\");\\n        require(bet.betStatus == BetStatus.LOADING, \\\"not loading\\\");\\n\\n        address affirmation;\\n        uint256 affirmationAmount;\\n        address negation;\\n        uint256 negationAmount;\\n\\n        if (_affirmation == true) {\\n            affirmation = msg.sender;\\n            affirmationAmount = _betAmount;\\n            negationAmount = _counterBetAmount;\\n        } else {\\n            negation = msg.sender;\\n            negationAmount = _betAmount;\\n            affirmationAmount = _counterBetAmount;\\n        }\\n\\n        if (bet.privateBet == true) {\\n            affirmation == msg.sender\\n                ? negation = _privateBetRecipient\\n                : affirmation = _privateBetRecipient;\\n        }\\n\\n        BetAmount memory betAmount = BetAmount(\\n            _betId,\\n            affirmation,\\n            affirmationAmount,\\n            negation,\\n            negationAmount,\\n            _reward\\n        );\\n\\n        // Make sure to approve this contract to spend your ERC20 externally first\\n        bet.bondCurrency.transferFrom(msg.sender, address(this), _betAmount);\\n\\n        betAmounts[_betId] = betAmount;\\n        bet.betStatus = BetStatus.OPEN;\\n    }\\n\\n    function takeBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(msg.sender != bet.creator, \\\"Can't take your own bet\\\");\\n        if (bet.privateBet == false) {\\n            require(\\n                betAmount.affirmation == ZERO_ADDRESS ||\\n                    betAmount.negation == ZERO_ADDRESS,\\n                \\\"Bet already taken\\\"\\n            );\\n        } else {\\n            require(\\n                msg.sender == betAmount.affirmation ||\\n                    msg.sender == betAmount.negation,\\n                \\\"Not bet recipient\\\"\\n            );\\n        }\\n        require(bet.betStatus == BetStatus.OPEN, \\\"Bet not Open\\\");\\n\\n        if (betAmount.affirmation == ZERO_ADDRESS) {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                betAmount.affirmationAmount\\n            );\\n            betAmount.affirmation = msg.sender;\\n        } else {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                betAmount.negationAmount\\n            );\\n            betAmount.negation = msg.sender;\\n        }\\n\\n        userBets[msg.sender].push(_betId);\\n        bet.betStatus = BetStatus.ACTIVE;\\n\\n        emit BetTaken(msg.sender, _betId);\\n    }\\n\\n    function requestData(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(\\n            bet.betStatus == BetStatus.ACTIVE,\\n            \\\"Bet not ready to be settled\\\"\\n        );\\n        require(\\n            betAmount.affirmation == msg.sender ||\\n                betAmount.negation == msg.sender\\n        );\\n\\n        // Set liveness for request disputes measured in seconds. Recommended time is at least 7200 (2 hours).\\n        // Users should increase liveness time depending on various factors such as amount of funds being handled\\n        // and risk of malicious acts.\\n\\n        // Now, make the price request to the Optimistic oracle with preferred inputs.\\n        oo.requestPrice(\\n            IDENTIFIER,\\n            block.timestamp,\\n            bet.question,\\n            bet.bondCurrency,\\n            betAmount.reward\\n        );\\n        oo.setCustomLiveness(\\n            IDENTIFIER,\\n            block.timestamp,\\n            bet.question,\\n            bet.liveness\\n        );\\n\\n        bet.betStatus = BetStatus.SETTLING;\\n        emit DataRequested(\\n            betAmount.affirmation,\\n            betAmount.negation,\\n            betAmount.betId\\n        );\\n    }\\n\\n    // Settle the request once it's gone through the liveness period of 30 seconds. This acts the finalize the voted on price.\\n    // In a real world use of the Optimistic Oracle this should be longer to give time to disputers to catch bat price proposals.\\n    function settleRequest(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(bet.betStatus == BetStatus.SETTLING, \\\"Bet not settling\\\");\\n        require(\\n            betAmount.affirmation == msg.sender ||\\n                betAmount.negation == msg.sender\\n        );\\n\\n        oo.settle(address(this), IDENTIFIER, requestTime, bet.question);\\n        bet.betStatus = BetStatus.SETTLED;\\n\\n        emit BetSettled(\\n            betAmount.affirmation,\\n            betAmount.negation,\\n            betAmount.betId\\n        );\\n    }\\n\\n    function claimWinnings(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        uint256 totalWinnings = betAmount.affirmationAmount +\\n            betAmount.negationAmount;\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == betAmount.affirmation ||\\n                msg.sender == betAmount.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(\\n            settlementData == 1e18 || settlementData == 0,\\n            \\\"Invalid settlement\\\"\\n        );\\n        if (settlementData == 1e18) {\\n            require(\\n                msg.sender == betAmount.affirmation,\\n                \\\"Negation did not win bet\\\"\\n            );\\n            bet.bondCurrency.transfer(betAmount.affirmation, totalWinnings);\\n        } else {\\n            require(\\n                msg.sender == betAmount.negation,\\n                \\\"Affirmation did not win bet\\\"\\n            );\\n            bet.bondCurrency.transfer(betAmount.negation, totalWinnings);\\n        }\\n\\n        bet.betStatus = BetStatus.CLAIMED;\\n\\n        emit WinningsClaimed(bet.betId, totalWinnings, settlementData);\\n    }\\n\\n    function cancelBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        uint256 refundAmount;\\n        require(\\n            bet.betStatus == BetStatus.LOADING ||\\n                bet.betStatus == BetStatus.OPEN,\\n            \\\"Bet already active\\\"\\n        );\\n        require(msg.sender == bet.creator, \\\"Not bet creator\\\");\\n\\n        if (bet.creator == betAmount.affirmation) {\\n            refundAmount = betAmount.affirmationAmount;\\n        } else {\\n            refundAmount = betAmount.negationAmount;\\n        }\\n\\n        bet.bondCurrency.transfer(bet.creator, refundAmount);\\n\\n        emit BetCanceled(bet.betId, address(bet.bondCurrency), refundAmount);\\n    }\\n\\n    function killBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == betAmount.affirmation ||\\n                msg.sender == betAmount.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(settlementData == 2 * 1e18, \\\"Bet is settleable\\\");\\n        bet.bondCurrency.transfer(\\n            betAmount.affirmation,\\n            betAmount.affirmationAmount\\n        );\\n        bet.bondCurrency.transfer(betAmount.negation, betAmount.negationAmount);\\n\\n        bet.betStatus = BetStatus.DEAD;\\n\\n        emit BetKilled(\\n            betAmount.betId,\\n            betAmount.affirmationAmount,\\n            betAmount.negationAmount\\n        );\\n    }\\n\\n    //******* VIEW FUNCTIONS ***********\\n    function createQuestion(string memory _question)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory question = bytes(\\n            string.concat(\\n                \\\"Q: \\\",\\n                _question,\\n                \\\"? --- A:1 for yes. 0 for no. 2 for ambiguous/unknowable\\\"\\n            )\\n        );\\n        return question;\\n    }\\n\\n    // Fetch the resolved price from the Optimistic Oracle that was settled.\\n    function getSettledData(uint256 _betId) public view returns (int256) {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(\\n            betAmount.affirmation == msg.sender ||\\n                betAmount.negation == msg.sender\\n        );\\n\\n        return\\n            oo\\n                .getRequest(\\n                    address(this),\\n                    IDENTIFIER,\\n                    requestTime,\\n                    bet.question\\n                )\\n                .resolvedPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x25c795b581250c7ba7c131df1c1bc668a961df50ecfc74545b417b10ecfef4d2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405273a5b9d8a0b0fa04ba71bdd68069661ed5c0848884600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600255600060035534801561006f57600080fd5b506001600081905550614117806100876000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b3580c1e1161008c578063d247f92b11610066578063d247f92b14610266578063d326efb514610282578063dc60054e1461029e578063e5da66af146102ba576100ea565b8063b3580c1e146101fe578063bf7c0c5d1461022e578063c511a0741461024a576100ea565b8063357401f5116100c8578063357401f514610161578063677bd9ff1461017d57806374410429146101995780638068aa68146101ce576100ea565b806322af00fa146100ef57806327bce91b146101275780632adb9e3c14610145575b600080fd5b610109600480360381019061010491906128fb565b6102ea565b60405161011e99989796959493929190612af9565b60405180910390f35b61012f6104a2565b60405161013c9190612b94565b60405180910390f35b61015f600480360381019061015a91906128fb565b6104a8565b005b61017b600480360381019061017691906128fb565b610889565b005b610197600480360381019061019291906128fb565b610bdb565b005b6101b360048036038101906101ae91906128fb565b611125565b6040516101c596959493929190612baf565b60405180910390f35b6101e860048036038101906101e39190612c3c565b6111a1565b6040516101f59190612b94565b60405180910390f35b61021860048036038101906102139190612db1565b6111d2565b6040516102259190612dfa565b60405180910390f35b61024860048036038101906102439190612e48565b611201565b005b610264600480360381019061025f91906128fb565b6115c6565b005b610280600480360381019061027b91906128fb565b611c1d565b005b61029c60048036038101906102979190612f35565b611f1c565b005b6102b860048036038101906102b391906128fb565b6122a1565b005b6102d460048036038101906102cf91906128fb565b61269e565b6040516102e1919061301d565b60405180910390f35b600460205280600052604060002060009150905080600001549080600101805461031390613067565b80601f016020809104026020016040519081016040528092919081815260200182805461033f90613067565b801561038c5780601f106103615761010080835404028352916020019161038c565b820191906000526020600020905b81548152906001019060200180831161036f57829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff169080600501549080600601805461040c90613067565b80601f016020809104026020016040519081016040528092919081815260200182805461043890613067565b80156104855780601f1061045a57610100808354040283529160200191610485565b820191906000526020600020905b81548152906001019060200180831161046857829003601f168201915b5050505050908060070160009054906101000a900460ff16905089565b60035481565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600260068111156104ea576104e9612a82565b5b8260070160009054906101000a900460ff16600681111561050e5761050d612a82565b5b1461054e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610545906130f5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806105fb57503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61060457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000042856001018660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600501546040518663ffffffff1660e01b81526004016106b29594939291906131c7565b6020604051808303816000875af11580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190613236565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000428560010186600501546040518563ffffffff1660e01b815260040161077e9493929190613263565b600060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b5050505060038260070160006101000a81548160ff021916908360068111156107d8576107d7612a82565b5b021790555080600001548160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a4505050565b610891612858565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060008060068111156108d4576108d3612a82565b5b8360070160009054906101000a900460ff1660068111156108f8576108f7612a82565b5b148061093957506001600681111561091357610912612a82565b5b8360070160009054906101000a900460ff16600681111561093757610936612a82565b5b145b610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f906132fb565b60405180910390fd5b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0190613367565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a915781600201549050610a99565b816004015490505b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610b1c929190613387565b6020604051808303816000875af1158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f91906133c5565b50808360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600001547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a4505050610bd86128a7565b50565b610be3612858565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600081600401548260020154610c279190613421565b90506000610c348561269e565b905060046006811115610c4a57610c49612a82565b5b8460070160009054906101000a900460ff166006811115610c6e57610c6d612a82565b5b14610cae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca5906134a1565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d5b57508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610d9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d919061350d565b60405180910390fd5b670de0b6b3a7640000811480610db05750600081145b610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de690613579565b60405180910390fd5b670de0b6b3a76400008103610f5c578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e87906135e5565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610f13929190613387565b6020604051808303816000875af1158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5691906133c5565b506110b6565b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe590613651565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611071929190613387565b6020604051808303816000875af1158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b491906133c5565b505b60058460070160006101000a81548160ff021916908360068111156110de576110dd612a82565b5b0217905550808285600001547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a4505050506111226128a7565b50565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154905086565b600660205281600052604060002081815481106111bd57600080fd5b90600052602060002001600091509150505481565b60606000826040516020016111e79190613750565b604051602081830303815290604052905080915050919050565b611209612858565b60006004600088815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a9906137cd565b60405180910390fd5b600060068111156112c6576112c5612a82565b5b8160070160009054906101000a900460ff1660068111156112ea576112e9612a82565b5b1461132a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132190613839565b60405180910390fd5b600080600080600115158a15150361134a57339350889250879050611354565b3391508890508792505b600115158560040160149054906101000a900460ff161515036113b4573373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146113ad57869350836113b2565b869150815b505b60006040518060c001604052808d81526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018881525090508560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308d6040518463ffffffff1660e01b815260040161147293929190613859565b6020604051808303816000875af1158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b591906133c5565b5080600560008e81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015590505060018660070160006101000a81548160ff021916908360068111156115ab576115aa612a82565b5b02179055505050505050506115be6128a7565b505050505050565b6115ce612858565b600060046000838152602001908152602001600020905060006005600084815260200190815260200160002090508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361168e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611685906138dc565b60405180910390fd5b600015158260040160149054906101000a900460ff1615150361179e57600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061175a5750600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179090613948565b60405180910390fd5b61188b565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061184b57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61188a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611881906139b4565b60405180910390fd5b5b6001600681111561189f5761189e612a82565b5b8260070160009054906101000a900460ff1660068111156118c3576118c2612a82565b5b14611903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fa90613a20565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611a4c578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600201546040518463ffffffff1660e01b81526004016119c093929190613859565b6020604051808303816000875af11580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0391906133c5565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b39565b8160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600401546040518463ffffffff1660e01b8152600401611ab193929190613859565b6020604051808303816000875af1158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af491906133c5565b50338160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505560028260070160006101000a81548160ff02191690836006811115611bc757611bc6612a82565b5b0217905550823373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a35050611c1a6128a7565b50565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060036006811115611c5f57611c5e612a82565b5b8260070160009054906101000a900460ff166006811115611c8357611c82612a82565b5b14611cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cba90613a8c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611d7057503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611d7957600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254866001016040518563ffffffff1660e01b8152600401611dff9493929190613aac565b6020604051808303816000875af1158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e429190613236565b5060048260070160006101000a81548160ff02191690836006811115611e6b57611e6a612a82565b5b021790555080600001548160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a4505050565b611f24612858565b6000611f7389898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506111d2565b9050600083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000889050600060405180610120016040528060035481526020018581526020018981526020018373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200188151581526020018a81526020018481526020016000600681111561204557612044612a82565b5b8152509050836040516120589190613b34565b60405180910390208a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312377a74e3b2d3c110c0a87dc9a32bdfe8152f1163bc6ebbf8549394889ddfd6003546040516120bf9190612b94565b60405180910390a4806004600060035481526020019081526020016000206000820151816000015560208201518160010190816120fc9190613cd8565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015560e08201518160060190816121d49190613cd8565b506101008201518160070160006101000a81548160ff0219169083600681111561220157612200612a82565b5b0217905550905050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546122849190613421565b92505081905550505050506122976128a7565b5050505050505050565b6122a9612858565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060006122e28461269e565b9050600460068111156122f8576122f7612a82565b5b8360070160009054906101000a900460ff16600681111561231c5761231b612a82565b5b1461235c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612353906134a1565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061240957508160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243f9061350d565b60405180910390fd5b671bc16d674ec800008114612492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248990613df6565b60405180910390fd5b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600201546040518363ffffffff1660e01b8152600401612519929190613387565b6020604051808303816000875af1158015612538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255c91906133c5565b508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600401546040518363ffffffff1660e01b81526004016125e4929190613387565b6020604051808303816000875af1158015612603573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262791906133c5565b5060068360070160006101000a81548160ff021916908360068111156126505761264f612a82565b5b02179055508160040154826002015483600001547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a450505061269b6128a7565b50565b60008060046000848152602001908152602001600020905060006005600085815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061277a57503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61278357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254866001016040518563ffffffff1660e01b81526004016128099493929190613aac565b61020060405180830381865afa158015612827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284b9190614047565b60c0015192505050919050565b60026000540361289d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612894906140c1565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6128d8816128c5565b81146128e357600080fd5b50565b6000813590506128f5816128cf565b92915050565b600060208284031215612911576129106128bb565b5b600061291f848285016128e6565b91505092915050565b612931816128c5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612971578082015181840152602081019050612956565b60008484015250505050565b6000601f19601f8301169050919050565b600061299982612937565b6129a38185612942565b93506129b3818560208601612953565b6129bc8161297d565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612a0c612a07612a02846129c7565b6129e7565b6129c7565b9050919050565b6000612a1e826129f1565b9050919050565b6000612a3082612a13565b9050919050565b612a4081612a25565b82525050565b6000612a51826129c7565b9050919050565b612a6181612a46565b82525050565b60008115159050919050565b612a7c81612a67565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110612ac257612ac1612a82565b5b50565b6000819050612ad382612ab1565b919050565b6000612ae382612ac5565b9050919050565b612af381612ad8565b82525050565b600061012082019050612b0f600083018c612928565b8181036020830152612b21818b61298e565b9050612b30604083018a612928565b612b3d6060830189612a37565b612b4a6080830188612a58565b612b5760a0830187612a73565b612b6460c0830186612928565b81810360e0830152612b76818561298e565b9050612b86610100830184612aea565b9a9950505050505050505050565b6000602082019050612ba96000830184612928565b92915050565b600060c082019050612bc46000830189612928565b612bd16020830188612a58565b612bde6040830187612928565b612beb6060830186612a58565b612bf86080830185612928565b612c0560a0830184612928565b979650505050505050565b612c1981612a46565b8114612c2457600080fd5b50565b600081359050612c3681612c10565b92915050565b60008060408385031215612c5357612c526128bb565b5b6000612c6185828601612c27565b9250506020612c72858286016128e6565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612cbe8261297d565b810181811067ffffffffffffffff82111715612cdd57612cdc612c86565b5b80604052505050565b6000612cf06128b1565b9050612cfc8282612cb5565b919050565b600067ffffffffffffffff821115612d1c57612d1b612c86565b5b612d258261297d565b9050602081019050919050565b82818337600083830152505050565b6000612d54612d4f84612d01565b612ce6565b905082815260208101848484011115612d7057612d6f612c81565b5b612d7b848285612d32565b509392505050565b600082601f830112612d9857612d97612c7c565b5b8135612da8848260208601612d41565b91505092915050565b600060208284031215612dc757612dc66128bb565b5b600082013567ffffffffffffffff811115612de557612de46128c0565b5b612df184828501612d83565b91505092915050565b60006020820190508181036000830152612e14818461298e565b905092915050565b612e2581612a67565b8114612e3057600080fd5b50565b600081359050612e4281612e1c565b92915050565b60008060008060008060c08789031215612e6557612e646128bb565b5b6000612e7389828a016128e6565b9650506020612e8489828a01612e33565b9550506040612e9589828a016128e6565b9450506060612ea689828a016128e6565b9350506080612eb789828a01612c27565b92505060a0612ec889828a016128e6565b9150509295509295509295565b600080fd5b600080fd5b60008083601f840112612ef557612ef4612c7c565b5b8235905067ffffffffffffffff811115612f1257612f11612ed5565b5b602083019150836001820283011115612f2e57612f2d612eda565b5b9250929050565b60008060008060008060008060c0898b031215612f5557612f546128bb565b5b600089013567ffffffffffffffff811115612f7357612f726128c0565b5b612f7f8b828c01612edf565b98509850506020612f928b828c01612c27565b9650506040612fa38b828c016128e6565b9550506060612fb48b828c016128e6565b9450506080612fc58b828c01612e33565b93505060a089013567ffffffffffffffff811115612fe657612fe56128c0565b5b612ff28b828c01612edf565b92509250509295985092959890939650565b6000819050919050565b61301781613004565b82525050565b6000602082019050613032600083018461300e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061307f57607f821691505b60208210810361309257613091613038565b5b50919050565b600082825260208201905092915050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b60006130df601b83613098565b91506130ea826130a9565b602082019050919050565b6000602082019050818103600083015261310e816130d2565b9050919050565b6000819050919050565b61312881613115565b82525050565b60008190508160005260206000209050919050565b6000815461315081613067565b61315a8186612942565b94506001821660008114613175576001811461318b576131be565b60ff1983168652811515602002860193506131be565b6131948561312e565b60005b838110156131b657815481890152600182019150602081019050613197565b808801955050505b50505092915050565b600060a0820190506131dc600083018861311f565b6131e96020830187612928565b81810360408301526131fb8186613143565b905061320a6060830185612a37565b6132176080830184612928565b9695505050505050565b600081519050613230816128cf565b92915050565b60006020828403121561324c5761324b6128bb565b5b600061325a84828501613221565b91505092915050565b6000608082019050613278600083018761311f565b6132856020830186612928565b81810360408301526132978185613143565b90506132a66060830184612928565b95945050505050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b60006132e5601283613098565b91506132f0826132af565b602082019050919050565b60006020820190508181036000830152613314816132d8565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000613351600f83613098565b915061335c8261331b565b602082019050919050565b6000602082019050818103600083015261338081613344565b9050919050565b600060408201905061339c6000830185612a58565b6133a96020830184612928565b9392505050565b6000815190506133bf81612e1c565b92915050565b6000602082840312156133db576133da6128bb565b5b60006133e9848285016133b0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061342c826128c5565b9150613437836128c5565b925082820190508082111561344f5761344e6133f2565b5b92915050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b600061348b601383613098565b915061349682613455565b602082019050919050565b600060208201905081810360008301526134ba8161347e565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b60006134f7601483613098565b9150613502826134c1565b602082019050919050565b60006020820190508181036000830152613526816134ea565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b6000613563601283613098565b915061356e8261352d565b602082019050919050565b6000602082019050818103600083015261359281613556565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b60006135cf601883613098565b91506135da82613599565b602082019050919050565b600060208201905081810360008301526135fe816135c2565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b600061363b601b83613098565b915061364682613605565b602082019050919050565b6000602082019050818103600083015261366a8161362e565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b60006136b882613697565b6136c281856136a2565b93506136d2818560208601612953565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b600061373a6037836136a2565b9150613745826136de565b603782019050919050565b600061375b82613671565b60038201915061376b82846136ad565b91506137768261372d565b915081905092915050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b60006137b7600b83613098565b91506137c282613781565b602082019050919050565b600060208201905081810360008301526137e6816137aa565b9050919050565b7f6e6f74206c6f6164696e67000000000000000000000000000000000000000000600082015250565b6000613823600b83613098565b915061382e826137ed565b602082019050919050565b6000602082019050818103600083015261385281613816565b9050919050565b600060608201905061386e6000830186612a58565b61387b6020830185612a58565b6138886040830184612928565b949350505050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b60006138c6601783613098565b91506138d182613890565b602082019050919050565b600060208201905081810360008301526138f5816138b9565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b6000613932601183613098565b915061393d826138fc565b602082019050919050565b6000602082019050818103600083015261396181613925565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b600061399e601183613098565b91506139a982613968565b602082019050919050565b600060208201905081810360008301526139cd81613991565b9050919050565b7f426574206e6f74204f70656e0000000000000000000000000000000000000000600082015250565b6000613a0a600c83613098565b9150613a15826139d4565b602082019050919050565b60006020820190508181036000830152613a39816139fd565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b6000613a76601083613098565b9150613a8182613a40565b602082019050919050565b60006020820190508181036000830152613aa581613a69565b9050919050565b6000608082019050613ac16000830187612a58565b613ace602083018661311f565b613adb6040830185612928565b8181036060830152613aed8184613143565b905095945050505050565b600081905092915050565b6000613b0e82612937565b613b188185613af8565b9350613b28818560208601612953565b80840191505092915050565b6000613b408284613b03565b915081905092915050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613b987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613b5b565b613ba28683613b5b565b95508019841693508086168417925050509392505050565b6000613bd5613bd0613bcb846128c5565b6129e7565b6128c5565b9050919050565b6000819050919050565b613bef83613bba565b613c03613bfb82613bdc565b848454613b68565b825550505050565b600090565b613c18613c0b565b613c23818484613be6565b505050565b5b81811015613c4757613c3c600082613c10565b600181019050613c29565b5050565b601f821115613c8c57613c5d8161312e565b613c6684613b4b565b81016020851015613c75578190505b613c89613c8185613b4b565b830182613c28565b50505b505050565b600082821c905092915050565b6000613caf60001984600802613c91565b1980831691505092915050565b6000613cc88383613c9e565b9150826002028217905092915050565b613ce182612937565b67ffffffffffffffff811115613cfa57613cf9612c86565b5b613d048254613067565b613d0f828285613c4b565b600060209050601f831160018114613d425760008415613d30578287015190505b613d3a8582613cbc565b865550613da2565b601f198416613d508661312e565b60005b82811015613d7857848901518255600182019150602085019450602081019050613d53565b86831015613d955784890151613d91601f891682613c9e565b8355505b6001600288020188555050505b505050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b6000613de0601183613098565b9150613deb82613daa565b602082019050919050565b60006020820190508181036000830152613e0f81613dd3565b9050919050565b600080fd5b600081519050613e2a81612c10565b92915050565b6000613e3b82612a46565b9050919050565b613e4b81613e30565b8114613e5657600080fd5b50565b600081519050613e6881613e42565b92915050565b600060e08284031215613e8457613e83613e16565b5b613e8e60e0612ce6565b90506000613e9e848285016133b0565b6000830152506020613eb2848285016133b0565b6020830152506040613ec6848285016133b0565b6040830152506060613eda848285016133b0565b6060830152506080613eee848285016133b0565b60808301525060a0613f0284828501613221565b60a08301525060c0613f1684828501613221565b60c08301525092915050565b613f2b81613004565b8114613f3657600080fd5b50565b600081519050613f4881613f22565b92915050565b60006102008284031215613f6557613f64613e16565b5b613f70610140612ce6565b90506000613f8084828501613e1b565b6000830152506020613f9484828501613e1b565b6020830152506040613fa884828501613e59565b6040830152506060613fbc848285016133b0565b6060830152506080613fd084828501613e6e565b608083015250610160613fe584828501613f39565b60a083015250610180613ffa84828501613f39565b60c0830152506101a061400f84828501613221565b60e0830152506101c061402484828501613221565b610100830152506101e061403a84828501613221565b6101208301525092915050565b6000610200828403121561405e5761405d6128bb565b5b600061406c84828501613f4e565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006140ab601f83613098565b91506140b682614075565b602082019050919050565b600060208201905081810360008301526140da8161409e565b905091905056fea26469706673582212207b25f42370934ab908e32d9da05102d8ba0ab44667a11fae551a91725de49be964736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b3580c1e1161008c578063d247f92b11610066578063d247f92b14610266578063d326efb514610282578063dc60054e1461029e578063e5da66af146102ba576100ea565b8063b3580c1e146101fe578063bf7c0c5d1461022e578063c511a0741461024a576100ea565b8063357401f5116100c8578063357401f514610161578063677bd9ff1461017d57806374410429146101995780638068aa68146101ce576100ea565b806322af00fa146100ef57806327bce91b146101275780632adb9e3c14610145575b600080fd5b610109600480360381019061010491906128fb565b6102ea565b60405161011e99989796959493929190612af9565b60405180910390f35b61012f6104a2565b60405161013c9190612b94565b60405180910390f35b61015f600480360381019061015a91906128fb565b6104a8565b005b61017b600480360381019061017691906128fb565b610889565b005b610197600480360381019061019291906128fb565b610bdb565b005b6101b360048036038101906101ae91906128fb565b611125565b6040516101c596959493929190612baf565b60405180910390f35b6101e860048036038101906101e39190612c3c565b6111a1565b6040516101f59190612b94565b60405180910390f35b61021860048036038101906102139190612db1565b6111d2565b6040516102259190612dfa565b60405180910390f35b61024860048036038101906102439190612e48565b611201565b005b610264600480360381019061025f91906128fb565b6115c6565b005b610280600480360381019061027b91906128fb565b611c1d565b005b61029c60048036038101906102979190612f35565b611f1c565b005b6102b860048036038101906102b391906128fb565b6122a1565b005b6102d460048036038101906102cf91906128fb565b61269e565b6040516102e1919061301d565b60405180910390f35b600460205280600052604060002060009150905080600001549080600101805461031390613067565b80601f016020809104026020016040519081016040528092919081815260200182805461033f90613067565b801561038c5780601f106103615761010080835404028352916020019161038c565b820191906000526020600020905b81548152906001019060200180831161036f57829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff169080600501549080600601805461040c90613067565b80601f016020809104026020016040519081016040528092919081815260200182805461043890613067565b80156104855780601f1061045a57610100808354040283529160200191610485565b820191906000526020600020905b81548152906001019060200180831161046857829003601f168201915b5050505050908060070160009054906101000a900460ff16905089565b60035481565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600260068111156104ea576104e9612a82565b5b8260070160009054906101000a900460ff16600681111561050e5761050d612a82565b5b1461054e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610545906130f5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806105fb57503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61060457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000042856001018660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600501546040518663ffffffff1660e01b81526004016106b29594939291906131c7565b6020604051808303816000875af11580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190613236565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000428560010186600501546040518563ffffffff1660e01b815260040161077e9493929190613263565b600060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b5050505060038260070160006101000a81548160ff021916908360068111156107d8576107d7612a82565b5b021790555080600001548160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a4505050565b610891612858565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060008060068111156108d4576108d3612a82565b5b8360070160009054906101000a900460ff1660068111156108f8576108f7612a82565b5b148061093957506001600681111561091357610912612a82565b5b8360070160009054906101000a900460ff16600681111561093757610936612a82565b5b145b610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f906132fb565b60405180910390fd5b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0190613367565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a915781600201549050610a99565b816004015490505b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610b1c929190613387565b6020604051808303816000875af1158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f91906133c5565b50808360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600001547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a4505050610bd86128a7565b50565b610be3612858565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600081600401548260020154610c279190613421565b90506000610c348561269e565b905060046006811115610c4a57610c49612a82565b5b8460070160009054906101000a900460ff166006811115610c6e57610c6d612a82565b5b14610cae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca5906134a1565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d5b57508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610d9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d919061350d565b60405180910390fd5b670de0b6b3a7640000811480610db05750600081145b610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de690613579565b60405180910390fd5b670de0b6b3a76400008103610f5c578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e87906135e5565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610f13929190613387565b6020604051808303816000875af1158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5691906133c5565b506110b6565b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe590613651565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611071929190613387565b6020604051808303816000875af1158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b491906133c5565b505b60058460070160006101000a81548160ff021916908360068111156110de576110dd612a82565b5b0217905550808285600001547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a4505050506111226128a7565b50565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154905086565b600660205281600052604060002081815481106111bd57600080fd5b90600052602060002001600091509150505481565b60606000826040516020016111e79190613750565b604051602081830303815290604052905080915050919050565b611209612858565b60006004600088815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a9906137cd565b60405180910390fd5b600060068111156112c6576112c5612a82565b5b8160070160009054906101000a900460ff1660068111156112ea576112e9612a82565b5b1461132a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132190613839565b60405180910390fd5b600080600080600115158a15150361134a57339350889250879050611354565b3391508890508792505b600115158560040160149054906101000a900460ff161515036113b4573373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146113ad57869350836113b2565b869150815b505b60006040518060c001604052808d81526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018881525090508560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308d6040518463ffffffff1660e01b815260040161147293929190613859565b6020604051808303816000875af1158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b591906133c5565b5080600560008e81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015590505060018660070160006101000a81548160ff021916908360068111156115ab576115aa612a82565b5b02179055505050505050506115be6128a7565b505050505050565b6115ce612858565b600060046000838152602001908152602001600020905060006005600084815260200190815260200160002090508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361168e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611685906138dc565b60405180910390fd5b600015158260040160149054906101000a900460ff1615150361179e57600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061175a5750600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179090613948565b60405180910390fd5b61188b565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061184b57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61188a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611881906139b4565b60405180910390fd5b5b6001600681111561189f5761189e612a82565b5b8260070160009054906101000a900460ff1660068111156118c3576118c2612a82565b5b14611903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fa90613a20565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611a4c578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600201546040518463ffffffff1660e01b81526004016119c093929190613859565b6020604051808303816000875af11580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0391906133c5565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b39565b8160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600401546040518463ffffffff1660e01b8152600401611ab193929190613859565b6020604051808303816000875af1158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af491906133c5565b50338160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505560028260070160006101000a81548160ff02191690836006811115611bc757611bc6612a82565b5b0217905550823373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a35050611c1a6128a7565b50565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060036006811115611c5f57611c5e612a82565b5b8260070160009054906101000a900460ff166006811115611c8357611c82612a82565b5b14611cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cba90613a8c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611d7057503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611d7957600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254866001016040518563ffffffff1660e01b8152600401611dff9493929190613aac565b6020604051808303816000875af1158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e429190613236565b5060048260070160006101000a81548160ff02191690836006811115611e6b57611e6a612a82565b5b021790555080600001548160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a4505050565b611f24612858565b6000611f7389898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506111d2565b9050600083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000889050600060405180610120016040528060035481526020018581526020018981526020018373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200188151581526020018a81526020018481526020016000600681111561204557612044612a82565b5b8152509050836040516120589190613b34565b60405180910390208a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312377a74e3b2d3c110c0a87dc9a32bdfe8152f1163bc6ebbf8549394889ddfd6003546040516120bf9190612b94565b60405180910390a4806004600060035481526020019081526020016000206000820151816000015560208201518160010190816120fc9190613cd8565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015560e08201518160060190816121d49190613cd8565b506101008201518160070160006101000a81548160ff0219169083600681111561220157612200612a82565b5b0217905550905050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546122849190613421565b92505081905550505050506122976128a7565b5050505050505050565b6122a9612858565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060006122e28461269e565b9050600460068111156122f8576122f7612a82565b5b8360070160009054906101000a900460ff16600681111561231c5761231b612a82565b5b1461235c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612353906134a1565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061240957508160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243f9061350d565b60405180910390fd5b671bc16d674ec800008114612492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248990613df6565b60405180910390fd5b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600201546040518363ffffffff1660e01b8152600401612519929190613387565b6020604051808303816000875af1158015612538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255c91906133c5565b508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600401546040518363ffffffff1660e01b81526004016125e4929190613387565b6020604051808303816000875af1158015612603573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262791906133c5565b5060068360070160006101000a81548160ff021916908360068111156126505761264f612a82565b5b02179055508160040154826002015483600001547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a450505061269b6128a7565b50565b60008060046000848152602001908152602001600020905060006005600085815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061277a57503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61278357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254866001016040518563ffffffff1660e01b81526004016128099493929190613aac565b61020060405180830381865afa158015612827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284b9190614047565b60c0015192505050919050565b60026000540361289d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612894906140c1565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6128d8816128c5565b81146128e357600080fd5b50565b6000813590506128f5816128cf565b92915050565b600060208284031215612911576129106128bb565b5b600061291f848285016128e6565b91505092915050565b612931816128c5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612971578082015181840152602081019050612956565b60008484015250505050565b6000601f19601f8301169050919050565b600061299982612937565b6129a38185612942565b93506129b3818560208601612953565b6129bc8161297d565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612a0c612a07612a02846129c7565b6129e7565b6129c7565b9050919050565b6000612a1e826129f1565b9050919050565b6000612a3082612a13565b9050919050565b612a4081612a25565b82525050565b6000612a51826129c7565b9050919050565b612a6181612a46565b82525050565b60008115159050919050565b612a7c81612a67565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110612ac257612ac1612a82565b5b50565b6000819050612ad382612ab1565b919050565b6000612ae382612ac5565b9050919050565b612af381612ad8565b82525050565b600061012082019050612b0f600083018c612928565b8181036020830152612b21818b61298e565b9050612b30604083018a612928565b612b3d6060830189612a37565b612b4a6080830188612a58565b612b5760a0830187612a73565b612b6460c0830186612928565b81810360e0830152612b76818561298e565b9050612b86610100830184612aea565b9a9950505050505050505050565b6000602082019050612ba96000830184612928565b92915050565b600060c082019050612bc46000830189612928565b612bd16020830188612a58565b612bde6040830187612928565b612beb6060830186612a58565b612bf86080830185612928565b612c0560a0830184612928565b979650505050505050565b612c1981612a46565b8114612c2457600080fd5b50565b600081359050612c3681612c10565b92915050565b60008060408385031215612c5357612c526128bb565b5b6000612c6185828601612c27565b9250506020612c72858286016128e6565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612cbe8261297d565b810181811067ffffffffffffffff82111715612cdd57612cdc612c86565b5b80604052505050565b6000612cf06128b1565b9050612cfc8282612cb5565b919050565b600067ffffffffffffffff821115612d1c57612d1b612c86565b5b612d258261297d565b9050602081019050919050565b82818337600083830152505050565b6000612d54612d4f84612d01565b612ce6565b905082815260208101848484011115612d7057612d6f612c81565b5b612d7b848285612d32565b509392505050565b600082601f830112612d9857612d97612c7c565b5b8135612da8848260208601612d41565b91505092915050565b600060208284031215612dc757612dc66128bb565b5b600082013567ffffffffffffffff811115612de557612de46128c0565b5b612df184828501612d83565b91505092915050565b60006020820190508181036000830152612e14818461298e565b905092915050565b612e2581612a67565b8114612e3057600080fd5b50565b600081359050612e4281612e1c565b92915050565b60008060008060008060c08789031215612e6557612e646128bb565b5b6000612e7389828a016128e6565b9650506020612e8489828a01612e33565b9550506040612e9589828a016128e6565b9450506060612ea689828a016128e6565b9350506080612eb789828a01612c27565b92505060a0612ec889828a016128e6565b9150509295509295509295565b600080fd5b600080fd5b60008083601f840112612ef557612ef4612c7c565b5b8235905067ffffffffffffffff811115612f1257612f11612ed5565b5b602083019150836001820283011115612f2e57612f2d612eda565b5b9250929050565b60008060008060008060008060c0898b031215612f5557612f546128bb565b5b600089013567ffffffffffffffff811115612f7357612f726128c0565b5b612f7f8b828c01612edf565b98509850506020612f928b828c01612c27565b9650506040612fa38b828c016128e6565b9550506060612fb48b828c016128e6565b9450506080612fc58b828c01612e33565b93505060a089013567ffffffffffffffff811115612fe657612fe56128c0565b5b612ff28b828c01612edf565b92509250509295985092959890939650565b6000819050919050565b61301781613004565b82525050565b6000602082019050613032600083018461300e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061307f57607f821691505b60208210810361309257613091613038565b5b50919050565b600082825260208201905092915050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b60006130df601b83613098565b91506130ea826130a9565b602082019050919050565b6000602082019050818103600083015261310e816130d2565b9050919050565b6000819050919050565b61312881613115565b82525050565b60008190508160005260206000209050919050565b6000815461315081613067565b61315a8186612942565b94506001821660008114613175576001811461318b576131be565b60ff1983168652811515602002860193506131be565b6131948561312e565b60005b838110156131b657815481890152600182019150602081019050613197565b808801955050505b50505092915050565b600060a0820190506131dc600083018861311f565b6131e96020830187612928565b81810360408301526131fb8186613143565b905061320a6060830185612a37565b6132176080830184612928565b9695505050505050565b600081519050613230816128cf565b92915050565b60006020828403121561324c5761324b6128bb565b5b600061325a84828501613221565b91505092915050565b6000608082019050613278600083018761311f565b6132856020830186612928565b81810360408301526132978185613143565b90506132a66060830184612928565b95945050505050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b60006132e5601283613098565b91506132f0826132af565b602082019050919050565b60006020820190508181036000830152613314816132d8565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000613351600f83613098565b915061335c8261331b565b602082019050919050565b6000602082019050818103600083015261338081613344565b9050919050565b600060408201905061339c6000830185612a58565b6133a96020830184612928565b9392505050565b6000815190506133bf81612e1c565b92915050565b6000602082840312156133db576133da6128bb565b5b60006133e9848285016133b0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061342c826128c5565b9150613437836128c5565b925082820190508082111561344f5761344e6133f2565b5b92915050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b600061348b601383613098565b915061349682613455565b602082019050919050565b600060208201905081810360008301526134ba8161347e565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b60006134f7601483613098565b9150613502826134c1565b602082019050919050565b60006020820190508181036000830152613526816134ea565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b6000613563601283613098565b915061356e8261352d565b602082019050919050565b6000602082019050818103600083015261359281613556565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b60006135cf601883613098565b91506135da82613599565b602082019050919050565b600060208201905081810360008301526135fe816135c2565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b600061363b601b83613098565b915061364682613605565b602082019050919050565b6000602082019050818103600083015261366a8161362e565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b60006136b882613697565b6136c281856136a2565b93506136d2818560208601612953565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b600061373a6037836136a2565b9150613745826136de565b603782019050919050565b600061375b82613671565b60038201915061376b82846136ad565b91506137768261372d565b915081905092915050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b60006137b7600b83613098565b91506137c282613781565b602082019050919050565b600060208201905081810360008301526137e6816137aa565b9050919050565b7f6e6f74206c6f6164696e67000000000000000000000000000000000000000000600082015250565b6000613823600b83613098565b915061382e826137ed565b602082019050919050565b6000602082019050818103600083015261385281613816565b9050919050565b600060608201905061386e6000830186612a58565b61387b6020830185612a58565b6138886040830184612928565b949350505050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b60006138c6601783613098565b91506138d182613890565b602082019050919050565b600060208201905081810360008301526138f5816138b9565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b6000613932601183613098565b915061393d826138fc565b602082019050919050565b6000602082019050818103600083015261396181613925565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b600061399e601183613098565b91506139a982613968565b602082019050919050565b600060208201905081810360008301526139cd81613991565b9050919050565b7f426574206e6f74204f70656e0000000000000000000000000000000000000000600082015250565b6000613a0a600c83613098565b9150613a15826139d4565b602082019050919050565b60006020820190508181036000830152613a39816139fd565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b6000613a76601083613098565b9150613a8182613a40565b602082019050919050565b60006020820190508181036000830152613aa581613a69565b9050919050565b6000608082019050613ac16000830187612a58565b613ace602083018661311f565b613adb6040830185612928565b8181036060830152613aed8184613143565b905095945050505050565b600081905092915050565b6000613b0e82612937565b613b188185613af8565b9350613b28818560208601612953565b80840191505092915050565b6000613b408284613b03565b915081905092915050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613b987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613b5b565b613ba28683613b5b565b95508019841693508086168417925050509392505050565b6000613bd5613bd0613bcb846128c5565b6129e7565b6128c5565b9050919050565b6000819050919050565b613bef83613bba565b613c03613bfb82613bdc565b848454613b68565b825550505050565b600090565b613c18613c0b565b613c23818484613be6565b505050565b5b81811015613c4757613c3c600082613c10565b600181019050613c29565b5050565b601f821115613c8c57613c5d8161312e565b613c6684613b4b565b81016020851015613c75578190505b613c89613c8185613b4b565b830182613c28565b50505b505050565b600082821c905092915050565b6000613caf60001984600802613c91565b1980831691505092915050565b6000613cc88383613c9e565b9150826002028217905092915050565b613ce182612937565b67ffffffffffffffff811115613cfa57613cf9612c86565b5b613d048254613067565b613d0f828285613c4b565b600060209050601f831160018114613d425760008415613d30578287015190505b613d3a8582613cbc565b865550613da2565b601f198416613d508661312e565b60005b82811015613d7857848901518255600182019150602085019450602081019050613d53565b86831015613d955784890151613d91601f891682613c9e565b8355505b6001600288020188555050505b505050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b6000613de0601183613098565b9150613deb82613daa565b602082019050919050565b60006020820190508181036000830152613e0f81613dd3565b9050919050565b600080fd5b600081519050613e2a81612c10565b92915050565b6000613e3b82612a46565b9050919050565b613e4b81613e30565b8114613e5657600080fd5b50565b600081519050613e6881613e42565b92915050565b600060e08284031215613e8457613e83613e16565b5b613e8e60e0612ce6565b90506000613e9e848285016133b0565b6000830152506020613eb2848285016133b0565b6020830152506040613ec6848285016133b0565b6040830152506060613eda848285016133b0565b6060830152506080613eee848285016133b0565b60808301525060a0613f0284828501613221565b60a08301525060c0613f1684828501613221565b60c08301525092915050565b613f2b81613004565b8114613f3657600080fd5b50565b600081519050613f4881613f22565b92915050565b60006102008284031215613f6557613f64613e16565b5b613f70610140612ce6565b90506000613f8084828501613e1b565b6000830152506020613f9484828501613e1b565b6020830152506040613fa884828501613e59565b6040830152506060613fbc848285016133b0565b6060830152506080613fd084828501613e6e565b608083015250610160613fe584828501613f39565b60a083015250610180613ffa84828501613f39565b60c0830152506101a061400f84828501613221565b60e0830152506101c061402484828501613221565b610100830152506101e061403a84828501613221565b6101208301525092915050565b6000610200828403121561405e5761405d6128bb565b5b600061406c84828501613f4e565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006140ab601f83613098565b91506140b682614075565b602082019050919050565b600060208201905081810360008301526140da8161409e565b905091905056fea26469706673582212207b25f42370934ab908e32d9da05102d8ba0ab44667a11fae551a91725de49be964736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 529,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "oo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(OptimisticOracleV2Interface)517"
      },
      {
        "astId": 532,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "requestTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 645,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 650,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "bets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Bet)565_storage)"
      },
      {
        "astId": 655,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(BetAmount)578_storage)"
      },
      {
        "astId": 660,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "userBets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)131": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(OptimisticOracleV2Interface)517": {
        "encoding": "inplace",
        "label": "contract OptimisticOracleV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)586": {
        "encoding": "inplace",
        "label": "enum OO_BetHandler.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bet)565_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)565_storage"
      },
      "t_mapping(t_uint256,t_struct(BetAmount)578_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.BetAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(BetAmount)578_storage"
      },
      "t_struct(Bet)565_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.Bet",
        "members": [
          {
            "astId": 546,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 548,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "question",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 550,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 553,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "bondCurrency",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 555,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 557,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "privateBet",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 559,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "liveness",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 561,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "imgUrl",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes_storage"
          },
          {
            "astId": 564,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betStatus",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(BetStatus)586"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(BetAmount)578_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.BetAmount",
        "members": [
          {
            "astId": 567,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 569,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmation",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 571,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 573,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negation",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 575,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 577,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "reward",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}