{
  "address": "0x24d50b9Ce8B2AfFBe601725a444079045f19092a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        }
      ],
      "name": "BetCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "affirmationRefund",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "negationRefund",
          "type": "uint256"
        }
      ],
      "name": "BetKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "winner",
          "type": "int256"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "affirmationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "negationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "negationAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "privateBet",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liveness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "imgUrl",
          "type": "bytes"
        },
        {
          "internalType": "enum OO_BetHandler.BetStatus",
          "name": "betStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "cancelBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "claimWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        }
      ],
      "name": "createQuestion",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "getSettledData",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "killBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_affirmation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_affirmationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_negation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_negationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_negationAmount",
          "type": "uint256"
        }
      ],
      "name": "loadBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "requestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_bondCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liveness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_privateBet",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_imgUrl",
          "type": "bytes"
        }
      ],
      "name": "setBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "settleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        }
      ],
      "name": "stringDecode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_string",
          "type": "string"
        }
      ],
      "name": "stringEncode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x676d827e7c742b206eed20795ed422cf544df78f59d601faa32cb91efe072413",
  "receipt": {
    "to": null,
    "from": "0x4204FDD868FFe0e62F57e6A626F8C9530F7d5AD1",
    "contractAddress": "0x24d50b9Ce8B2AfFBe601725a444079045f19092a",
    "transactionIndex": 46,
    "gasUsed": "4109157",
    "logsBloom": "0x
    "blockHash": "0x5f3e529e173af053f6d7c895c3529481b10d1dc36b6379562e2d903d3d350e72",
    "transactionHash": "0x676d827e7c742b206eed20795ed422cf544df78f59d601faa32cb91efe072413",
    "logs": [],
    "blockNumber": 8119249,
    "cumulativeGasUsed": "12552662",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "aeaddf335b0740abae2ed7267953358a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"BetCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"affirmationRefund\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"negationRefund\",\"type\":\"uint256\"}],\"name\":\"BetKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"winner\",\"type\":\"int256\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"affirmationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"negationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"negationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateBet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"imgUrl\",\"type\":\"bytes\"},{\"internalType\":\"enum OO_BetHandler.BetStatus\",\"name\":\"betStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"}],\"name\":\"createQuestion\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"getSettledData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"killBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_affirmation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_affirmationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_negation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_negationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_negationAmount\",\"type\":\"uint256\"}],\"name\":\"loadBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_bondCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_privateBet\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_imgUrl\",\"type\":\"bytes\"}],\"name\":\"setBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"settleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"}],\"name\":\"stringDecode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"stringEncode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OO_BetHandler.sol\":\"OO_BetHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleV2Interface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    struct RequestSettings {\\n        bool eventBased; // True if the request is set to be event-based.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\n     * @dev Calling this method has a few impacts on the request:\\n     *\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\n     *    with the request.\\n     *\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\n     *    prematurely proposes a response loses their bond.\\n     *\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\n     *    the requesting contract.\\n     *\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setEventBased(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets which callbacks should be enabled for the request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\n     */\\n    function setCallbacks(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        bool callbackOnPriceProposed,\\n        bool callbackOnPriceDisputed,\\n        bool callbackOnPriceSettled\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbfd9778b3e7c86e149cc140eda5e7210ef4a604cde576abaaa46c1289c5e334f\",\"license\":\"AGPL-3.0-only\"},\"contracts/OO_BetHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract OO_BetHandler is ReentrancyGuard {\\n    // Create an Optimistic oracle instance at the deployed address on G\\u00f6rli.\\n    OptimisticOracleV2Interface oo =\\n        OptimisticOracleV2Interface(0xA5B9d8a0B0Fa04Ba71BDD68069661ED5C0848884);\\n\\n    uint256 requestTime = 0; // Store the request time so we can re-use it later.\\n    bytes32 constant IDENTIFIER = bytes32(\\\"YES_OR_NO_QUERY\\\"); // Use the yes no idetifier to ask arbitary questions, such as the weather on a particular day.\\n    address constant ZERO_ADDRESS = address(0);\\n    // 0x0000000000000000000000000000000000000000\\n\\n    struct Bet {\\n        uint256 betId;\\n        bytes question;\\n        uint256 expiry;\\n        IERC20 bondCurrency;\\n        address creator;\\n        bool privateBet;\\n        uint256 liveness;\\n        uint256 reward;\\n        bytes imgUrl;\\n        BetStatus betStatus;\\n    }\\n\\n    struct BetAmount {\\n        uint256 betId;\\n        address affirmation; // Address of the side of the bet that affirms the question.\\n        IERC20 affirmationToken;\\n        uint256 affirmationAmount; // Amount deposited into the bet by the affrimation.\\n        address negation; // Address of the side of the bet that negates the question.\\n        IERC20 negationToken;\\n        uint256 negationAmount; // Amount deposited into the bet by the negation.\\n    }\\n\\n    enum BetStatus {\\n        LOADING,\\n        OPEN,\\n        ACTIVE,\\n        SETTLING,\\n        SETTLED,\\n        CLAIMED,\\n        DEAD\\n    }\\n\\n    // ******** EVENTS ************\\n\\n    event BetSet(\\n        address indexed creator,\\n        IERC20 indexed bondCurrency,\\n        bytes indexed ancillaryData,\\n        uint256 betId\\n    );\\n\\n    event BetTaken(address indexed taker, uint256 indexed betId);\\n\\n    event DataRequested(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event BetSettled(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event WinningsClaimed(\\n        uint256 indexed betId,\\n        uint256 indexed totalWinnings,\\n        int256 indexed winner\\n    );\\n\\n    event BetCanceled(\\n        uint256 indexed betId,\\n        address indexed bondCurrency,\\n        uint256 indexed refundAmount\\n    );\\n\\n    event BetKilled(\\n        uint256 indexed betId,\\n        uint256 indexed affirmationRefund,\\n        uint256 indexed negationRefund\\n    );\\n\\n    uint256 public betId = 0; // latest global betId for all managed bets.\\n    mapping(uint256 => Bet) public bets; // All bets mapped by their betId\\n    mapping(uint256 => BetAmount) public betAmounts; // All bet amounts mapped by their betId.\\n    mapping(address => uint256[]) public userBets; // All bets the user is and has participated in.\\n\\n    // ********* MUTATIVE FUNCTIONS *************\\n\\n    function setBet(\\n        bytes calldata _question,\\n        uint256 _expiry,\\n        IERC20 _bondCurrency,\\n        uint256 _liveness,\\n        uint256 _reward,\\n        bool _privateBet,\\n        bytes calldata _imgUrl\\n    ) public nonReentrant {\\n        Bet memory bet = Bet(\\n            betId,\\n            _question,\\n            _expiry,\\n            _bondCurrency,\\n            msg.sender,\\n            _privateBet,\\n            _liveness,\\n            _reward,\\n            _imgUrl,\\n            BetStatus.LOADING\\n        );\\n\\n        emit BetSet(msg.sender, _bondCurrency, _question, betId);\\n\\n        bets[betId] = bet;\\n        userBets[msg.sender].push(betId);\\n        betId += 1;\\n    }\\n\\n    function loadBet(\\n        uint256 _betId,\\n        address _affirmation,\\n        IERC20 _affirmationToken,\\n        uint256 _affirmationAmount,\\n        address _negation,\\n        IERC20 _negationToken,\\n        uint256 _negationAmount\\n    ) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        require(msg.sender == bet.creator, \\\"not creator\\\");\\n        require(\\n            bet.creator == _affirmation || bet.creator == _negation,\\n            \\\"must be participant\\\"\\n        );\\n        require(_affirmation != _negation, \\\"must have 2 parties\\\");\\n        require(bet.betStatus == BetStatus.LOADING, \\\"not loading\\\");\\n\\n        BetAmount memory betAmount = BetAmount(\\n            _betId,\\n            _affirmation,\\n            _affirmationToken,\\n            _affirmationAmount,\\n            _negation,\\n            _negationToken,\\n            _negationAmount\\n        );\\n\\n        // Make sure to approve this contract to spend your ERC20 externally first\\n        if (msg.sender == _affirmation) {\\n            _affirmationToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _affirmationAmount\\n            );\\n        } else if (msg.sender == _negation) {\\n            _negationToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _negationAmount\\n            );\\n        }\\n\\n        betAmounts[_betId] = betAmount;\\n        bet.betStatus = BetStatus.OPEN;\\n    }\\n\\n    function takeBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(msg.sender != bet.creator, \\\"Can't take your own bet\\\");\\n        if (bet.privateBet == false) {\\n            require(\\n                betAmount.affirmation == ZERO_ADDRESS ||\\n                    betAmount.negation == ZERO_ADDRESS,\\n                \\\"Bet already taken\\\"\\n            );\\n        } else {\\n            require(\\n                msg.sender == betAmount.affirmation ||\\n                    msg.sender == betAmount.negation,\\n                \\\"Not bet recipient\\\"\\n            );\\n        }\\n        require(bet.betStatus == BetStatus.OPEN, \\\"not Open\\\");\\n\\n        if (betAmount.affirmation == ZERO_ADDRESS) {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                betAmount.affirmationAmount\\n            );\\n            betAmount.affirmation = msg.sender;\\n        } else {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                betAmount.negationAmount\\n            );\\n            betAmount.negation = msg.sender;\\n        }\\n\\n        userBets[msg.sender].push(_betId);\\n        bet.betStatus = BetStatus.ACTIVE;\\n\\n        emit BetTaken(msg.sender, _betId);\\n    }\\n\\n    function requestData(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(\\n            bet.betStatus == BetStatus.ACTIVE,\\n            \\\"Bet not ready to be settled\\\"\\n        );\\n        require(\\n            betAmount.affirmation == msg.sender ||\\n                betAmount.negation == msg.sender\\n        );\\n\\n        bytes memory ancillaryData = bet.question; // Question to ask the UMA Oracle.\\n\\n        requestTime = block.timestamp; // Set the request time to the current block time.\\n        IERC20 bondCurrency = IERC20(bet.bondCurrency); // Use preferred token as the bond currency.\\n        uint256 reward = bet.reward; // Set the reward amount for UMA Oracle.\\n\\n        // Set liveness for request disputes measured in seconds. Recommended time is at least 7200 (2 hours).\\n        // Users should increase liveness time depending on various factors such as amount of funds being handled\\n        // and risk of malicious acts.\\n        uint256 liveness = bet.liveness;\\n\\n        // Now, make the price request to the Optimistic oracle with preferred inputs.\\n        oo.requestPrice(\\n            IDENTIFIER,\\n            requestTime,\\n            ancillaryData,\\n            bondCurrency,\\n            reward\\n        );\\n        oo.setCustomLiveness(IDENTIFIER, requestTime, ancillaryData, liveness);\\n\\n        bet.betStatus = BetStatus.SETTLING;\\n        emit DataRequested(\\n            betAmount.affirmation,\\n            betAmount.negation,\\n            betAmount.betId\\n        );\\n    }\\n\\n    // Settle the request once it's gone through the liveness period of 30 seconds. This acts the finalize the voted on price.\\n    // In a real world use of the Optimistic Oracle this should be longer to give time to disputers to catch bat price proposals.\\n    function settleRequest(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(bet.betStatus == BetStatus.SETTLING, \\\"Bet not settling\\\");\\n        require(\\n            betAmount.affirmation == msg.sender ||\\n                betAmount.negation == msg.sender\\n        );\\n\\n        bytes memory ancillaryData = bet.question;\\n\\n        oo.settle(address(this), IDENTIFIER, requestTime, ancillaryData);\\n        bet.betStatus = BetStatus.SETTLED;\\n\\n        emit BetSettled(\\n            betAmount.affirmation,\\n            betAmount.negation,\\n            betAmount.betId\\n        );\\n    }\\n\\n    function claimWinnings(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        uint256 totalWinnings = betAmount.affirmationAmount +\\n            betAmount.negationAmount;\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == betAmount.affirmation ||\\n                msg.sender == betAmount.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(\\n            settlementData == 1e18 || settlementData == 0,\\n            \\\"Invalid settlement\\\"\\n        );\\n        if (settlementData == 1e18) {\\n            require(\\n                msg.sender == betAmount.affirmation,\\n                \\\"Negation did not win bet\\\"\\n            );\\n            bet.bondCurrency.transfer(betAmount.affirmation, totalWinnings);\\n        } else {\\n            require(\\n                msg.sender == betAmount.negation,\\n                \\\"Affirmation did not win bet\\\"\\n            );\\n            bet.bondCurrency.transfer(betAmount.negation, totalWinnings);\\n        }\\n\\n        bet.betStatus = BetStatus.CLAIMED;\\n\\n        emit WinningsClaimed(bet.betId, totalWinnings, settlementData);\\n    }\\n\\n    function cancelBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        uint256 refundAmount;\\n        require(\\n            bet.betStatus == BetStatus.LOADING ||\\n                bet.betStatus == BetStatus.OPEN,\\n            \\\"Bet already active\\\"\\n        );\\n        require(msg.sender == bet.creator, \\\"Not bet creator\\\");\\n\\n        if (bet.creator == betAmount.affirmation) {\\n            refundAmount = betAmount.affirmationAmount;\\n        } else {\\n            refundAmount = betAmount.negationAmount;\\n        }\\n\\n        bet.bondCurrency.transfer(bet.creator, refundAmount);\\n\\n        emit BetCanceled(bet.betId, address(bet.bondCurrency), refundAmount);\\n    }\\n\\n    function killBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == betAmount.affirmation ||\\n                msg.sender == betAmount.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(settlementData == 2 * 1e18, \\\"Bet is settleable\\\");\\n        bet.bondCurrency.transfer(\\n            betAmount.affirmation,\\n            betAmount.affirmationAmount\\n        );\\n        bet.bondCurrency.transfer(betAmount.negation, betAmount.negationAmount);\\n\\n        bet.betStatus = BetStatus.DEAD;\\n\\n        emit BetKilled(\\n            betAmount.betId,\\n            betAmount.affirmationAmount,\\n            betAmount.negationAmount\\n        );\\n    }\\n\\n    //******* VIEW FUNCTIONS ***********\\n    function createQuestion(string memory _question)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory question = bytes(\\n            string.concat(\\n                \\\"Q: \\\",\\n                _question,\\n                \\\"? --- A:1 for yes. 0 for no. 2 for ambiguous/unknowable\\\"\\n            )\\n        );\\n        return question;\\n    }\\n\\n    // Fetch the resolved price from the Optimistic Oracle that was settled.\\n    function getSettledData(uint256 _betId) public view returns (int256) {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(\\n            betAmount.affirmation == msg.sender ||\\n                betAmount.negation == msg.sender\\n        );\\n\\n        return\\n            oo\\n                .getRequest(\\n                    address(this),\\n                    IDENTIFIER,\\n                    requestTime,\\n                    bet.question\\n                )\\n                .resolvedPrice;\\n    }\\n\\n    function stringEncode(string calldata _string)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return bytes(_string);\\n    }\\n\\n    function stringDecode(bytes calldata _bytes)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return string(_bytes);\\n    }\\n}\\n\",\"keccak256\":\"0xaa0fa30a1682e3bd313160423b638b1091fcfb0a83a7a4c34a54b8f8a98b1894\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405273a5b9d8a0b0fa04ba71bdd68069661ed5c0848884600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600255600060035534801561006f57600080fd5b5060016000819055506148b7806100876000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063677bd9ff11610097578063c511a07411610066578063c511a074146102de578063d247f92b146102fa578063dc60054e14610316578063e5da66af1461033257610100565b8063677bd9ff1461022c57806374410429146102485780638068aa681461027e578063b3580c1e146102ae57610100565b80633268fc8a116100d35780633268fc8a146101a8578063357401f5146101c457806345b7c1c1146101e057806346049d541461021057610100565b806306c66b851461010557806322af00fa1461013557806327bce91b1461016e5780632adb9e3c1461018c575b600080fd5b61011f600480360381019061011a9190612e0b565b610362565b60405161012c9190612ee8565b60405180910390f35b61014f600480360381019061014a9190612f40565b6103b1565b6040516101659a99989796959493929190613103565b60405180910390f35b61017661056f565b60405161018391906131ad565b60405180910390f35b6101a660048036038101906101a19190612f40565b610575565b005b6101c260048036038101906101bd9190613232565b6109ff565b005b6101de60048036038101906101d99190612f40565b611011565b005b6101fa60048036038101906101f5919061332a565b611363565b6040516102079190613377565b60405180910390f35b61022a600480360381019061022591906133c5565b6113b2565b005b61024660048036038101906102419190612f40565b611731565b005b610262600480360381019061025d9190612f40565b611c7b565b60405161027597969594939291906134a7565b60405180910390f35b61029860048036038101906102939190613516565b611d3d565b6040516102a591906131ad565b60405180910390f35b6102c860048036038101906102c39190613686565b611d6e565b6040516102d59190613377565b60405180910390f35b6102f860048036038101906102f39190612f40565b611d9d565b005b610314600480360381019061030f9190612f40565b6123f4565b005b610330600480360381019061032b9190612f40565b612782565b005b61034c60048036038101906103479190612f40565b612b7f565b60405161035991906136e8565b60405180910390f35b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b60046020528060005260406000206000915090508060000154908060010180546103da90613732565b80601f016020809104026020016040519081016040528092919081815260200182805461040690613732565b80156104535780601f1061042857610100808354040283529160200191610453565b820191906000526020600020905b81548152906001019060200180831161043657829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060050154908060060154908060070180546104d990613732565b80601f016020809104026020016040519081016040528092919081815260200182805461050590613732565b80156105525780601f1061052757610100808354040283529160200191610552565b820191906000526020600020905b81548152906001019060200180831161053557829003601f168201915b5050505050908060080160009054906101000a900460ff1690508a565b60035481565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600260068111156105b7576105b661308c565b5b8260080160009054906101000a900460ff1660068111156105db576105da61308c565b5b1461061b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610612906137af565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806106c857503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6106d157600080fd5b60008260010180546106e290613732565b80601f016020809104026020016040519081016040528092919081815260200182805461070e90613732565b801561075b5780601f106107305761010080835404028352916020019161075b565b820191906000526020600020905b81548152906001019060200180831161073e57829003601f168201915b505050505090504260028190555060008360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600084600601549050600085600501549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b81526004016108299594939291906137e8565b6020604051808303816000875af1158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190613857565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b81526004016108f09493929190613884565b600060405180830381600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b5050505060038660080160006101000a81548160ff0219169083600681111561094a5761094961308c565b5b021790555084600001548560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a450505050505050565b610a07612d39565b60006004600089815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa79061391c565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b5d57508373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9390613988565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c01906139f4565b60405180910390fd5b60006006811115610c1e57610c1d61308c565b5b8160080160009054906101000a900460ff166006811115610c4257610c4161308c565b5b14610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7990613a60565b60405180910390fd5b60006040518060e001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481525090508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610dca578673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401610d8193929190613a80565b6020604051808303816000875af1158015610da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc49190613acc565b50610e80565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610e7f578373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610e3a93929190613a80565b6020604051808303816000875af1158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190613acc565b505b5b80600560008b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015590505060018260080160006101000a81548160ff02191690836006811115610ff957610ff861308c565b5b02179055505050611008612d88565b50505050505050565b611019612d39565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600080600681111561105c5761105b61308c565b5b8360080160009054906101000a900460ff1660068111156110805761107f61308c565b5b14806110c157506001600681111561109b5761109a61308c565b5b8360080160009054906101000a900460ff1660068111156110bf576110be61308c565b5b145b611100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f790613b45565b60405180910390fd5b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990613bb1565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036112195781600301549050611221565b816006015490505b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016112a4929190613bd1565b6020604051808303816000875af11580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190613acc565b50808360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600001547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a4505050611360612d88565b50565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b6113ba612d39565b600060405180610140016040528060035481526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001851515815260200187815260200186815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600060068111156114ca576114c961308c565b5b815250905089896040516114df929190613c2a565b60405180910390208773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312377a74e3b2d3c110c0a87dc9a32bdfe8152f1163bc6ebbf8549394889ddfd60035460405161154691906131ad565b60405180910390a4806004600060035481526020019081526020016000206000820151816000015560208201518160010190816115839190613de5565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015560e082015181600601556101008201518160070190816116669190613de5565b506101208201518160080160006101000a81548160ff021916908360068111156116935761169261308c565b5b0217905550905050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546117169190613ee6565b9250508190555050611726612d88565b505050505050505050565b611739612d39565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060008160060154826003015461177d9190613ee6565b9050600061178a85612b7f565b9050600460068111156117a05761179f61308c565b5b8460080160009054906101000a900460ff1660068111156117c4576117c361308c565b5b14611804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fb90613f66565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806118b157508260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6118f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e790613fd2565b60405180910390fd5b670de0b6b3a76400008114806119065750600081145b611945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193c9061403e565b60405180910390fd5b670de0b6b3a76400008103611ab2578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dd906140aa565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611a69929190613bd1565b6020604051808303816000875af1158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac9190613acc565b50611c0c565b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3b90614116565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611bc7929190613bd1565b6020604051808303816000875af1158015611be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0a9190613acc565b505b60058460080160006101000a81548160ff02191690836006811115611c3457611c3361308c565b5b0217905550808285600001547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a450505050611c78612d88565b50565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154905087565b60066020528160005260406000208181548110611d5957600080fd5b90600052602060002001600091509150505481565b6060600082604051602001611d83919061420a565b604051602081830303815290604052905080915050919050565b611da5612d39565b600060046000838152602001908152602001600020905060006005600084815260200190815260200160002090508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5c90614287565b60405180910390fd5b600015158260040160149054906101000a900460ff16151503611f7557600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611f315750600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f67906142f3565b60405180910390fd5b612062565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061202257508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612061576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120589061435f565b60405180910390fd5b5b600160068111156120765761207561308c565b5b8260080160009054906101000a900460ff16600681111561209a5761209961308c565b5b146120da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d1906143cb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612223578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600301546040518463ffffffff1660e01b815260040161219793929190613a80565b6020604051808303816000875af11580156121b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121da9190613acc565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612310565b8160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600601546040518463ffffffff1660e01b815260040161228893929190613a80565b6020604051808303816000875af11580156122a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cb9190613acc565b50338160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505560028260080160006101000a81548160ff0219169083600681111561239e5761239d61308c565b5b0217905550823373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350506123f1612d88565b50565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600360068111156124365761243561308c565b5b8260080160009054906101000a900460ff16600681111561245a5761245961308c565b5b1461249a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249190614437565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061254757503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61255057600080fd5b600082600101805461256190613732565b80601f016020809104026020016040519081016040528092919081815260200182805461258d90613732565b80156125da5780601f106125af576101008083540402835291602001916125da565b820191906000526020600020905b8154815290600101906020018083116125bd57829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b81526004016126649493929190614457565b6020604051808303816000875af1158015612683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a79190613857565b5060048360080160006101000a81548160ff021916908360068111156126d0576126cf61308c565b5b021790555081600001548260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a450505050565b61278a612d39565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060006127c384612b7f565b9050600460068111156127d9576127d861308c565b5b8360080160009054906101000a900460ff1660068111156127fd576127fc61308c565b5b1461283d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283490613f66565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806128ea57508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292090613fd2565b60405180910390fd5b671bc16d674ec800008114612973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296a906144ef565b60405180910390fd5b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600301546040518363ffffffff1660e01b81526004016129fa929190613bd1565b6020604051808303816000875af1158015612a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3d9190613acc565b508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600601546040518363ffffffff1660e01b8152600401612ac5929190613bd1565b6020604051808303816000875af1158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b089190613acc565b5060068360080160006101000a81548160ff02191690836006811115612b3157612b3061308c565b5b02179055508160060154826003015483600001547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a4505050612b7c612d88565b50565b60008060046000848152602001908152602001600020905060006005600085815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612c5b57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612c6457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254866001016040518563ffffffff1660e01b8152600401612cea9493929190614593565b61020060405180830381865afa158015612d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2c91906147e7565b60c0015192505050919050565b600260005403612d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7590614861565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112612dcb57612dca612da6565b5b8235905067ffffffffffffffff811115612de857612de7612dab565b5b602083019150836001820283011115612e0457612e03612db0565b5b9250929050565b60008060208385031215612e2257612e21612d9c565b5b600083013567ffffffffffffffff811115612e4057612e3f612da1565b5b612e4c85828601612db5565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e92578082015181840152602081019050612e77565b60008484015250505050565b6000601f19601f8301169050919050565b6000612eba82612e58565b612ec48185612e63565b9350612ed4818560208601612e74565b612edd81612e9e565b840191505092915050565b60006020820190508181036000830152612f028184612eaf565b905092915050565b6000819050919050565b612f1d81612f0a565b8114612f2857600080fd5b50565b600081359050612f3a81612f14565b92915050565b600060208284031215612f5657612f55612d9c565b5b6000612f6484828501612f2b565b91505092915050565b612f7681612f0a565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612fa382612f7c565b612fad8185612f87565b9350612fbd818560208601612e74565b612fc681612e9e565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061301661301161300c84612fd1565b612ff1565b612fd1565b9050919050565b600061302882612ffb565b9050919050565b600061303a8261301d565b9050919050565b61304a8161302f565b82525050565b600061305b82612fd1565b9050919050565b61306b81613050565b82525050565b60008115159050919050565b61308681613071565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600781106130cc576130cb61308c565b5b50565b60008190506130dd826130bb565b919050565b60006130ed826130cf565b9050919050565b6130fd816130e2565b82525050565b600061014082019050613119600083018d612f6d565b818103602083015261312b818c612f98565b905061313a604083018b612f6d565b613147606083018a613041565b6131546080830189613062565b61316160a083018861307d565b61316e60c0830187612f6d565b61317b60e0830186612f6d565b81810361010083015261318e8185612f98565b905061319e6101208301846130f4565b9b9a5050505050505050505050565b60006020820190506131c26000830184612f6d565b92915050565b6131d181613050565b81146131dc57600080fd5b50565b6000813590506131ee816131c8565b92915050565b60006131ff82613050565b9050919050565b61320f816131f4565b811461321a57600080fd5b50565b60008135905061322c81613206565b92915050565b600080600080600080600060e0888a03121561325157613250612d9c565b5b600061325f8a828b01612f2b565b97505060206132708a828b016131df565b96505060406132818a828b0161321d565b95505060606132928a828b01612f2b565b94505060806132a38a828b016131df565b93505060a06132b48a828b0161321d565b92505060c06132c58a828b01612f2b565b91505092959891949750929550565b60008083601f8401126132ea576132e9612da6565b5b8235905067ffffffffffffffff81111561330757613306612dab565b5b60208301915083600182028301111561332357613322612db0565b5b9250929050565b6000806020838503121561334157613340612d9c565b5b600083013567ffffffffffffffff81111561335f5761335e612da1565b5b61336b858286016132d4565b92509250509250929050565b600060208201905081810360008301526133918184612f98565b905092915050565b6133a281613071565b81146133ad57600080fd5b50565b6000813590506133bf81613399565b92915050565b600080600080600080600080600060e08a8c0312156133e7576133e6612d9c565b5b60008a013567ffffffffffffffff81111561340557613404612da1565b5b6134118c828d01612db5565b995099505060206134248c828d01612f2b565b97505060406134358c828d0161321d565b96505060606134468c828d01612f2b565b95505060806134578c828d01612f2b565b94505060a06134688c828d016133b0565b93505060c08a013567ffffffffffffffff81111561348957613488612da1565b5b6134958c828d01612db5565b92509250509295985092959850929598565b600060e0820190506134bc600083018a612f6d565b6134c96020830189613062565b6134d66040830188613041565b6134e36060830187612f6d565b6134f06080830186613062565b6134fd60a0830185613041565b61350a60c0830184612f6d565b98975050505050505050565b6000806040838503121561352d5761352c612d9c565b5b600061353b858286016131df565b925050602061354c85828601612f2b565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61359382612e9e565b810181811067ffffffffffffffff821117156135b2576135b161355b565b5b80604052505050565b60006135c5612d92565b90506135d1828261358a565b919050565b600067ffffffffffffffff8211156135f1576135f061355b565b5b6135fa82612e9e565b9050602081019050919050565b82818337600083830152505050565b6000613629613624846135d6565b6135bb565b90508281526020810184848401111561364557613644613556565b5b613650848285613607565b509392505050565b600082601f83011261366d5761366c612da6565b5b813561367d848260208601613616565b91505092915050565b60006020828403121561369c5761369b612d9c565b5b600082013567ffffffffffffffff8111156136ba576136b9612da1565b5b6136c684828501613658565b91505092915050565b6000819050919050565b6136e2816136cf565b82525050565b60006020820190506136fd60008301846136d9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061374a57607f821691505b60208210810361375d5761375c613703565b5b50919050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b6000613799601b83612e63565b91506137a482613763565b602082019050919050565b600060208201905081810360008301526137c88161378c565b9050919050565b6000819050919050565b6137e2816137cf565b82525050565b600060a0820190506137fd60008301886137d9565b61380a6020830187612f6d565b818103604083015261381c8186612f98565b905061382b6060830185613041565b6138386080830184612f6d565b9695505050505050565b60008151905061385181612f14565b92915050565b60006020828403121561386d5761386c612d9c565b5b600061387b84828501613842565b91505092915050565b600060808201905061389960008301876137d9565b6138a66020830186612f6d565b81810360408301526138b88185612f98565b90506138c76060830184612f6d565b95945050505050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b6000613906600b83612e63565b9150613911826138d0565b602082019050919050565b60006020820190508181036000830152613935816138f9565b9050919050565b7f6d757374206265207061727469636970616e7400000000000000000000000000600082015250565b6000613972601383612e63565b915061397d8261393c565b602082019050919050565b600060208201905081810360008301526139a181613965565b9050919050565b7f6d75737420686176652032207061727469657300000000000000000000000000600082015250565b60006139de601383612e63565b91506139e9826139a8565b602082019050919050565b60006020820190508181036000830152613a0d816139d1565b9050919050565b7f6e6f74206c6f6164696e67000000000000000000000000000000000000000000600082015250565b6000613a4a600b83612e63565b9150613a5582613a14565b602082019050919050565b60006020820190508181036000830152613a7981613a3d565b9050919050565b6000606082019050613a956000830186613062565b613aa26020830185613062565b613aaf6040830184612f6d565b949350505050565b600081519050613ac681613399565b92915050565b600060208284031215613ae257613ae1612d9c565b5b6000613af084828501613ab7565b91505092915050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b6000613b2f601283612e63565b9150613b3a82613af9565b602082019050919050565b60006020820190508181036000830152613b5e81613b22565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000613b9b600f83612e63565b9150613ba682613b65565b602082019050919050565b60006020820190508181036000830152613bca81613b8e565b9050919050565b6000604082019050613be66000830185613062565b613bf36020830184612f6d565b9392505050565b600081905092915050565b6000613c118385613bfa565b9350613c1e838584613607565b82840190509392505050565b6000613c37828486613c05565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613ca57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613c68565b613caf8683613c68565b95508019841693508086168417925050509392505050565b6000613ce2613cdd613cd884612f0a565b612ff1565b612f0a565b9050919050565b6000819050919050565b613cfc83613cc7565b613d10613d0882613ce9565b848454613c75565b825550505050565b600090565b613d25613d18565b613d30818484613cf3565b505050565b5b81811015613d5457613d49600082613d1d565b600181019050613d36565b5050565b601f821115613d9957613d6a81613c43565b613d7384613c58565b81016020851015613d82578190505b613d96613d8e85613c58565b830182613d35565b50505b505050565b600082821c905092915050565b6000613dbc60001984600802613d9e565b1980831691505092915050565b6000613dd58383613dab565b9150826002028217905092915050565b613dee82612f7c565b67ffffffffffffffff811115613e0757613e0661355b565b5b613e118254613732565b613e1c828285613d58565b600060209050601f831160018114613e4f5760008415613e3d578287015190505b613e478582613dc9565b865550613eaf565b601f198416613e5d86613c43565b60005b82811015613e8557848901518255600182019150602085019450602081019050613e60565b86831015613ea25784890151613e9e601f891682613dab565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ef182612f0a565b9150613efc83612f0a565b9250828201905080821115613f1457613f13613eb7565b5b92915050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b6000613f50601383612e63565b9150613f5b82613f1a565b602082019050919050565b60006020820190508181036000830152613f7f81613f43565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b6000613fbc601483612e63565b9150613fc782613f86565b602082019050919050565b60006020820190508181036000830152613feb81613faf565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b6000614028601283612e63565b915061403382613ff2565b602082019050919050565b600060208201905081810360008301526140578161401b565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b6000614094601883612e63565b915061409f8261405e565b602082019050919050565b600060208201905081810360008301526140c381614087565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b6000614100601b83612e63565b915061410b826140ca565b602082019050919050565b6000602082019050818103600083015261412f816140f3565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b600061417282612e58565b61417c818561415c565b935061418c818560208601612e74565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b60006141f460378361415c565b91506141ff82614198565b603782019050919050565b600061421582614136565b6003820191506142258284614167565b9150614230826141e7565b915081905092915050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b6000614271601783612e63565b915061427c8261423b565b602082019050919050565b600060208201905081810360008301526142a081614264565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b60006142dd601183612e63565b91506142e8826142a7565b602082019050919050565b6000602082019050818103600083015261430c816142d0565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b6000614349601183612e63565b915061435482614313565b602082019050919050565b600060208201905081810360008301526143788161433c565b9050919050565b7f6e6f74204f70656e000000000000000000000000000000000000000000000000600082015250565b60006143b5600883612e63565b91506143c08261437f565b602082019050919050565b600060208201905081810360008301526143e4816143a8565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b6000614421601083612e63565b915061442c826143eb565b602082019050919050565b6000602082019050818103600083015261445081614414565b9050919050565b600060808201905061446c6000830187613062565b61447960208301866137d9565b6144866040830185612f6d565b81810360608301526144988184612f98565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b60006144d9601183612e63565b91506144e4826144a3565b602082019050919050565b60006020820190508181036000830152614508816144cc565b9050919050565b6000815461451c81613732565b6145268186612f87565b9450600182166000811461454157600181146145575761458a565b60ff19831686528115156020028601935061458a565b61456085613c43565b60005b8381101561458257815481890152600182019150602081019050614563565b808801955050505b50505092915050565b60006080820190506145a86000830187613062565b6145b560208301866137d9565b6145c26040830185612f6d565b81810360608301526145d4818461450f565b905095945050505050565b600080fd5b6000815190506145f3816131c8565b92915050565b60008151905061460881613206565b92915050565b600060e08284031215614624576146236145df565b5b61462e60e06135bb565b9050600061463e84828501613ab7565b600083015250602061465284828501613ab7565b602083015250604061466684828501613ab7565b604083015250606061467a84828501613ab7565b606083015250608061468e84828501613ab7565b60808301525060a06146a284828501613842565b60a08301525060c06146b684828501613842565b60c08301525092915050565b6146cb816136cf565b81146146d657600080fd5b50565b6000815190506146e8816146c2565b92915050565b60006102008284031215614705576147046145df565b5b6147106101406135bb565b90506000614720848285016145e4565b6000830152506020614734848285016145e4565b6020830152506040614748848285016145f9565b604083015250606061475c84828501613ab7565b60608301525060806147708482850161460e565b608083015250610160614785848285016146d9565b60a08301525061018061479a848285016146d9565b60c0830152506101a06147af84828501613842565b60e0830152506101c06147c484828501613842565b610100830152506101e06147da84828501613842565b6101208301525092915050565b600061020082840312156147fe576147fd612d9c565b5b600061480c848285016146ee565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061484b601f83612e63565b915061485682614815565b602082019050919050565b6000602082019050818103600083015261487a8161483e565b905091905056fea2646970667358221220cfef225b628e87d0f71c7c246292371a74c70f2552f5a56df5f8c6c8d8c0399e64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063677bd9ff11610097578063c511a07411610066578063c511a074146102de578063d247f92b146102fa578063dc60054e14610316578063e5da66af1461033257610100565b8063677bd9ff1461022c57806374410429146102485780638068aa681461027e578063b3580c1e146102ae57610100565b80633268fc8a116100d35780633268fc8a146101a8578063357401f5146101c457806345b7c1c1146101e057806346049d541461021057610100565b806306c66b851461010557806322af00fa1461013557806327bce91b1461016e5780632adb9e3c1461018c575b600080fd5b61011f600480360381019061011a9190612e0b565b610362565b60405161012c9190612ee8565b60405180910390f35b61014f600480360381019061014a9190612f40565b6103b1565b6040516101659a99989796959493929190613103565b60405180910390f35b61017661056f565b60405161018391906131ad565b60405180910390f35b6101a660048036038101906101a19190612f40565b610575565b005b6101c260048036038101906101bd9190613232565b6109ff565b005b6101de60048036038101906101d99190612f40565b611011565b005b6101fa60048036038101906101f5919061332a565b611363565b6040516102079190613377565b60405180910390f35b61022a600480360381019061022591906133c5565b6113b2565b005b61024660048036038101906102419190612f40565b611731565b005b610262600480360381019061025d9190612f40565b611c7b565b60405161027597969594939291906134a7565b60405180910390f35b61029860048036038101906102939190613516565b611d3d565b6040516102a591906131ad565b60405180910390f35b6102c860048036038101906102c39190613686565b611d6e565b6040516102d59190613377565b60405180910390f35b6102f860048036038101906102f39190612f40565b611d9d565b005b610314600480360381019061030f9190612f40565b6123f4565b005b610330600480360381019061032b9190612f40565b612782565b005b61034c60048036038101906103479190612f40565b612b7f565b60405161035991906136e8565b60405180910390f35b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b60046020528060005260406000206000915090508060000154908060010180546103da90613732565b80601f016020809104026020016040519081016040528092919081815260200182805461040690613732565b80156104535780601f1061042857610100808354040283529160200191610453565b820191906000526020600020905b81548152906001019060200180831161043657829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060050154908060060154908060070180546104d990613732565b80601f016020809104026020016040519081016040528092919081815260200182805461050590613732565b80156105525780601f1061052757610100808354040283529160200191610552565b820191906000526020600020905b81548152906001019060200180831161053557829003601f168201915b5050505050908060080160009054906101000a900460ff1690508a565b60035481565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600260068111156105b7576105b661308c565b5b8260080160009054906101000a900460ff1660068111156105db576105da61308c565b5b1461061b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610612906137af565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806106c857503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6106d157600080fd5b60008260010180546106e290613732565b80601f016020809104026020016040519081016040528092919081815260200182805461070e90613732565b801561075b5780601f106107305761010080835404028352916020019161075b565b820191906000526020600020905b81548152906001019060200180831161073e57829003601f168201915b505050505090504260028190555060008360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600084600601549050600085600501549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b81526004016108299594939291906137e8565b6020604051808303816000875af1158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190613857565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b81526004016108f09493929190613884565b600060405180830381600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b5050505060038660080160006101000a81548160ff0219169083600681111561094a5761094961308c565b5b021790555084600001548560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a450505050505050565b610a07612d39565b60006004600089815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa79061391c565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b5d57508373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9390613988565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c01906139f4565b60405180910390fd5b60006006811115610c1e57610c1d61308c565b5b8160080160009054906101000a900460ff166006811115610c4257610c4161308c565b5b14610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7990613a60565b60405180910390fd5b60006040518060e001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481525090508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610dca578673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401610d8193929190613a80565b6020604051808303816000875af1158015610da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc49190613acc565b50610e80565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610e7f578373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610e3a93929190613a80565b6020604051808303816000875af1158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190613acc565b505b5b80600560008b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015590505060018260080160006101000a81548160ff02191690836006811115610ff957610ff861308c565b5b02179055505050611008612d88565b50505050505050565b611019612d39565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600080600681111561105c5761105b61308c565b5b8360080160009054906101000a900460ff1660068111156110805761107f61308c565b5b14806110c157506001600681111561109b5761109a61308c565b5b8360080160009054906101000a900460ff1660068111156110bf576110be61308c565b5b145b611100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f790613b45565b60405180910390fd5b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990613bb1565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036112195781600301549050611221565b816006015490505b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016112a4929190613bd1565b6020604051808303816000875af11580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190613acc565b50808360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600001547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a4505050611360612d88565b50565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b6113ba612d39565b600060405180610140016040528060035481526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001851515815260200187815260200186815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600060068111156114ca576114c961308c565b5b815250905089896040516114df929190613c2a565b60405180910390208773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312377a74e3b2d3c110c0a87dc9a32bdfe8152f1163bc6ebbf8549394889ddfd60035460405161154691906131ad565b60405180910390a4806004600060035481526020019081526020016000206000820151816000015560208201518160010190816115839190613de5565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015560e082015181600601556101008201518160070190816116669190613de5565b506101208201518160080160006101000a81548160ff021916908360068111156116935761169261308c565b5b0217905550905050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546117169190613ee6565b9250508190555050611726612d88565b505050505050505050565b611739612d39565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060008160060154826003015461177d9190613ee6565b9050600061178a85612b7f565b9050600460068111156117a05761179f61308c565b5b8460080160009054906101000a900460ff1660068111156117c4576117c361308c565b5b14611804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fb90613f66565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806118b157508260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6118f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e790613fd2565b60405180910390fd5b670de0b6b3a76400008114806119065750600081145b611945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193c9061403e565b60405180910390fd5b670de0b6b3a76400008103611ab2578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dd906140aa565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611a69929190613bd1565b6020604051808303816000875af1158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac9190613acc565b50611c0c565b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3b90614116565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611bc7929190613bd1565b6020604051808303816000875af1158015611be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0a9190613acc565b505b60058460080160006101000a81548160ff02191690836006811115611c3457611c3361308c565b5b0217905550808285600001547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a450505050611c78612d88565b50565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154905087565b60066020528160005260406000208181548110611d5957600080fd5b90600052602060002001600091509150505481565b6060600082604051602001611d83919061420a565b604051602081830303815290604052905080915050919050565b611da5612d39565b600060046000838152602001908152602001600020905060006005600084815260200190815260200160002090508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5c90614287565b60405180910390fd5b600015158260040160149054906101000a900460ff16151503611f7557600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611f315750600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f67906142f3565b60405180910390fd5b612062565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061202257508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612061576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120589061435f565b60405180910390fd5b5b600160068111156120765761207561308c565b5b8260080160009054906101000a900460ff16600681111561209a5761209961308c565b5b146120da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d1906143cb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612223578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600301546040518463ffffffff1660e01b815260040161219793929190613a80565b6020604051808303816000875af11580156121b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121da9190613acc565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612310565b8160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600601546040518463ffffffff1660e01b815260040161228893929190613a80565b6020604051808303816000875af11580156122a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cb9190613acc565b50338160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505560028260080160006101000a81548160ff0219169083600681111561239e5761239d61308c565b5b0217905550823373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350506123f1612d88565b50565b60006004600083815260200190815260200160002090506000600560008481526020019081526020016000209050600360068111156124365761243561308c565b5b8260080160009054906101000a900460ff16600681111561245a5761245961308c565b5b1461249a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249190614437565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061254757503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61255057600080fd5b600082600101805461256190613732565b80601f016020809104026020016040519081016040528092919081815260200182805461258d90613732565b80156125da5780601f106125af576101008083540402835291602001916125da565b820191906000526020600020905b8154815290600101906020018083116125bd57829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b81526004016126649493929190614457565b6020604051808303816000875af1158015612683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a79190613857565b5060048360080160006101000a81548160ff021916908360068111156126d0576126cf61308c565b5b021790555081600001548260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a450505050565b61278a612d39565b6000600460008381526020019081526020016000209050600060056000848152602001908152602001600020905060006127c384612b7f565b9050600460068111156127d9576127d861308c565b5b8360080160009054906101000a900460ff1660068111156127fd576127fc61308c565b5b1461283d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283490613f66565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806128ea57508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292090613fd2565b60405180910390fd5b671bc16d674ec800008114612973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296a906144ef565b60405180910390fd5b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600301546040518363ffffffff1660e01b81526004016129fa929190613bd1565b6020604051808303816000875af1158015612a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3d9190613acc565b508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600601546040518363ffffffff1660e01b8152600401612ac5929190613bd1565b6020604051808303816000875af1158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b089190613acc565b5060068360080160006101000a81548160ff02191690836006811115612b3157612b3061308c565b5b02179055508160060154826003015483600001547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a4505050612b7c612d88565b50565b60008060046000848152602001908152602001600020905060006005600085815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612c5b57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612c6457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254866001016040518563ffffffff1660e01b8152600401612cea9493929190614593565b61020060405180830381865afa158015612d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2c91906147e7565b60c0015192505050919050565b600260005403612d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7590614861565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112612dcb57612dca612da6565b5b8235905067ffffffffffffffff811115612de857612de7612dab565b5b602083019150836001820283011115612e0457612e03612db0565b5b9250929050565b60008060208385031215612e2257612e21612d9c565b5b600083013567ffffffffffffffff811115612e4057612e3f612da1565b5b612e4c85828601612db5565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e92578082015181840152602081019050612e77565b60008484015250505050565b6000601f19601f8301169050919050565b6000612eba82612e58565b612ec48185612e63565b9350612ed4818560208601612e74565b612edd81612e9e565b840191505092915050565b60006020820190508181036000830152612f028184612eaf565b905092915050565b6000819050919050565b612f1d81612f0a565b8114612f2857600080fd5b50565b600081359050612f3a81612f14565b92915050565b600060208284031215612f5657612f55612d9c565b5b6000612f6484828501612f2b565b91505092915050565b612f7681612f0a565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612fa382612f7c565b612fad8185612f87565b9350612fbd818560208601612e74565b612fc681612e9e565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061301661301161300c84612fd1565b612ff1565b612fd1565b9050919050565b600061302882612ffb565b9050919050565b600061303a8261301d565b9050919050565b61304a8161302f565b82525050565b600061305b82612fd1565b9050919050565b61306b81613050565b82525050565b60008115159050919050565b61308681613071565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600781106130cc576130cb61308c565b5b50565b60008190506130dd826130bb565b919050565b60006130ed826130cf565b9050919050565b6130fd816130e2565b82525050565b600061014082019050613119600083018d612f6d565b818103602083015261312b818c612f98565b905061313a604083018b612f6d565b613147606083018a613041565b6131546080830189613062565b61316160a083018861307d565b61316e60c0830187612f6d565b61317b60e0830186612f6d565b81810361010083015261318e8185612f98565b905061319e6101208301846130f4565b9b9a5050505050505050505050565b60006020820190506131c26000830184612f6d565b92915050565b6131d181613050565b81146131dc57600080fd5b50565b6000813590506131ee816131c8565b92915050565b60006131ff82613050565b9050919050565b61320f816131f4565b811461321a57600080fd5b50565b60008135905061322c81613206565b92915050565b600080600080600080600060e0888a03121561325157613250612d9c565b5b600061325f8a828b01612f2b565b97505060206132708a828b016131df565b96505060406132818a828b0161321d565b95505060606132928a828b01612f2b565b94505060806132a38a828b016131df565b93505060a06132b48a828b0161321d565b92505060c06132c58a828b01612f2b565b91505092959891949750929550565b60008083601f8401126132ea576132e9612da6565b5b8235905067ffffffffffffffff81111561330757613306612dab565b5b60208301915083600182028301111561332357613322612db0565b5b9250929050565b6000806020838503121561334157613340612d9c565b5b600083013567ffffffffffffffff81111561335f5761335e612da1565b5b61336b858286016132d4565b92509250509250929050565b600060208201905081810360008301526133918184612f98565b905092915050565b6133a281613071565b81146133ad57600080fd5b50565b6000813590506133bf81613399565b92915050565b600080600080600080600080600060e08a8c0312156133e7576133e6612d9c565b5b60008a013567ffffffffffffffff81111561340557613404612da1565b5b6134118c828d01612db5565b995099505060206134248c828d01612f2b565b97505060406134358c828d0161321d565b96505060606134468c828d01612f2b565b95505060806134578c828d01612f2b565b94505060a06134688c828d016133b0565b93505060c08a013567ffffffffffffffff81111561348957613488612da1565b5b6134958c828d01612db5565b92509250509295985092959850929598565b600060e0820190506134bc600083018a612f6d565b6134c96020830189613062565b6134d66040830188613041565b6134e36060830187612f6d565b6134f06080830186613062565b6134fd60a0830185613041565b61350a60c0830184612f6d565b98975050505050505050565b6000806040838503121561352d5761352c612d9c565b5b600061353b858286016131df565b925050602061354c85828601612f2b565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61359382612e9e565b810181811067ffffffffffffffff821117156135b2576135b161355b565b5b80604052505050565b60006135c5612d92565b90506135d1828261358a565b919050565b600067ffffffffffffffff8211156135f1576135f061355b565b5b6135fa82612e9e565b9050602081019050919050565b82818337600083830152505050565b6000613629613624846135d6565b6135bb565b90508281526020810184848401111561364557613644613556565b5b613650848285613607565b509392505050565b600082601f83011261366d5761366c612da6565b5b813561367d848260208601613616565b91505092915050565b60006020828403121561369c5761369b612d9c565b5b600082013567ffffffffffffffff8111156136ba576136b9612da1565b5b6136c684828501613658565b91505092915050565b6000819050919050565b6136e2816136cf565b82525050565b60006020820190506136fd60008301846136d9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061374a57607f821691505b60208210810361375d5761375c613703565b5b50919050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b6000613799601b83612e63565b91506137a482613763565b602082019050919050565b600060208201905081810360008301526137c88161378c565b9050919050565b6000819050919050565b6137e2816137cf565b82525050565b600060a0820190506137fd60008301886137d9565b61380a6020830187612f6d565b818103604083015261381c8186612f98565b905061382b6060830185613041565b6138386080830184612f6d565b9695505050505050565b60008151905061385181612f14565b92915050565b60006020828403121561386d5761386c612d9c565b5b600061387b84828501613842565b91505092915050565b600060808201905061389960008301876137d9565b6138a66020830186612f6d565b81810360408301526138b88185612f98565b90506138c76060830184612f6d565b95945050505050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b6000613906600b83612e63565b9150613911826138d0565b602082019050919050565b60006020820190508181036000830152613935816138f9565b9050919050565b7f6d757374206265207061727469636970616e7400000000000000000000000000600082015250565b6000613972601383612e63565b915061397d8261393c565b602082019050919050565b600060208201905081810360008301526139a181613965565b9050919050565b7f6d75737420686176652032207061727469657300000000000000000000000000600082015250565b60006139de601383612e63565b91506139e9826139a8565b602082019050919050565b60006020820190508181036000830152613a0d816139d1565b9050919050565b7f6e6f74206c6f6164696e67000000000000000000000000000000000000000000600082015250565b6000613a4a600b83612e63565b9150613a5582613a14565b602082019050919050565b60006020820190508181036000830152613a7981613a3d565b9050919050565b6000606082019050613a956000830186613062565b613aa26020830185613062565b613aaf6040830184612f6d565b949350505050565b600081519050613ac681613399565b92915050565b600060208284031215613ae257613ae1612d9c565b5b6000613af084828501613ab7565b91505092915050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b6000613b2f601283612e63565b9150613b3a82613af9565b602082019050919050565b60006020820190508181036000830152613b5e81613b22565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000613b9b600f83612e63565b9150613ba682613b65565b602082019050919050565b60006020820190508181036000830152613bca81613b8e565b9050919050565b6000604082019050613be66000830185613062565b613bf36020830184612f6d565b9392505050565b600081905092915050565b6000613c118385613bfa565b9350613c1e838584613607565b82840190509392505050565b6000613c37828486613c05565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613ca57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613c68565b613caf8683613c68565b95508019841693508086168417925050509392505050565b6000613ce2613cdd613cd884612f0a565b612ff1565b612f0a565b9050919050565b6000819050919050565b613cfc83613cc7565b613d10613d0882613ce9565b848454613c75565b825550505050565b600090565b613d25613d18565b613d30818484613cf3565b505050565b5b81811015613d5457613d49600082613d1d565b600181019050613d36565b5050565b601f821115613d9957613d6a81613c43565b613d7384613c58565b81016020851015613d82578190505b613d96613d8e85613c58565b830182613d35565b50505b505050565b600082821c905092915050565b6000613dbc60001984600802613d9e565b1980831691505092915050565b6000613dd58383613dab565b9150826002028217905092915050565b613dee82612f7c565b67ffffffffffffffff811115613e0757613e0661355b565b5b613e118254613732565b613e1c828285613d58565b600060209050601f831160018114613e4f5760008415613e3d578287015190505b613e478582613dc9565b865550613eaf565b601f198416613e5d86613c43565b60005b82811015613e8557848901518255600182019150602085019450602081019050613e60565b86831015613ea25784890151613e9e601f891682613dab565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ef182612f0a565b9150613efc83612f0a565b9250828201905080821115613f1457613f13613eb7565b5b92915050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b6000613f50601383612e63565b9150613f5b82613f1a565b602082019050919050565b60006020820190508181036000830152613f7f81613f43565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b6000613fbc601483612e63565b9150613fc782613f86565b602082019050919050565b60006020820190508181036000830152613feb81613faf565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b6000614028601283612e63565b915061403382613ff2565b602082019050919050565b600060208201905081810360008301526140578161401b565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b6000614094601883612e63565b915061409f8261405e565b602082019050919050565b600060208201905081810360008301526140c381614087565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b6000614100601b83612e63565b915061410b826140ca565b602082019050919050565b6000602082019050818103600083015261412f816140f3565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b600061417282612e58565b61417c818561415c565b935061418c818560208601612e74565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b60006141f460378361415c565b91506141ff82614198565b603782019050919050565b600061421582614136565b6003820191506142258284614167565b9150614230826141e7565b915081905092915050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b6000614271601783612e63565b915061427c8261423b565b602082019050919050565b600060208201905081810360008301526142a081614264565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b60006142dd601183612e63565b91506142e8826142a7565b602082019050919050565b6000602082019050818103600083015261430c816142d0565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b6000614349601183612e63565b915061435482614313565b602082019050919050565b600060208201905081810360008301526143788161433c565b9050919050565b7f6e6f74204f70656e000000000000000000000000000000000000000000000000600082015250565b60006143b5600883612e63565b91506143c08261437f565b602082019050919050565b600060208201905081810360008301526143e4816143a8565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b6000614421601083612e63565b915061442c826143eb565b602082019050919050565b6000602082019050818103600083015261445081614414565b9050919050565b600060808201905061446c6000830187613062565b61447960208301866137d9565b6144866040830185612f6d565b81810360608301526144988184612f98565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b60006144d9601183612e63565b91506144e4826144a3565b602082019050919050565b60006020820190508181036000830152614508816144cc565b9050919050565b6000815461451c81613732565b6145268186612f87565b9450600182166000811461454157600181146145575761458a565b60ff19831686528115156020028601935061458a565b61456085613c43565b60005b8381101561458257815481890152600182019150602081019050614563565b808801955050505b50505092915050565b60006080820190506145a86000830187613062565b6145b560208301866137d9565b6145c26040830185612f6d565b81810360608301526145d4818461450f565b905095945050505050565b600080fd5b6000815190506145f3816131c8565b92915050565b60008151905061460881613206565b92915050565b600060e08284031215614624576146236145df565b5b61462e60e06135bb565b9050600061463e84828501613ab7565b600083015250602061465284828501613ab7565b602083015250604061466684828501613ab7565b604083015250606061467a84828501613ab7565b606083015250608061468e84828501613ab7565b60808301525060a06146a284828501613842565b60a08301525060c06146b684828501613842565b60c08301525092915050565b6146cb816136cf565b81146146d657600080fd5b50565b6000815190506146e8816146c2565b92915050565b60006102008284031215614705576147046145df565b5b6147106101406135bb565b90506000614720848285016145e4565b6000830152506020614734848285016145e4565b6020830152506040614748848285016145f9565b604083015250606061475c84828501613ab7565b60608301525060806147708482850161460e565b608083015250610160614785848285016146d9565b60a08301525061018061479a848285016146d9565b60c0830152506101a06147af84828501613842565b60e0830152506101c06147c484828501613842565b610100830152506101e06147da84828501613842565b6101208301525092915050565b600061020082840312156147fe576147fd612d9c565b5b600061480c848285016146ee565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061484b601f83612e63565b915061485682614815565b602082019050919050565b6000602082019050818103600083015261487a8161483e565b905091905056fea2646970667358221220cfef225b628e87d0f71c7c246292371a74c70f2552f5a56df5f8c6c8d8c0399e64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 529,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "oo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(OptimisticOracleV2Interface)517"
      },
      {
        "astId": 532,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "requestTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 652,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 657,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "bets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Bet)567_storage)"
      },
      {
        "astId": 662,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(BetAmount)584_storage)"
      },
      {
        "astId": 667,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "userBets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)131": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(OptimisticOracleV2Interface)517": {
        "encoding": "inplace",
        "label": "contract OptimisticOracleV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)592": {
        "encoding": "inplace",
        "label": "enum OO_BetHandler.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bet)567_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)567_storage"
      },
      "t_mapping(t_uint256,t_struct(BetAmount)584_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.BetAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(BetAmount)584_storage"
      },
      "t_struct(Bet)567_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.Bet",
        "members": [
          {
            "astId": 546,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 548,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "question",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 550,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 553,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "bondCurrency",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 555,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 557,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "privateBet",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 559,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "liveness",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 561,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "reward",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 563,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "imgUrl",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes_storage"
          },
          {
            "astId": 566,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betStatus",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(BetStatus)592"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(BetAmount)584_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.BetAmount",
        "members": [
          {
            "astId": 569,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 571,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmation",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 574,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 576,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 578,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negation",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 581,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationToken",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 583,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}