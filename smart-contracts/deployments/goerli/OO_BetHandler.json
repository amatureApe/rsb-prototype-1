{
  "address": "0xe8C3510560cF1b7720d22Ae133924f281483CB9d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        }
      ],
      "name": "BetCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "affirmationRefund",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "negationRefund",
          "type": "uint256"
        }
      ],
      "name": "BetKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "BetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "winner",
          "type": "int256"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "privateBet",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liveness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "imgUrl",
          "type": "bytes"
        },
        {
          "internalType": "enum OO_BetHandler.BetStatus",
          "name": "betStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "betId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "question",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "bondCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "privateBet",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "liveness",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "imgUrl",
              "type": "bytes"
            },
            {
              "internalType": "enum OO_BetHandler.BetStatus",
              "name": "betStatus",
              "type": "uint8"
            }
          ],
          "internalType": "struct OO_BetHandler.BetDetails",
          "name": "betDetails",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "affirmationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "negationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "negationAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "cancelBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "claimWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        }
      ],
      "name": "createQuestion",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getHashId",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "getSettledData",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "hashIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "killBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_affirmation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_affirmationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_negation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_negationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_negationAmount",
          "type": "uint256"
        }
      ],
      "name": "loadBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "requestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_bondCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liveness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_privateBet",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_imgUrl",
          "type": "bytes"
        }
      ],
      "name": "setBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "settleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        }
      ],
      "name": "stringDecode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_string",
          "type": "string"
        }
      ],
      "name": "stringEncode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x680809809d18768e58a0fd5c2c5b647650db9ff3b4a3ffcc93f6b13cf43122e3",
  "receipt": {
    "to": null,
    "from": "0x4204FDD868FFe0e62F57e6A626F8C9530F7d5AD1",
    "contractAddress": "0xe8C3510560cF1b7720d22Ae133924f281483CB9d",
    "transactionIndex": 109,
    "gasUsed": "4679113",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xaacc72444b656ec3b9d969ab1780150def816158170c6c7542e0aa15d16e9b58",
    "transactionHash": "0x680809809d18768e58a0fd5c2c5b647650db9ff3b4a3ffcc93f6b13cf43122e3",
    "logs": [],
    "blockNumber": 8143961,
    "cumulativeGasUsed": "24476139",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 16,
  "solcInputHash": "019b136f1df3998b516844ac29672fcf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"BetCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"affirmationRefund\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"negationRefund\",\"type\":\"uint256\"}],\"name\":\"BetKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"BetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"winner\",\"type\":\"int256\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateBet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"imgUrl\",\"type\":\"bytes\"},{\"internalType\":\"enum OO_BetHandler.BetStatus\",\"name\":\"betStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateBet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"imgUrl\",\"type\":\"bytes\"},{\"internalType\":\"enum OO_BetHandler.BetStatus\",\"name\":\"betStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct OO_BetHandler.BetDetails\",\"name\":\"betDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"affirmationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"negationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"negationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"}],\"name\":\"createQuestion\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getHashId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"getSettledData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"hashIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"killBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_affirmation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_affirmationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_negation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_negationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_negationAmount\",\"type\":\"uint256\"}],\"name\":\"loadBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_bondCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_privateBet\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_imgUrl\",\"type\":\"bytes\"}],\"name\":\"setBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"settleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"}],\"name\":\"stringDecode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"stringEncode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OO_BetHandler.sol\":\"OO_BetHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleV2Interface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    struct RequestSettings {\\n        bool eventBased; // True if the request is set to be event-based.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\n     * @dev Calling this method has a few impacts on the request:\\n     *\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\n     *    with the request.\\n     *\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\n     *    prematurely proposes a response loses their bond.\\n     *\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\n     *    the requesting contract.\\n     *\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setEventBased(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets which callbacks should be enabled for the request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\n     */\\n    function setCallbacks(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        bool callbackOnPriceProposed,\\n        bool callbackOnPriceDisputed,\\n        bool callbackOnPriceSettled\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbfd9778b3e7c86e149cc140eda5e7210ef4a604cde576abaaa46c1289c5e334f\",\"license\":\"AGPL-3.0-only\"},\"contracts/OO_BetHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract OO_BetHandler is ReentrancyGuard {\\n    OptimisticOracleV2Interface oo =\\n        OptimisticOracleV2Interface(0xA5B9d8a0B0Fa04Ba71BDD68069661ED5C0848884);\\n\\n    uint256 requestTime = 0; // Store the request time so we can re-use it later.\\n    bytes32 constant IDENTIFIER = bytes32(\\\"YES_OR_NO_QUERY\\\"); // Use the yes no idetifier to ask arbitary questions, such as the weather on a particular day.\\n    address constant ZERO_ADDRESS = address(0);\\n    // 0x0000000000000000000000000000000000000000\\n\\n    struct BetDetails {\\n        uint256 betId;\\n        bytes question;\\n        uint256 expiry;\\n        IERC20 bondCurrency;\\n        address creator;\\n        bool privateBet;\\n        uint256 liveness;\\n        uint256 reward;\\n        bytes imgUrl;\\n        BetStatus betStatus;\\n    }\\n\\n    struct Bet {\\n        uint256 betId;\\n        BetDetails betDetails;\\n        address affirmation; // Address of the side of the bet that affirms the question.\\n        IERC20 affirmationToken;\\n        uint256 affirmationAmount; // Amount deposited into the bet by the affrimation.\\n        address negation; // Address of the side of the bet that negates the question.\\n        IERC20 negationToken;\\n        uint256 negationAmount; // Amount deposited into the bet by the negation.\\n    }\\n\\n    enum BetStatus {\\n        LOADING,\\n        OPEN,\\n        ACTIVE,\\n        SETTLING,\\n        SETTLED,\\n        CLAIMED,\\n        DEAD\\n    }\\n\\n    // ******** EVENTS ************\\n\\n    event BetSet(\\n        address indexed creator,\\n        uint256 indexed betId,\\n        bytes indexed ancillaryData\\n    );\\n\\n    event BetTaken(address indexed taker, uint256 indexed betId);\\n\\n    event DataRequested(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event BetSettled(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event WinningsClaimed(\\n        uint256 indexed betId,\\n        uint256 indexed totalWinnings,\\n        int256 indexed winner\\n    );\\n\\n    event BetCanceled(\\n        uint256 indexed betId,\\n        address indexed bondCurrency,\\n        uint256 indexed refundAmount\\n    );\\n\\n    event BetKilled(\\n        uint256 indexed betId,\\n        uint256 indexed affirmationRefund,\\n        uint256 indexed negationRefund\\n    );\\n\\n    uint256 public betId = 0; // latest global betId for all managed bets.\\n    mapping(uint256 => BetDetails) public betDetails; // All bets mapped by their betId\\n    mapping(bytes => uint256) public hashIds; // A hash of bet question, msg.sender, and timestamp to betId\\n    mapping(uint256 => Bet) public bets; // All bet amounts mapped by their betId.\\n    mapping(address => uint256[]) public userBets; // All bets the user is and has participated in.\\n\\n    // ********* MUTATIVE FUNCTIONS *************\\n\\n    function setBet(\\n        bytes calldata _question,\\n        uint256 _expiry,\\n        IERC20 _bondCurrency,\\n        uint256 _liveness,\\n        uint256 _reward,\\n        bool _privateBet,\\n        bytes calldata _imgUrl\\n    ) public nonReentrant {\\n        BetDetails memory bet = BetDetails(\\n            betId,\\n            _question,\\n            _expiry,\\n            _bondCurrency,\\n            msg.sender,\\n            _privateBet,\\n            _liveness,\\n            _reward,\\n            _imgUrl,\\n            BetStatus.LOADING\\n        );\\n\\n        bytes memory hashId = abi.encode(\\n            _question,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        emit BetSet(msg.sender, betId, _question);\\n\\n        betDetails[betId] = bet;\\n        hashIds[hashId] = betId;\\n        userBets[msg.sender].push(betId);\\n        betId += 1;\\n    }\\n\\n    function loadBet(\\n        uint256 _betId,\\n        address _affirmation,\\n        IERC20 _affirmationToken,\\n        uint256 _affirmationAmount,\\n        address _negation,\\n        IERC20 _negationToken,\\n        uint256 _negationAmount\\n    ) public nonReentrant {\\n        BetDetails storage betDetails = betDetails[_betId];\\n        require(msg.sender == betDetails.creator, \\\"not creator\\\");\\n        require(\\n            betDetails.creator == _affirmation ||\\n                betDetails.creator == _negation,\\n            \\\"must be participant\\\"\\n        );\\n        require(_affirmation != _negation, \\\"must have separate parties\\\");\\n        require(betDetails.betStatus == BetStatus.LOADING, \\\"not loading\\\");\\n\\n        Bet memory bet = Bet(\\n            _betId,\\n            betDetails,\\n            _affirmation,\\n            _affirmationToken,\\n            _affirmationAmount,\\n            _negation,\\n            _negationToken,\\n            _negationAmount\\n        );\\n\\n        // Make sure to approve this contract to spend your ERC20 externally first\\n        if (msg.sender == _affirmation) {\\n            _affirmationToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _affirmationAmount\\n            );\\n        } else if (msg.sender == _negation) {\\n            _negationToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _negationAmount\\n            );\\n        }\\n\\n        bet.betDetails.betStatus = BetStatus.OPEN;\\n        bets[_betId] = bet;\\n    }\\n\\n    function takeBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        require(\\n            msg.sender != bet.betDetails.creator,\\n            \\\"Can't take your own bet\\\"\\n        );\\n        if (bet.betDetails.privateBet == false) {\\n            require(\\n                bet.affirmation == ZERO_ADDRESS || bet.negation == ZERO_ADDRESS,\\n                \\\"Bet already taken\\\"\\n            );\\n        } else {\\n            require(\\n                msg.sender == bet.affirmation || msg.sender == bet.negation,\\n                \\\"Not bet recipient\\\"\\n            );\\n        }\\n        require(bet.betDetails.betStatus == BetStatus.OPEN, \\\"not Open\\\");\\n\\n        if (bet.affirmation == ZERO_ADDRESS) {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.betDetails.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                bet.affirmationAmount\\n            );\\n            bet.affirmation = msg.sender;\\n        } else {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.betDetails.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                bet.negationAmount\\n            );\\n            bet.negation = msg.sender;\\n        }\\n\\n        userBets[msg.sender].push(_betId);\\n        bet.betDetails.betStatus = BetStatus.ACTIVE;\\n\\n        emit BetTaken(msg.sender, _betId);\\n    }\\n\\n    function requestData(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        require(\\n            bet.betDetails.betStatus == BetStatus.ACTIVE,\\n            \\\"Bet not ready to be settled\\\"\\n        );\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.betDetails.question; // Question to ask the UMA Oracle.\\n\\n        requestTime = block.timestamp; // Set the request time to the current block time.\\n        IERC20 bondCurrency = IERC20(bet.betDetails.bondCurrency); // Use preferred token as the bond currency.\\n        uint256 reward = bet.betDetails.reward; // Set the reward amount for UMA Oracle.\\n\\n        // Set liveness for request disputes measured in seconds. Recommended time is at least 7200 (2 hours).\\n        // Users should increase liveness time depending on various factors such as amount of funds being handled\\n        // and risk of malicious acts.\\n        uint256 liveness = bet.betDetails.liveness;\\n\\n        // Now, make the price request to the Optimistic oracle with preferred inputs.\\n        oo.requestPrice(\\n            IDENTIFIER,\\n            requestTime,\\n            ancillaryData,\\n            bondCurrency,\\n            reward\\n        );\\n        oo.setCustomLiveness(IDENTIFIER, requestTime, ancillaryData, liveness);\\n\\n        bet.betDetails.betStatus = BetStatus.SETTLING;\\n        emit DataRequested(bet.affirmation, bet.negation, bet.betId);\\n    }\\n\\n    // Settle the request once it's gone through the liveness period of 30 seconds. This acts the finalize the voted on price.\\n    // In a real world use of the Optimistic Oracle this should be longer to give time to disputers to catch bat price proposals.\\n    function settleRequest(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        require(\\n            bet.betDetails.betStatus == BetStatus.SETTLING,\\n            \\\"Bet not settling\\\"\\n        );\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.betDetails.question;\\n\\n        oo.settle(address(this), IDENTIFIER, requestTime, ancillaryData);\\n        bet.betDetails.betStatus = BetStatus.SETTLED;\\n\\n        emit BetSettled(bet.affirmation, bet.negation, bet.betId);\\n    }\\n\\n    function claimWinnings(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        uint256 totalWinnings = bet.affirmationAmount + bet.negationAmount;\\n        int256 settlementData = getSettledData(_betId);\\n        require(\\n            bet.betDetails.betStatus == BetStatus.SETTLED,\\n            \\\"Bet not yet settled\\\"\\n        );\\n        require(\\n            msg.sender == bet.affirmation || msg.sender == bet.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(\\n            settlementData == 1e18 || settlementData == 0,\\n            \\\"Invalid settlement\\\"\\n        );\\n        if (settlementData == 1e18) {\\n            require(msg.sender == bet.affirmation, \\\"Negation did not win bet\\\");\\n            bet.betDetails.bondCurrency.transfer(\\n                bet.affirmation,\\n                totalWinnings\\n            );\\n        } else {\\n            require(msg.sender == bet.negation, \\\"Affirmation did not win bet\\\");\\n            bet.betDetails.bondCurrency.transfer(bet.negation, totalWinnings);\\n        }\\n\\n        bet.betDetails.betStatus = BetStatus.CLAIMED;\\n\\n        emit WinningsClaimed(bet.betId, totalWinnings, settlementData);\\n    }\\n\\n    function cancelBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        uint256 refundAmount;\\n        require(\\n            bet.betDetails.betStatus == BetStatus.LOADING ||\\n                bet.betDetails.betStatus == BetStatus.OPEN,\\n            \\\"Bet already active\\\"\\n        );\\n        require(msg.sender == bet.betDetails.creator, \\\"Not bet creator\\\");\\n\\n        if (bet.betDetails.creator == bet.affirmation) {\\n            refundAmount = bet.affirmationAmount;\\n        } else {\\n            refundAmount = bet.negationAmount;\\n        }\\n\\n        bet.betDetails.bondCurrency.transfer(\\n            bet.betDetails.creator,\\n            refundAmount\\n        );\\n\\n        emit BetCanceled(\\n            bet.betId,\\n            address(bet.betDetails.bondCurrency),\\n            refundAmount\\n        );\\n    }\\n\\n    function killBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        int256 settlementData = getSettledData(_betId);\\n        require(\\n            bet.betDetails.betStatus == BetStatus.SETTLED,\\n            \\\"Bet not yet settled\\\"\\n        );\\n        require(\\n            msg.sender == bet.affirmation || msg.sender == bet.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(settlementData == 2 * 1e18, \\\"Bet is settleable\\\");\\n        bet.betDetails.bondCurrency.transfer(\\n            bet.affirmation,\\n            bet.affirmationAmount\\n        );\\n        bet.betDetails.bondCurrency.transfer(bet.negation, bet.negationAmount);\\n\\n        bet.betDetails.betStatus = BetStatus.DEAD;\\n\\n        emit BetKilled(bet.betId, bet.affirmationAmount, bet.negationAmount);\\n    }\\n\\n    //******* VIEW FUNCTIONS ***********\\n    function createQuestion(string memory _question)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory question = bytes(\\n            string.concat(\\n                \\\"Q: \\\",\\n                _question,\\n                \\\"? --- A:1 for yes. 0 for no. 2 for ambiguous/unknowable\\\"\\n            )\\n        );\\n        return question;\\n    }\\n\\n    // Fetch the resolved price from the Optimistic Oracle that was settled.\\n    function getSettledData(uint256 _betId) public view returns (int256) {\\n        Bet storage bet = bets[_betId];\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        return\\n            oo\\n                .getRequest(\\n                    address(this),\\n                    IDENTIFIER,\\n                    requestTime,\\n                    bet.betDetails.question\\n                )\\n                .resolvedPrice;\\n    }\\n\\n    function getHashId(bytes calldata _question, uint256 timestamp)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        return abi.encode(_question, msg.sender, timestamp);\\n    }\\n\\n    function stringEncode(string calldata _string)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return bytes(_string);\\n    }\\n\\n    function stringDecode(bytes calldata _bytes)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return string(_bytes);\\n    }\\n}\\n\",\"keccak256\":\"0x373439fe14236878cfba758dfbd5b43cdf1ad01f82378d7d26422f2f76a2ee6d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405273a5b9d8a0b0fa04ba71bdd68069661ed5c0848884600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600255600060035534801561006f57600080fd5b506001600081905550615304806100876000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635fb5a70d116100a2578063b3580c1e11610071578063b3580c1e14610325578063c511a07414610355578063d247f92b14610371578063dc60054e1461038d578063e5da66af146103a957610116565b80635fb5a70d14610279578063677bd9ff146102a95780638068aa68146102c5578063945e5a42146102f557610116565b80632adb9e3c116100e95780632adb9e3c146101d95780633268fc8a146101f5578063357401f51461021157806345b7c1c11461022d57806346049d541461025d57610116565b806306c66b851461011b5780630efbf5291461014b57806322af00fa1461018457806327bce91b146101bb575b600080fd5b610135600480360381019061013091906134cd565b6103d9565b60405161014291906135aa565b60405180910390f35b61016560048036038101906101609190613602565b610428565b60405161017b9a999897969594939291906137c5565b60405180910390f35b61019e60048036038101906101999190613602565b6105e6565b6040516101b29897969594939291906139e5565b60405180910390f35b6101c3610907565b6040516101d09190613a6a565b60405180910390f35b6101f360048036038101906101ee9190613602565b61090d565b005b61020f600480360381019061020a9190613aef565b610d91565b005b61022b60048036038101906102269190613602565b61174c565b005b61024760048036038101906102429190613be7565b611a9b565b6040516102549190613c34565b60405180910390f35b61027760048036038101906102729190613c82565b611aea565b005b610293600480360381019061028e9190613e94565b611e98565b6040516102a09190613a6a565b60405180910390f35b6102c360048036038101906102be9190613602565b611ec6565b005b6102df60048036038101906102da9190613edd565b612404565b6040516102ec9190613a6a565b60405180910390f35b61030f600480360381019061030a9190613f1d565b612435565b60405161031c9190613c34565b60405180910390f35b61033f600480360381019061033a919061401e565b612466565b60405161034c9190613c34565b60405180910390f35b61036f600480360381019061036a9190613602565b612495565b005b61038b60048036038101906103869190613602565b612ae6565b005b6103a760048036038101906103a29190613602565b612e65565b005b6103c360048036038101906103be9190613602565b613256565b6040516103d09190614080565b60405180910390f35b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b6004602052806000526040600020600091509050806000015490806001018054610451906140ca565b80601f016020809104026020016040519081016040528092919081815260200182805461047d906140ca565b80156104ca5780601f1061049f576101008083540402835291602001916104ca565b820191906000526020600020905b8154815290600101906020018083116104ad57829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff1690806005015490806006015490806007018054610550906140ca565b80601f016020809104026020016040519081016040528092919081815260200182805461057c906140ca565b80156105c95780601f1061059e576101008083540402835291602001916105c9565b820191906000526020600020905b8154815290600101906020018083116105ac57829003601f168201915b5050505050908060080160009054906101000a900460ff1690508a565b600660205280600052604060002060009150905080600001549080600101604051806101400160405290816000820154815260200160018201805461062a906140ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610656906140ca565b80156106a35780601f10610678576101008083540402835291602001916106a3565b820191906000526020600020905b81548152906001019060200180831161068657829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682015481526020016007820180546107a1906140ca565b80601f01602080910402602001604051908101604052809291908181526020018280546107cd906140ca565b801561081a5780601f106107ef5761010080835404028352916020019161081a565b820191906000526020600020905b8154815290600101906020018083116107fd57829003601f168201915b505050505081526020016008820160009054906101000a900460ff1660068111156108485761084761374e565b5b600681111561085a5761085961374e565b5b815250509080600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600c01549080600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600e0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600f0154905088565b60035481565b6000600660008381526020019081526020016000209050600260068111156109385761093761374e565b5b8160010160080160009054906101000a900460ff16600681111561095f5761095e61374e565b5b1461099f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099690614147565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1681600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610a4c57503373ffffffffffffffffffffffffffffffffffffffff1681600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610a5557600080fd5b6000816001016001018054610a69906140ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610a95906140ca565b8015610ae25780601f10610ab757610100808354040283529160200191610ae2565b820191906000526020600020905b815481529060010190602001808311610ac557829003601f168201915b505050505090504260028190555060008260010160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083600101600601549050600084600101600501549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b8152600401610bb9959493929190614180565b6020604051808303816000875af1158015610bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfc91906141ef565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b8152600401610c80949392919061421c565b600060405180830381600087803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b5050505060038560010160080160006101000a81548160ff02191690836006811115610cdd57610cdc61374e565b5b0217905550846000015485600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1686600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a4505050505050565b610d996133fb565b60006004600089815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e39906142b4565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610eef57508373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610f2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2590614320565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f939061438c565b60405180910390fd5b60006006811115610fb057610faf61374e565b5b8160080160009054906101000a900460ff166006811115610fd457610fd361374e565b5b14611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b906143f8565b60405180910390fd5b60006040518061010001604052808a815260200183604051806101400160405290816000820154815260200160018201805461104f906140ca565b80601f016020809104026020016040519081016040528092919081815260200182805461107b906140ca565b80156110c85780601f1061109d576101008083540402835291602001916110c8565b820191906000526020600020905b8154815290600101906020018083116110ab57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682015481526020016007820180546111c6906140ca565b80601f01602080910402602001604051908101604052809291908181526020018280546111f2906140ca565b801561123f5780601f106112145761010080835404028352916020019161123f565b820191906000526020600020905b81548152906001019060200180831161122257829003601f168201915b505050505081526020016008820160009054906101000a900460ff16600681111561126d5761126c61374e565b5b600681111561127f5761127e61374e565b5b8152505081526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481525090508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036113bd578673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161137493929190614418565b6020604051808303816000875af1158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b79190614464565b50611473565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611472578373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161142d93929190614418565b6020604051808303816000875af115801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190614464565b505b5b60018160200151610120019060068111156114915761149061374e565b5b908160068111156114a5576114a461374e565b5b8152505080600660008b8152602001908152602001600020600082015181600001556020820151816001016000820151816000015560208201518160010190816114ef9190614633565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015560e082015181600601556101008201518160070190816115d29190614633565b506101208201518160080160006101000a81548160ff021916908360068111156115ff576115fe61374e565b5b02179055505050604082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600c015560a082015181600d0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c082015181600e0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600f0155905050505061174361344a565b50505050505050565b6117546133fb565b600060066000838152602001908152602001600020905060008060068111156117805761177f61374e565b5b8260010160080160009054906101000a900460ff1660068111156117a7576117a661374e565b5b14806117eb5750600160068111156117c2576117c161374e565b5b8260010160080160009054906101000a900460ff1660068111156117e9576117e861374e565b5b145b61182a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182190614751565b60405180910390fd5b8160010160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b6906147bd565b60405180910390fd5b81600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036119495781600c01549050611951565b81600f015490505b8160010160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016119da9291906147dd565b6020604051808303816000875af11580156119f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1d9190614464565b50808260010160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600001547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a45050611a9861344a565b50565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b611af26133fb565b600060405180610140016040528060035481526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001851515815260200187815260200186815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160006006811115611c0257611c0161374e565b5b815250905060008a8a3342604051602001611c209493929190614833565b60405160208183030381529060405290508a8a604051611c419291906148a3565b60405180910390206003543373ffffffffffffffffffffffffffffffffffffffff167fe5adba74b6b724460a7880fb90bec588832442132225c4b4b117612a47e6e99360405160405180910390a481600460006003548152602001908152602001600020600082015181600001556020820151816001019081611cc49190614633565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015560e08201518160060155610100820151816007019081611da79190614633565b506101208201518160080160006101000a81548160ff02191690836006811115611dd457611dd361374e565b5b0217905550905050600354600582604051611def91906148ed565b908152602001604051809103902081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003549080600181540180825580915050600190039060005260206000200160009091909190915055600160036000828254611e7c9190614933565b925050819055505050611e8d61344a565b505050505050505050565b6005818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b611ece6133fb565b6000600660008381526020019081526020016000209050600081600f015482600c0154611efb9190614933565b90506000611f0884613256565b905060046006811115611f1e57611f1d61374e565b5b8360010160080160009054906101000a900460ff166006811115611f4557611f4461374e565b5b14611f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7c906149b3565b60405180910390fd5b82600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612032575082600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206890614a1f565b60405180910390fd5b670de0b6b3a76400008114806120875750600081145b6120c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bd90614a8b565b60405180910390fd5b670de0b6b3a764000081036122365782600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215e90614af7565b60405180910390fd5b8260010160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016121ed9291906147dd565b6020604051808303816000875af115801561220c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122309190614464565b50612393565b82600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bf90614b63565b60405180910390fd5b8260010160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161234e9291906147dd565b6020604051808303816000875af115801561236d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123919190614464565b505b60058360010160080160006101000a81548160ff021916908360068111156123be576123bd61374e565b5b0217905550808284600001547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a450505061240161344a565b50565b6007602052816000526040600020818154811061242057600080fd5b90600052602060002001600091509150505481565b60608383338460405160200161244e9493929190614833565b60405160208183030381529060405290509392505050565b606060008260405160200161247b9190614c57565b604051602081830303815290604052905080915050919050565b61249d6133fb565b60006006600083815260200190815260200160002090508060010160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603612549576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254090614cd4565b60405180910390fd5b600015158160010160040160149054906101000a900460ff1615150361265c57600073ffffffffffffffffffffffffffffffffffffffff1681600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806126185750600073ffffffffffffffffffffffffffffffffffffffff1681600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264e90614d40565b60405180910390fd5b612749565b80600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612709575080600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273f90614dac565b60405180910390fd5b5b6001600681111561275d5761275c61374e565b5b8160010160080160009054906101000a900460ff1660068111156127845761278361374e565b5b146127c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127bb90614e18565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1681600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612910578060010160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600c01546040518463ffffffff1660e01b815260040161288493929190614418565b6020604051808303816000875af11580156128a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c79190614464565b503381600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612a00565b8060010160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600f01546040518463ffffffff1660e01b815260040161297893929190614418565b6020604051808303816000875af1158015612997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bb9190614464565b503381600d0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091505560028160010160080160006101000a81548160ff02191690836006811115612a9157612a9061374e565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350612ae361344a565b50565b600060066000838152602001908152602001600020905060036006811115612b1157612b1061374e565b5b8160010160080160009054906101000a900460ff166006811115612b3857612b3761374e565b5b14612b78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6f90614e84565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1681600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612c2557503373ffffffffffffffffffffffffffffffffffffffff1681600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612c2e57600080fd5b6000816001016001018054612c42906140ca565b80601f0160208091040260200160405190810160405280929190818152602001828054612c6e906140ca565b8015612cbb5780601f10612c9057610100808354040283529160200191612cbb565b820191906000526020600020905b815481529060010190602001808311612c9e57829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b8152600401612d459493929190614ea4565b6020604051808303816000875af1158015612d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8891906141ef565b5060048260010160080160006101000a81548160ff02191690836006811115612db457612db361374e565b5b0217905550816000015482600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a4505050565b612e6d6133fb565b60006006600083815260200190815260200160002090506000612e8f83613256565b905060046006811115612ea557612ea461374e565b5b8260010160080160009054906101000a900460ff166006811115612ecc57612ecb61374e565b5b14612f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f03906149b3565b60405180910390fd5b81600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612fb9575081600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fef90614a1f565b60405180910390fd5b671bc16d674ec800008114613042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303990614f3c565b60405180910390fd5b8160010160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600c01546040518363ffffffff1660e01b81526004016130cc9291906147dd565b6020604051808303816000875af11580156130eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310f9190614464565b508160010160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600f01546040518363ffffffff1660e01b815260040161319a9291906147dd565b6020604051808303816000875af11580156131b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131dd9190614464565b5060068260010160080160006101000a81548160ff021916908360068111156132095761320861374e565b5b021790555081600f015482600c015483600001547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a4505061325361344a565b50565b6000806006600084815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff1681600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061331b57503373ffffffffffffffffffffffffffffffffffffffff1681600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61332457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856001016001016040518563ffffffff1660e01b81526004016133ad9493929190614fe0565b61020060405180830381865afa1580156133cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ef9190615234565b60c00151915050919050565b600260005403613440576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613437906152ae565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261348d5761348c613468565b5b8235905067ffffffffffffffff8111156134aa576134a961346d565b5b6020830191508360018202830111156134c6576134c5613472565b5b9250929050565b600080602083850312156134e4576134e361345e565b5b600083013567ffffffffffffffff81111561350257613501613463565b5b61350e85828601613477565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613554578082015181840152602081019050613539565b60008484015250505050565b6000601f19601f8301169050919050565b600061357c8261351a565b6135868185613525565b9350613596818560208601613536565b61359f81613560565b840191505092915050565b600060208201905081810360008301526135c48184613571565b905092915050565b6000819050919050565b6135df816135cc565b81146135ea57600080fd5b50565b6000813590506135fc816135d6565b92915050565b6000602082840312156136185761361761345e565b5b6000613626848285016135ed565b91505092915050565b613638816135cc565b82525050565b600081519050919050565b600082825260208201905092915050565b60006136658261363e565b61366f8185613649565b935061367f818560208601613536565b61368881613560565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006136d86136d36136ce84613693565b6136b3565b613693565b9050919050565b60006136ea826136bd565b9050919050565b60006136fc826136df565b9050919050565b61370c816136f1565b82525050565b600061371d82613693565b9050919050565b61372d81613712565b82525050565b60008115159050919050565b61374881613733565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6007811061378e5761378d61374e565b5b50565b600081905061379f8261377d565b919050565b60006137af82613791565b9050919050565b6137bf816137a4565b82525050565b6000610140820190506137db600083018d61362f565b81810360208301526137ed818c61365a565b90506137fc604083018b61362f565b613809606083018a613703565b6138166080830189613724565b61382360a083018861373f565b61383060c083018761362f565b61383d60e083018661362f565b818103610100830152613850818561365a565b90506138606101208301846137b6565b9b9a5050505050505050505050565b613878816135cc565b82525050565b600082825260208201905092915050565b600061389a8261363e565b6138a4818561387e565b93506138b4818560208601613536565b6138bd81613560565b840191505092915050565b6138d1816136f1565b82525050565b6138e081613712565b82525050565b6138ef81613733565b82525050565b6138fe816137a4565b82525050565b60006101408301600083015161391d600086018261386f565b5060208301518482036020860152613935828261388f565b915050604083015161394a604086018261386f565b50606083015161395d60608601826138c8565b50608083015161397060808601826138d7565b5060a083015161398360a08601826138e6565b5060c083015161399660c086018261386f565b5060e08301516139a960e086018261386f565b506101008301518482036101008601526139c3828261388f565b9150506101208301516139da6101208601826138f5565b508091505092915050565b6000610100820190506139fb600083018b61362f565b8181036020830152613a0d818a613904565b9050613a1c6040830189613724565b613a296060830188613703565b613a36608083018761362f565b613a4360a0830186613724565b613a5060c0830185613703565b613a5d60e083018461362f565b9998505050505050505050565b6000602082019050613a7f600083018461362f565b92915050565b613a8e81613712565b8114613a9957600080fd5b50565b600081359050613aab81613a85565b92915050565b6000613abc82613712565b9050919050565b613acc81613ab1565b8114613ad757600080fd5b50565b600081359050613ae981613ac3565b92915050565b600080600080600080600060e0888a031215613b0e57613b0d61345e565b5b6000613b1c8a828b016135ed565b9750506020613b2d8a828b01613a9c565b9650506040613b3e8a828b01613ada565b9550506060613b4f8a828b016135ed565b9450506080613b608a828b01613a9c565b93505060a0613b718a828b01613ada565b92505060c0613b828a828b016135ed565b91505092959891949750929550565b60008083601f840112613ba757613ba6613468565b5b8235905067ffffffffffffffff811115613bc457613bc361346d565b5b602083019150836001820283011115613be057613bdf613472565b5b9250929050565b60008060208385031215613bfe57613bfd61345e565b5b600083013567ffffffffffffffff811115613c1c57613c1b613463565b5b613c2885828601613b91565b92509250509250929050565b60006020820190508181036000830152613c4e818461365a565b905092915050565b613c5f81613733565b8114613c6a57600080fd5b50565b600081359050613c7c81613c56565b92915050565b600080600080600080600080600060e08a8c031215613ca457613ca361345e565b5b60008a013567ffffffffffffffff811115613cc257613cc1613463565b5b613cce8c828d01613477565b99509950506020613ce18c828d016135ed565b9750506040613cf28c828d01613ada565b9650506060613d038c828d016135ed565b9550506080613d148c828d016135ed565b94505060a0613d258c828d01613c6d565b93505060c08a013567ffffffffffffffff811115613d4657613d45613463565b5b613d528c828d01613477565b92509250509295985092959850929598565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613da182613560565b810181811067ffffffffffffffff82111715613dc057613dbf613d69565b5b80604052505050565b6000613dd3613454565b9050613ddf8282613d98565b919050565b600067ffffffffffffffff821115613dff57613dfe613d69565b5b613e0882613560565b9050602081019050919050565b82818337600083830152505050565b6000613e37613e3284613de4565b613dc9565b905082815260208101848484011115613e5357613e52613d64565b5b613e5e848285613e15565b509392505050565b600082601f830112613e7b57613e7a613468565b5b8135613e8b848260208601613e24565b91505092915050565b600060208284031215613eaa57613ea961345e565b5b600082013567ffffffffffffffff811115613ec857613ec7613463565b5b613ed484828501613e66565b91505092915050565b60008060408385031215613ef457613ef361345e565b5b6000613f0285828601613a9c565b9250506020613f13858286016135ed565b9150509250929050565b600080600060408486031215613f3657613f3561345e565b5b600084013567ffffffffffffffff811115613f5457613f53613463565b5b613f6086828701613477565b93509350506020613f73868287016135ed565b9150509250925092565b600067ffffffffffffffff821115613f9857613f97613d69565b5b613fa182613560565b9050602081019050919050565b6000613fc1613fbc84613f7d565b613dc9565b905082815260208101848484011115613fdd57613fdc613d64565b5b613fe8848285613e15565b509392505050565b600082601f83011261400557614004613468565b5b8135614015848260208601613fae565b91505092915050565b6000602082840312156140345761403361345e565b5b600082013567ffffffffffffffff81111561405257614051613463565b5b61405e84828501613ff0565b91505092915050565b6000819050919050565b61407a81614067565b82525050565b60006020820190506140956000830184614071565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806140e257607f821691505b6020821081036140f5576140f461409b565b5b50919050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b6000614131601b83613525565b915061413c826140fb565b602082019050919050565b6000602082019050818103600083015261416081614124565b9050919050565b6000819050919050565b61417a81614167565b82525050565b600060a0820190506141956000830188614171565b6141a2602083018761362f565b81810360408301526141b4818661365a565b90506141c36060830185613703565b6141d0608083018461362f565b9695505050505050565b6000815190506141e9816135d6565b92915050565b6000602082840312156142055761420461345e565b5b6000614213848285016141da565b91505092915050565b60006080820190506142316000830187614171565b61423e602083018661362f565b8181036040830152614250818561365a565b905061425f606083018461362f565b95945050505050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b600061429e600b83613525565b91506142a982614268565b602082019050919050565b600060208201905081810360008301526142cd81614291565b9050919050565b7f6d757374206265207061727469636970616e7400000000000000000000000000600082015250565b600061430a601383613525565b9150614315826142d4565b602082019050919050565b60006020820190508181036000830152614339816142fd565b9050919050565b7f6d75737420686176652073657061726174652070617274696573000000000000600082015250565b6000614376601a83613525565b915061438182614340565b602082019050919050565b600060208201905081810360008301526143a581614369565b9050919050565b7f6e6f74206c6f6164696e67000000000000000000000000000000000000000000600082015250565b60006143e2600b83613525565b91506143ed826143ac565b602082019050919050565b60006020820190508181036000830152614411816143d5565b9050919050565b600060608201905061442d6000830186613724565b61443a6020830185613724565b614447604083018461362f565b949350505050565b60008151905061445e81613c56565b92915050565b60006020828403121561447a5761447961345e565b5b60006144888482850161444f565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026144f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826144b6565b6144fd86836144b6565b95508019841693508086168417925050509392505050565b600061453061452b614526846135cc565b6136b3565b6135cc565b9050919050565b6000819050919050565b61454a83614515565b61455e61455682614537565b8484546144c3565b825550505050565b600090565b614573614566565b61457e818484614541565b505050565b5b818110156145a25761459760008261456b565b600181019050614584565b5050565b601f8211156145e7576145b881614491565b6145c1846144a6565b810160208510156145d0578190505b6145e46145dc856144a6565b830182614583565b50505b505050565b600082821c905092915050565b600061460a600019846008026145ec565b1980831691505092915050565b600061462383836145f9565b9150826002028217905092915050565b61463c8261363e565b67ffffffffffffffff81111561465557614654613d69565b5b61465f82546140ca565b61466a8282856145a6565b600060209050601f83116001811461469d576000841561468b578287015190505b6146958582614617565b8655506146fd565b601f1984166146ab86614491565b60005b828110156146d3578489015182556001820191506020850194506020810190506146ae565b868310156146f057848901516146ec601f8916826145f9565b8355505b6001600288020188555050505b505050505050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b600061473b601283613525565b915061474682614705565b602082019050919050565b6000602082019050818103600083015261476a8161472e565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b60006147a7600f83613525565b91506147b282614771565b602082019050919050565b600060208201905081810360008301526147d68161479a565b9050919050565b60006040820190506147f26000830185613724565b6147ff602083018461362f565b9392505050565b60006148128385613649565b935061481f838584613e15565b61482883613560565b840190509392505050565b6000606082019050818103600083015261484e818688614806565b905061485d6020830185613724565b61486a604083018461362f565b95945050505050565b600081905092915050565b600061488a8385614873565b9350614897838584613e15565b82840190509392505050565b60006148b082848661487e565b91508190509392505050565b60006148c78261363e565b6148d18185614873565b93506148e1818560208601613536565b80840191505092915050565b60006148f982846148bc565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061493e826135cc565b9150614949836135cc565b925082820190508082111561496157614960614904565b5b92915050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b600061499d601383613525565b91506149a882614967565b602082019050919050565b600060208201905081810360008301526149cc81614990565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b6000614a09601483613525565b9150614a14826149d3565b602082019050919050565b60006020820190508181036000830152614a38816149fc565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b6000614a75601283613525565b9150614a8082614a3f565b602082019050919050565b60006020820190508181036000830152614aa481614a68565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b6000614ae1601883613525565b9150614aec82614aab565b602082019050919050565b60006020820190508181036000830152614b1081614ad4565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b6000614b4d601b83613525565b9150614b5882614b17565b602082019050919050565b60006020820190508181036000830152614b7c81614b40565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b6000614bbf8261351a565b614bc98185614ba9565b9350614bd9818560208601613536565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b6000614c41603783614ba9565b9150614c4c82614be5565b603782019050919050565b6000614c6282614b83565b600382019150614c728284614bb4565b9150614c7d82614c34565b915081905092915050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b6000614cbe601783613525565b9150614cc982614c88565b602082019050919050565b60006020820190508181036000830152614ced81614cb1565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b6000614d2a601183613525565b9150614d3582614cf4565b602082019050919050565b60006020820190508181036000830152614d5981614d1d565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b6000614d96601183613525565b9150614da182614d60565b602082019050919050565b60006020820190508181036000830152614dc581614d89565b9050919050565b7f6e6f74204f70656e000000000000000000000000000000000000000000000000600082015250565b6000614e02600883613525565b9150614e0d82614dcc565b602082019050919050565b60006020820190508181036000830152614e3181614df5565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b6000614e6e601083613525565b9150614e7982614e38565b602082019050919050565b60006020820190508181036000830152614e9d81614e61565b9050919050565b6000608082019050614eb96000830187613724565b614ec66020830186614171565b614ed3604083018561362f565b8181036060830152614ee5818461365a565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b6000614f26601183613525565b9150614f3182614ef0565b602082019050919050565b60006020820190508181036000830152614f5581614f19565b9050919050565b60008154614f69816140ca565b614f738186613649565b94506001821660008114614f8e5760018114614fa457614fd7565b60ff198316865281151560200286019350614fd7565b614fad85614491565b60005b83811015614fcf57815481890152600182019150602081019050614fb0565b808801955050505b50505092915050565b6000608082019050614ff56000830187613724565b6150026020830186614171565b61500f604083018561362f565b81810360608301526150218184614f5c565b905095945050505050565b600080fd5b60008151905061504081613a85565b92915050565b60008151905061505581613ac3565b92915050565b600060e082840312156150715761507061502c565b5b61507b60e0613dc9565b9050600061508b8482850161444f565b600083015250602061509f8482850161444f565b60208301525060406150b38482850161444f565b60408301525060606150c78482850161444f565b60608301525060806150db8482850161444f565b60808301525060a06150ef848285016141da565b60a08301525060c0615103848285016141da565b60c08301525092915050565b61511881614067565b811461512357600080fd5b50565b6000815190506151358161510f565b92915050565b600061020082840312156151525761515161502c565b5b61515d610140613dc9565b9050600061516d84828501615031565b600083015250602061518184828501615031565b602083015250604061519584828501615046565b60408301525060606151a98482850161444f565b60608301525060806151bd8482850161505b565b6080830152506101606151d284828501615126565b60a0830152506101806151e784828501615126565b60c0830152506101a06151fc848285016141da565b60e0830152506101c0615211848285016141da565b610100830152506101e0615227848285016141da565b6101208301525092915050565b6000610200828403121561524b5761524a61345e565b5b60006152598482850161513b565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000615298601f83613525565b91506152a382615262565b602082019050919050565b600060208201905081810360008301526152c78161528b565b905091905056fea264697066735822122020b55694a67f624c95cc0a001dcaf0a27424a42ae6488cda930120984b893fa864736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 529,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "oo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(OptimisticOracleV2Interface)517"
      },
      {
        "astId": 532,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "requestTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 652,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 657,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betDetails",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(BetDetails)567_storage)"
      },
      {
        "astId": 661,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "hashIds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 666,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "bets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Bet)587_storage)"
      },
      {
        "astId": 671,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "userBets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)131": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(OptimisticOracleV2Interface)517": {
        "encoding": "inplace",
        "label": "contract OptimisticOracleV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)595": {
        "encoding": "inplace",
        "label": "enum OO_BetHandler.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bet)587_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)587_storage"
      },
      "t_mapping(t_uint256,t_struct(BetDetails)567_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.BetDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(BetDetails)567_storage"
      },
      "t_struct(Bet)587_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.Bet",
        "members": [
          {
            "astId": 569,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 572,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betDetails",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(BetDetails)567_storage"
          },
          {
            "astId": 574,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmation",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 577,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationToken",
            "offset": 0,
            "slot": "11",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 579,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationAmount",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 581,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negation",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 584,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationToken",
            "offset": 0,
            "slot": "14",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 586,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationAmount",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(BetDetails)567_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.BetDetails",
        "members": [
          {
            "astId": 546,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 548,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "question",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 550,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 553,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "bondCurrency",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 555,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 557,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "privateBet",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 559,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "liveness",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 561,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "reward",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 563,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "imgUrl",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes_storage"
          },
          {
            "astId": 566,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betStatus",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(BetStatus)595"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}