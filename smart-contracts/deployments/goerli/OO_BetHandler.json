{
  "address": "0xf13698313Cac204AECFD8103b1120a995fA6F4a5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        }
      ],
      "name": "BetCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "affirmationRefund",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "negationRefund",
          "type": "uint256"
        }
      ],
      "name": "BetKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "BetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "winner",
          "type": "int256"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "question",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "specifications",
              "type": "bytes"
            }
          ],
          "internalType": "struct OO_BetHandler.BetContract",
          "name": "betContract",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "privateBet",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liveness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "imgUrl",
          "type": "bytes"
        },
        {
          "internalType": "enum OO_BetHandler.BetStatus",
          "name": "betStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "betId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "question",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "specifications",
                  "type": "bytes"
                }
              ],
              "internalType": "struct OO_BetHandler.BetContract",
              "name": "betContract",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "bondCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "privateBet",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "liveness",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "imgUrl",
              "type": "bytes"
            },
            {
              "internalType": "enum OO_BetHandler.BetStatus",
              "name": "betStatus",
              "type": "uint8"
            }
          ],
          "internalType": "struct OO_BetHandler.BetDetails",
          "name": "betDetails",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "affirmationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "negationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "negationAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "cancelBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "claimWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_question",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_specifications",
          "type": "bytes"
        }
      ],
      "name": "createAncillaryData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getHashId",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "getSettledData",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "hashIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "killBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_affirmation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_affirmationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_negation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_negationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_negationAmount",
          "type": "uint256"
        }
      ],
      "name": "loadBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "requestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_question",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_specifications",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_bondCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liveness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_privateBet",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_imgUrl",
          "type": "bytes"
        }
      ],
      "name": "setBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "settleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        }
      ],
      "name": "stringDecode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_string",
          "type": "string"
        }
      ],
      "name": "stringEncode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0d8f57bf4df3bbec61cdd9d14ce72788dcd8dfa8e07786d189ad43770d28da8",
  "receipt": {
    "to": null,
    "from": "0x4204FDD868FFe0e62F57e6A626F8C9530F7d5AD1",
    "contractAddress": "0xf13698313Cac204AECFD8103b1120a995fA6F4a5",
    "transactionIndex": 26,
    "gasUsed": "4927689",
    "logsBloom": "0x
    "blockHash": "0xec284bf7d3f045e79c398dc976be5e1f55b3876898ab032a0fa800d2a55aecc7",
    "transactionHash": "0xb0d8f57bf4df3bbec61cdd9d14ce72788dcd8dfa8e07786d189ad43770d28da8",
    "logs": [],
    "blockNumber": 8318328,
    "cumulativeGasUsed": "8390512",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 20,
  "solcInputHash": "29db665da887a3e9376b867adfa2c5a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"BetCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"affirmationRefund\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"negationRefund\",\"type\":\"uint256\"}],\"name\":\"BetKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"BetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"winner\",\"type\":\"int256\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"specifications\",\"type\":\"bytes\"}],\"internalType\":\"struct OO_BetHandler.BetContract\",\"name\":\"betContract\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateBet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"imgUrl\",\"type\":\"bytes\"},{\"internalType\":\"enum OO_BetHandler.BetStatus\",\"name\":\"betStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"specifications\",\"type\":\"bytes\"}],\"internalType\":\"struct OO_BetHandler.BetContract\",\"name\":\"betContract\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateBet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"imgUrl\",\"type\":\"bytes\"},{\"internalType\":\"enum OO_BetHandler.BetStatus\",\"name\":\"betStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct OO_BetHandler.BetDetails\",\"name\":\"betDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"affirmationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"negationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"negationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_question\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_specifications\",\"type\":\"bytes\"}],\"name\":\"createAncillaryData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getHashId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"getSettledData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"hashIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"killBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_affirmation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_affirmationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_negation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_negationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_negationAmount\",\"type\":\"uint256\"}],\"name\":\"loadBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_question\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_specifications\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_bondCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_privateBet\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_imgUrl\",\"type\":\"bytes\"}],\"name\":\"setBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"settleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"}],\"name\":\"stringDecode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"stringEncode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OO_BetHandler.sol\":\"OO_BetHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleV2Interface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    struct RequestSettings {\\n        bool eventBased; // True if the request is set to be event-based.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\n     * @dev Calling this method has a few impacts on the request:\\n     *\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\n     *    with the request.\\n     *\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\n     *    prematurely proposes a response loses their bond.\\n     *\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\n     *    the requesting contract.\\n     *\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setEventBased(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets which callbacks should be enabled for the request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\n     */\\n    function setCallbacks(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        bool callbackOnPriceProposed,\\n        bool callbackOnPriceDisputed,\\n        bool callbackOnPriceSettled\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbfd9778b3e7c86e149cc140eda5e7210ef4a604cde576abaaa46c1289c5e334f\",\"license\":\"AGPL-3.0-only\"},\"contracts/OO_BetHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract OO_BetHandler is ReentrancyGuard {\\n    OptimisticOracleV2Interface oo =\\n        OptimisticOracleV2Interface(0xA5B9d8a0B0Fa04Ba71BDD68069661ED5C0848884);\\n\\n    uint256 requestTime = 0; // Store the request time so we can re-use it later\\n    bytes32 constant IDENTIFIER = bytes32(\\\"YES_OR_NO_QUERY\\\"); // Use the yes no idetifier to ask arbitary questions, such as the weather on a particular day.\\n    address constant ZERO_ADDRESS = address(0);\\n    // 0x0000000000000000000000000000000000000000\\n    bytes constant Q = bytes(\\\"Q: \\\");\\n    bytes constant QSPECS =\\n        bytes(\\n            \\\"? --- A:1 for yes. 0 for no. 2 for ambiguous/unknowable | -------- Specifications --------> \\\"\\n        );\\n\\n    struct BetContract {\\n        bytes question;\\n        bytes specifications;\\n    }\\n\\n    struct BetDetails {\\n        uint256 betId;\\n        BetContract betContract;\\n        bytes ancillaryData;\\n        uint256 expiry;\\n        IERC20 bondCurrency;\\n        address creator;\\n        bool privateBet;\\n        uint256 liveness;\\n        uint256 reward;\\n        bytes imgUrl;\\n        BetStatus betStatus;\\n    }\\n\\n    struct Bet {\\n        uint256 betId;\\n        BetDetails betDetails;\\n        address affirmation; // Address of the side of the bet that affirms the question.\\n        IERC20 affirmationToken;\\n        uint256 affirmationAmount; // Amount deposited into the bet by the affrimation.\\n        address negation; // Address of the side of the bet that negates the question.\\n        IERC20 negationToken;\\n        uint256 negationAmount; // Amount deposited into the bet by the negation.\\n    }\\n\\n    enum BetStatus {\\n        LOADING,\\n        OPEN,\\n        ACTIVE,\\n        SETTLING,\\n        SETTLED,\\n        CLAIMED,\\n        DEAD\\n    }\\n\\n    // ******** EVENTS ************\\n\\n    event BetSet(\\n        address indexed creator,\\n        uint256 indexed betId,\\n        bytes indexed ancillaryData\\n    );\\n\\n    event BetTaken(address indexed taker, uint256 indexed betId);\\n\\n    event DataRequested(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event BetSettled(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event WinningsClaimed(\\n        uint256 indexed betId,\\n        uint256 indexed totalWinnings,\\n        int256 indexed winner\\n    );\\n\\n    event BetCanceled(\\n        uint256 indexed betId,\\n        address indexed bondCurrency,\\n        uint256 indexed refundAmount\\n    );\\n\\n    event BetKilled(\\n        uint256 indexed betId,\\n        uint256 indexed affirmationRefund,\\n        uint256 indexed negationRefund\\n    );\\n\\n    uint256 public betId = 0; // latest global betId for all managed bets.\\n    mapping(uint256 => BetDetails) public betDetails; // All bets mapped by their betId\\n    mapping(bytes => uint256) public hashIds; // A hash of bet question, msg.sender, and timestamp to betId\\n    mapping(uint256 => Bet) public bets; // All bet amounts mapped by their betId.\\n    mapping(address => uint256[]) public userBets; // All bets the user is and has participated in.\\n\\n    // ********* MUTATIVE FUNCTIONS *************\\n\\n    function setBet(\\n        bytes calldata _question,\\n        bytes calldata _specifications,\\n        uint256 _expiry,\\n        IERC20 _bondCurrency,\\n        uint256 _liveness,\\n        uint256 _reward,\\n        bool _privateBet,\\n        bytes calldata _imgUrl\\n    ) public nonReentrant {\\n        BetContract memory betContract = BetContract(\\n            bytes(_question),\\n            bytes(_specifications)\\n        );\\n\\n        bytes memory ancillaryData = createAncillaryData(\\n            _question,\\n            _specifications\\n        );\\n\\n        BetDetails memory bet = BetDetails(\\n            betId,\\n            betContract,\\n            ancillaryData,\\n            _expiry,\\n            _bondCurrency,\\n            msg.sender,\\n            _privateBet,\\n            _liveness,\\n            _reward,\\n            _imgUrl,\\n            BetStatus.LOADING\\n        );\\n\\n        bytes memory hashId = abi.encode(\\n            _question,\\n            _specifications,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        emit BetSet(msg.sender, betId, bytes(_question));\\n\\n        betDetails[betId] = bet;\\n        hashIds[hashId] = betId;\\n        userBets[msg.sender].push(betId);\\n        betId += 1;\\n    }\\n\\n    function loadBet(\\n        uint256 _betId,\\n        address _affirmation,\\n        IERC20 _affirmationToken,\\n        uint256 _affirmationAmount,\\n        address _negation,\\n        IERC20 _negationToken,\\n        uint256 _negationAmount\\n    ) public nonReentrant {\\n        BetDetails storage betDetails = betDetails[_betId];\\n        require(msg.sender == betDetails.creator, \\\"not creator\\\");\\n        require(_affirmation != _negation, \\\"must have separate parties\\\");\\n        require(betDetails.betStatus == BetStatus.LOADING, \\\"not loading\\\");\\n\\n        Bet memory bet = Bet(\\n            _betId,\\n            betDetails,\\n            _affirmation,\\n            _affirmationToken,\\n            _affirmationAmount,\\n            _negation,\\n            _negationToken,\\n            _negationAmount\\n        );\\n\\n        // Make sure to approve this contract to spend your ERC20 externally first\\n        if (msg.sender == _affirmation) {\\n            _affirmationToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _affirmationAmount\\n            );\\n        } else if (msg.sender == _negation) {\\n            _negationToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _negationAmount\\n            );\\n        }\\n\\n        bet.betDetails.betStatus = BetStatus.OPEN;\\n        bets[_betId] = bet;\\n    }\\n\\n    function takeBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        require(\\n            msg.sender != bet.betDetails.creator,\\n            \\\"Can't take your own bet\\\"\\n        );\\n        if (bet.betDetails.privateBet == false) {\\n            require(\\n                bet.affirmation == ZERO_ADDRESS || bet.negation == ZERO_ADDRESS,\\n                \\\"Bet already taken\\\"\\n            );\\n        } else {\\n            require(\\n                msg.sender == bet.affirmation || msg.sender == bet.negation,\\n                \\\"Not bet recipient\\\"\\n            );\\n        }\\n        require(bet.betDetails.betStatus == BetStatus.OPEN, \\\"not Open\\\");\\n\\n        if (bet.affirmation == ZERO_ADDRESS) {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.betDetails.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                bet.affirmationAmount\\n            );\\n            bet.affirmation = msg.sender;\\n        } else {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.betDetails.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                bet.negationAmount\\n            );\\n            bet.negation = msg.sender;\\n        }\\n\\n        userBets[msg.sender].push(_betId);\\n        bet.betDetails.betStatus = BetStatus.ACTIVE;\\n\\n        emit BetTaken(msg.sender, _betId);\\n    }\\n\\n    function requestData(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        require(\\n            bet.betDetails.betStatus == BetStatus.ACTIVE,\\n            \\\"Bet not ready to be settled\\\"\\n        );\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.betDetails.ancillaryData; // Question to ask the UMA Oracle.\\n\\n        requestTime = block.timestamp; // Set the request time to the current block time.\\n        IERC20 bondCurrency = IERC20(bet.betDetails.bondCurrency); // Use preferred token as the bond currency.\\n        uint256 reward = bet.betDetails.reward; // Set the reward amount for UMA Oracle.\\n\\n        // Set liveness for request disputes measured in seconds. Recommended time is at least 7200 (2 hours).\\n        // Users should increase liveness time depending on various factors such as amount of funds being handled\\n        // and risk of malicious acts.\\n        uint256 liveness = bet.betDetails.liveness;\\n\\n        // Now, make the price request to the Optimistic oracle with preferred inputs.\\n        oo.requestPrice(\\n            IDENTIFIER,\\n            requestTime,\\n            ancillaryData,\\n            bondCurrency,\\n            reward\\n        );\\n        oo.setCustomLiveness(IDENTIFIER, requestTime, ancillaryData, liveness);\\n\\n        bet.betDetails.betStatus = BetStatus.SETTLING;\\n        emit DataRequested(bet.affirmation, bet.negation, bet.betId);\\n    }\\n\\n    // Settle the request once it's gone through the liveness period of 30 seconds. This acts the finalize the voted on price.\\n    // In a real world use of the Optimistic Oracle this should be longer to give time to disputers to catch bat price proposals.\\n    function settleRequest(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        require(\\n            bet.betDetails.betStatus == BetStatus.SETTLING,\\n            \\\"Bet not settling\\\"\\n        );\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.betDetails.ancillaryData;\\n\\n        oo.settle(address(this), IDENTIFIER, requestTime, ancillaryData);\\n        bet.betDetails.betStatus = BetStatus.SETTLED;\\n\\n        emit BetSettled(bet.affirmation, bet.negation, bet.betId);\\n    }\\n\\n    function claimWinnings(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        uint256 totalWinnings = bet.affirmationAmount + bet.negationAmount;\\n        int256 settlementData = getSettledData(_betId);\\n        require(\\n            bet.betDetails.betStatus == BetStatus.SETTLED,\\n            \\\"Bet not yet settled\\\"\\n        );\\n        require(\\n            msg.sender == bet.affirmation || msg.sender == bet.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(\\n            settlementData == 1e18 || settlementData == 0,\\n            \\\"Invalid settlement\\\"\\n        );\\n        if (settlementData == 1e18) {\\n            require(msg.sender == bet.affirmation, \\\"Negation did not win bet\\\");\\n            bet.betDetails.bondCurrency.transfer(\\n                bet.affirmation,\\n                totalWinnings\\n            );\\n        } else {\\n            require(msg.sender == bet.negation, \\\"Affirmation did not win bet\\\");\\n            bet.betDetails.bondCurrency.transfer(bet.negation, totalWinnings);\\n        }\\n\\n        bet.betDetails.betStatus = BetStatus.CLAIMED;\\n\\n        emit WinningsClaimed(bet.betId, totalWinnings, settlementData);\\n    }\\n\\n    function cancelBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        uint256 refundAmount;\\n        require(\\n            bet.betDetails.betStatus == BetStatus.LOADING ||\\n                bet.betDetails.betStatus == BetStatus.OPEN,\\n            \\\"Bet already active\\\"\\n        );\\n        require(msg.sender == bet.betDetails.creator, \\\"Not bet creator\\\");\\n\\n        if (bet.betDetails.creator == bet.affirmation) {\\n            refundAmount = bet.affirmationAmount;\\n        } else {\\n            refundAmount = bet.negationAmount;\\n        }\\n\\n        bet.betDetails.bondCurrency.transfer(\\n            bet.betDetails.creator,\\n            refundAmount\\n        );\\n\\n        emit BetCanceled(\\n            bet.betId,\\n            address(bet.betDetails.bondCurrency),\\n            refundAmount\\n        );\\n    }\\n\\n    function killBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        int256 settlementData = getSettledData(_betId);\\n        require(\\n            bet.betDetails.betStatus == BetStatus.SETTLED,\\n            \\\"Bet not yet settled\\\"\\n        );\\n        require(\\n            msg.sender == bet.affirmation || msg.sender == bet.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(settlementData == 2 * 1e18, \\\"Bet is settleable\\\");\\n        bet.betDetails.bondCurrency.transfer(\\n            bet.affirmation,\\n            bet.affirmationAmount\\n        );\\n        bet.betDetails.bondCurrency.transfer(bet.negation, bet.negationAmount);\\n\\n        bet.betDetails.betStatus = BetStatus.DEAD;\\n\\n        emit BetKilled(bet.betId, bet.affirmationAmount, bet.negationAmount);\\n    }\\n\\n    //******* VIEW FUNCTIONS ***********\\n    function createAncillaryData(\\n        bytes memory _question,\\n        bytes memory _specifications\\n    ) public pure returns (bytes memory) {\\n        bytes memory question = abi.encodePacked(\\n            Q,\\n            _question,\\n            QSPECS,\\n            _specifications\\n        );\\n        return question;\\n    }\\n\\n    // Fetch the resolved price from the Optimistic Oracle that was settled.\\n    function getSettledData(uint256 _betId) public view returns (int256) {\\n        Bet storage bet = bets[_betId];\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        return\\n            oo\\n                .getRequest(\\n                    address(this),\\n                    IDENTIFIER,\\n                    requestTime,\\n                    bet.betDetails.ancillaryData\\n                )\\n                .resolvedPrice;\\n    }\\n\\n    function getHashId(bytes calldata _question, uint256 timestamp)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        return abi.encode(_question, msg.sender, timestamp);\\n    }\\n\\n    function stringEncode(string calldata _string)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return bytes(_string);\\n    }\\n\\n    function stringDecode(bytes calldata _bytes)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return string(_bytes);\\n    }\\n}\\n\",\"keccak256\":\"0x2c8fd56744fc249bbee896d18e436ea70f70a2d032dda511e6f0596d020025f2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405273a5b9d8a0b0fa04ba71bdd68069661ed5c0848884600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600255600060035534801561006f57600080fd5b50600160008190555061578080620000886000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635fb5a70d116100a2578063945e5a4211610071578063945e5a4214610326578063c511a07414610356578063d247f92b14610372578063dc60054e1461038e578063e5da66af146103aa57610116565b80635fb5a70d1461027a578063677bd9ff146102aa5780636d4e9637146102c65780638068aa68146102f657610116565b806327bce91b116100e957806327bce91b146101d85780632adb9e3c146101f65780633268fc8a14610212578063357401f51461022e57806345b7c1c11461024a57610116565b8063030425b71461011b57806306c66b85146101375780630efbf5291461016757806322af00fa146101a1575b600080fd5b61013560048036038101906101309190613a29565b6103da565b005b610151600480360381019061014c9190613b41565b6108c1565b60405161015e9190613c1e565b60405180910390f35b610181600480360381019061017c9190613c40565b610910565b6040516101989b9a99989796959493929190613e53565b60405180910390f35b6101bb60048036038101906101b69190613c40565b610c02565b6040516101cf98979695949392919061409f565b60405180910390f35b6101e061105b565b6040516101ed9190614124565b60405180910390f35b610210600480360381019061020b9190613c40565b611061565b005b61022c6004803603810190610227919061416b565b6114e5565b005b61024860048036038101906102439190613c40565b611f24565b005b610264600480360381019061025f9190614263565b612273565b60405161027191906142b0565b60405180910390f35b610294600480360381019061028f9190614402565b6122c2565b6040516102a19190614124565b60405180910390f35b6102c460048036038101906102bf9190613c40565b6122f0565b005b6102e060048036038101906102db919061444b565b61282e565b6040516102ed91906142b0565b60405180910390f35b610310600480360381019061030b91906144c3565b6128b1565b60405161031d9190614124565b60405180910390f35b610340600480360381019061033b9190614503565b6128e2565b60405161034d91906142b0565b60405180910390f35b610370600480360381019061036b9190613c40565b612913565b005b61038c60048036038101906103879190613c40565b612f64565b005b6103a860048036038101906103a39190613c40565b6132e3565b005b6103c460048036038101906103bf9190613c40565b6136d4565b6040516103d1919061457c565b60405180910390f35b6103e2613879565b600060405180604001604052808d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250905060006105178d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061282e565b9050600060405180610160016040528060035481526020018481526020018381526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001871515815260200189815260200188815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600060068111156105eb576105ea613ddc565b5b815250905060008e8e8e8e334260405160200161060d969594939291906145c4565b60405160208183030381529060405290508e8e60405161062e92919061464b565b60405180910390206003543373ffffffffffffffffffffffffffffffffffffffff167fe5adba74b6b724460a7880fb90bec588832442132225c4b4b117612a47e6e99360405160405180910390a4816004600060035481526020019081526020016000206000820151816000015560208201518160010160008201518160000190816106ba9190614866565b5060208201518160010190816106d09190614866565b50505060408201518160030190816106e89190614866565b506060820151816004015560808201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160146101000a81548160ff02191690831515021790555060e0820151816007015561010082015181600801556101208201518160090190816107cc9190614866565b5061014082015181600a0160006101000a81548160ff021916908360068111156107f9576107f8613ddc565b5b02179055509050506003546005826040516108149190614969565b908152602001604051809103902081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546108a191906149af565b92505081905550505050506108b46138c8565b5050505050505050505050565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b60046020528060005260406000206000915090508060000154908060010160405180604001604052908160008201805461094990614693565b80601f016020809104026020016040519081016040528092919081815260200182805461097590614693565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b505050505081526020016001820180546109db90614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0790614693565b8015610a545780601f10610a2957610100808354040283529160200191610a54565b820191906000526020600020905b815481529060010190602001808311610a3757829003601f168201915b50505050508152505090806003018054610a6d90614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9990614693565b8015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b5050505050908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160149054906101000a900460ff1690806007015490806008015490806009018054610b6c90614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9890614693565b8015610be55780601f10610bba57610100808354040283529160200191610be5565b820191906000526020600020905b815481529060010190602001808311610bc857829003601f168201915b50505050509080600a0160009054906101000a900460ff1690508b565b600660205280600052604060002060009150905080600001549080600101604051806101600160405290816000820154815260200160018201604051806040016040529081600082018054610c5690614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8290614693565b8015610ccf5780601f10610ca457610100808354040283529160200191610ccf565b820191906000526020600020905b815481529060010190602001808311610cb257829003601f168201915b50505050508152602001600182018054610ce890614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1490614693565b8015610d615780601f10610d3657610100808354040283529160200191610d61565b820191906000526020600020905b815481529060010190602001808311610d4457829003601f168201915b5050505050815250508152602001600382018054610d7e90614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610daa90614693565b8015610df75780601f10610dcc57610100808354040283529160200191610df7565b820191906000526020600020905b815481529060010190602001808311610dda57829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff161515151581526020016007820154815260200160088201548152602001600982018054610ef590614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2190614693565b8015610f6e5780601f10610f4357610100808354040283529160200191610f6e565b820191906000526020600020905b815481529060010190602001808311610f5157829003601f168201915b50505050508152602001600a820160009054906101000a900460ff166006811115610f9c57610f9b613ddc565b5b6006811115610fae57610fad613ddc565b5b815250509080600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600e01549080600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060100160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060110154905088565b60035481565b60006006600083815260200190815260200160002090506002600681111561108c5761108b613ddc565b5b81600101600a0160009054906101000a900460ff1660068111156110b3576110b2613ddc565b5b146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea90614a2f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806111a057503373ffffffffffffffffffffffffffffffffffffffff1681600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6111a957600080fd5b60008160010160030180546111bd90614693565b80601f01602080910402602001604051908101604052809291908181526020018280546111e990614693565b80156112365780601f1061120b57610100808354040283529160200191611236565b820191906000526020600020905b81548152906001019060200180831161121957829003601f168201915b505050505090504260028190555060008260010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083600101600801549050600084600101600701549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b815260040161130d959493929190614a68565b6020604051808303816000875af115801561132c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113509190614ad7565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b81526004016113d49493929190614b04565b600060405180830381600087803b1580156113ee57600080fd5b505af1158015611402573d6000803e3d6000fd5b50505050600385600101600a0160006101000a81548160ff0219169083600681111561143157611430613ddc565b5b0217905550846000015485600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1686600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a4505050505050565b6114ed613879565b60006004600089815260200190815260200160002090508060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158d90614b9c565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603611604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fb90614c08565b60405180910390fd5b6000600681111561161857611617613ddc565b5b81600a0160009054906101000a900460ff16600681111561163c5761163b613ddc565b5b1461167c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167390614c74565b60405180910390fd5b60006040518061010001604052808a8152602001836040518061016001604052908160008201548152602001600182016040518060400160405290816000820180546116c790614693565b80601f01602080910402602001604051908101604052809291908181526020018280546116f390614693565b80156117405780601f1061171557610100808354040283529160200191611740565b820191906000526020600020905b81548152906001019060200180831161172357829003601f168201915b5050505050815260200160018201805461175990614693565b80601f016020809104026020016040519081016040528092919081815260200182805461178590614693565b80156117d25780601f106117a7576101008083540402835291602001916117d2565b820191906000526020600020905b8154815290600101906020018083116117b557829003601f168201915b50505050508152505081526020016003820180546117ef90614693565b80601f016020809104026020016040519081016040528092919081815260200182805461181b90614693565b80156118685780601f1061183d57610100808354040283529160200191611868565b820191906000526020600020905b81548152906001019060200180831161184b57829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff16151515158152602001600782015481526020016008820154815260200160098201805461196690614693565b80601f016020809104026020016040519081016040528092919081815260200182805461199290614693565b80156119df5780601f106119b4576101008083540402835291602001916119df565b820191906000526020600020905b8154815290600101906020018083116119c257829003601f168201915b50505050508152602001600a820160009054906101000a900460ff166006811115611a0d57611a0c613ddc565b5b6006811115611a1f57611a1e613ddc565b5b8152505081526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481525090508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611b5d578673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401611b1493929190614c94565b6020604051808303816000875af1158015611b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b579190614ce0565b50611c13565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611c12578373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611bcd93929190614c94565b6020604051808303816000875af1158015611bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c109190614ce0565b505b5b6001816020015161014001906006811115611c3157611c30613ddc565b5b90816006811115611c4557611c44613ddc565b5b8152505080600660008b815260200190815260200160002060008201518160000155602082015181600101600082015181600001556020820151816001016000820151816000019081611c989190614866565b506020820151816001019081611cae9190614866565b5050506040820151816003019081611cc69190614866565b506060820151816004015560808201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160146101000a81548160ff02191690831515021790555060e082015181600701556101008201518160080155610120820151816009019081611daa9190614866565b5061014082015181600a0160006101000a81548160ff02191690836006811115611dd757611dd6613ddc565b5b02179055505050604082015181600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600d0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600e015560a082015181600f0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160100160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181601101559050505050611f1b6138c8565b50505050505050565b611f2c613879565b60006006600083815260200190815260200160002090506000806006811115611f5857611f57613ddc565b5b82600101600a0160009054906101000a900460ff166006811115611f7f57611f7e613ddc565b5b1480611fc3575060016006811115611f9a57611f99613ddc565b5b82600101600a0160009054906101000a900460ff166006811115611fc157611fc0613ddc565b5b145b612002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff990614d59565b60405180910390fd5b8160010160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208e90614dc5565b60405180910390fd5b81600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036121215781600e01549050612129565b816011015490505b8160010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016121b2929190614de5565b6020604051808303816000875af11580156121d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f59190614ce0565b50808260010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600001547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a450506122706138c8565b50565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b6005818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6122f8613879565b60006006600083815260200190815260200160002090506000816011015482600e015461232591906149af565b90506000612332846136d4565b90506004600681111561234857612347613ddc565b5b83600101600a0160009054906101000a900460ff16600681111561236f5761236e613ddc565b5b146123af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a690614e5a565b60405180910390fd5b82600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061245c575082600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61249b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249290614ec6565b60405180910390fd5b670de0b6b3a76400008114806124b15750600081145b6124f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e790614f32565b60405180910390fd5b670de0b6b3a764000081036126605782600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258890614f9e565b60405180910390fd5b8260010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401612617929190614de5565b6020604051808303816000875af1158015612636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265a9190614ce0565b506127bd565b82600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146126f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e99061500a565b60405180910390fd5b8260010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401612778929190614de5565b6020604051808303816000875af1158015612797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bb9190614ce0565b505b600583600101600a0160006101000a81548160ff021916908360068111156127e8576127e7613ddc565b5b0217905550808284600001547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a450505061282b6138c8565b50565b606060006040518060400160405280600381526020017f513a200000000000000000000000000000000000000000000000000000000000815250846040518060800160405280605c81526020016156ef605c913985604051602001612896949392919061502a565b60405160208183030381529060405290508091505092915050565b600760205281600052604060002081815481106128cd57600080fd5b90600052602060002001600091509150505481565b6060838333846040516020016128fb9493929190615068565b60405160208183030381529060405290509392505050565b61291b613879565b60006006600083815260200190815260200160002090508060010160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036129c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129be906150f4565b60405180910390fd5b600015158160010160060160149054906101000a900460ff16151503612ada57600073ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612a965750600073ffffffffffffffffffffffffffffffffffffffff1681600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612acc90615160565b60405180910390fd5b612bc7565b80600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612b87575080600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bbd906151cc565b60405180910390fd5b5b60016006811115612bdb57612bda613ddc565b5b81600101600a0160009054906101000a900460ff166006811115612c0257612c01613ddc565b5b14612c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3990615238565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612d8e578060010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600e01546040518463ffffffff1660e01b8152600401612d0293929190614c94565b6020604051808303816000875af1158015612d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d459190614ce0565b503381600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612e7e565b8060010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084601101546040518463ffffffff1660e01b8152600401612df693929190614c94565b6020604051808303816000875af1158015612e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e399190614ce0565b503381600f0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600281600101600a0160006101000a81548160ff02191690836006811115612f0f57612f0e613ddc565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350612f616138c8565b50565b600060066000838152602001908152602001600020905060036006811115612f8f57612f8e613ddc565b5b81600101600a0160009054906101000a900460ff166006811115612fb657612fb5613ddc565b5b14612ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fed906152a4565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806130a357503373ffffffffffffffffffffffffffffffffffffffff1681600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6130ac57600080fd5b60008160010160030180546130c090614693565b80601f01602080910402602001604051908101604052809291908181526020018280546130ec90614693565b80156131395780601f1061310e57610100808354040283529160200191613139565b820191906000526020600020905b81548152906001019060200180831161311c57829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b81526004016131c394939291906152c4565b6020604051808303816000875af11580156131e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132069190614ad7565b50600482600101600a0160006101000a81548160ff0219169083600681111561323257613231613ddc565b5b0217905550816000015482600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a4505050565b6132eb613879565b6000600660008381526020019081526020016000209050600061330d836136d4565b90506004600681111561332357613322613ddc565b5b82600101600a0160009054906101000a900460ff16600681111561334a57613349613ddc565b5b1461338a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338190614e5a565b60405180910390fd5b81600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613437575081600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b613476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346d90614ec6565b60405180910390fd5b671bc16d674ec8000081146134c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b79061535c565b60405180910390fd5b8160010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600e01546040518363ffffffff1660e01b815260040161354a929190614de5565b6020604051808303816000875af1158015613569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358d9190614ce0565b508160010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684601101546040518363ffffffff1660e01b8152600401613618929190614de5565b6020604051808303816000875af1158015613637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365b9190614ce0565b50600682600101600a0160006101000a81548160ff0219169083600681111561368757613686613ddc565b5b0217905550816011015482600e015483600001547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a450506136d16138c8565b50565b6000806006600084815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061379957503373ffffffffffffffffffffffffffffffffffffffff1681600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6137a257600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856001016003016040518563ffffffff1660e01b815260040161382b9493929190615400565b61020060405180830381865afa158015613849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386d9190615654565b60c00151915050919050565b6002600054036138be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138b5906156ce565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261390b5761390a6138e6565b5b8235905067ffffffffffffffff811115613928576139276138eb565b5b602083019150836001820283011115613944576139436138f0565b5b9250929050565b6000819050919050565b61395e8161394b565b811461396957600080fd5b50565b60008135905061397b81613955565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139ac82613981565b9050919050565b60006139be826139a1565b9050919050565b6139ce816139b3565b81146139d957600080fd5b50565b6000813590506139eb816139c5565b92915050565b60008115159050919050565b613a06816139f1565b8114613a1157600080fd5b50565b600081359050613a23816139fd565b92915050565b60008060008060008060008060008060006101008c8e031215613a4f57613a4e6138dc565b5b60008c013567ffffffffffffffff811115613a6d57613a6c6138e1565b5b613a798e828f016138f5565b9b509b505060208c013567ffffffffffffffff811115613a9c57613a9b6138e1565b5b613aa88e828f016138f5565b99509950506040613abb8e828f0161396c565b9750506060613acc8e828f016139dc565b9650506080613add8e828f0161396c565b95505060a0613aee8e828f0161396c565b94505060c0613aff8e828f01613a14565b93505060e08c013567ffffffffffffffff811115613b2057613b1f6138e1565b5b613b2c8e828f016138f5565b92509250509295989b509295989b9093969950565b60008060208385031215613b5857613b576138dc565b5b600083013567ffffffffffffffff811115613b7657613b756138e1565b5b613b82858286016138f5565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613bc8578082015181840152602081019050613bad565b60008484015250505050565b6000601f19601f8301169050919050565b6000613bf082613b8e565b613bfa8185613b99565b9350613c0a818560208601613baa565b613c1381613bd4565b840191505092915050565b60006020820190508181036000830152613c388184613be5565b905092915050565b600060208284031215613c5657613c556138dc565b5b6000613c648482850161396c565b91505092915050565b613c768161394b565b82525050565b600081519050919050565b600082825260208201905092915050565b6000613ca382613c7c565b613cad8185613c87565b9350613cbd818560208601613baa565b613cc681613bd4565b840191505092915050565b60006040830160008301518482036000860152613cee8282613c98565b91505060208301518482036020860152613d088282613c98565b9150508091505092915050565b600082825260208201905092915050565b6000613d3182613c7c565b613d3b8185613d15565b9350613d4b818560208601613baa565b613d5481613bd4565b840191505092915050565b6000819050919050565b6000613d84613d7f613d7a84613981565b613d5f565b613981565b9050919050565b6000613d9682613d69565b9050919050565b6000613da882613d8b565b9050919050565b613db881613d9d565b82525050565b613dc7816139a1565b82525050565b613dd6816139f1565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110613e1c57613e1b613ddc565b5b50565b6000819050613e2d82613e0b565b919050565b6000613e3d82613e1f565b9050919050565b613e4d81613e32565b82525050565b600061016082019050613e69600083018e613c6d565b8181036020830152613e7b818d613cd1565b90508181036040830152613e8f818c613d26565b9050613e9e606083018b613c6d565b613eab608083018a613daf565b613eb860a0830189613dbe565b613ec560c0830188613dcd565b613ed260e0830187613c6d565b613ee0610100830186613c6d565b818103610120830152613ef38185613d26565b9050613f03610140830184613e44565b9c9b505050505050505050505050565b613f1c8161394b565b82525050565b60006040830160008301518482036000860152613f3f8282613c98565b91505060208301518482036020860152613f598282613c98565b9150508091505092915050565b613f6f81613d9d565b82525050565b613f7e816139a1565b82525050565b613f8d816139f1565b82525050565b613f9c81613e32565b82525050565b600061016083016000830151613fbb6000860182613f13565b5060208301518482036020860152613fd38282613f22565b91505060408301518482036040860152613fed8282613c98565b91505060608301516140026060860182613f13565b5060808301516140156080860182613f66565b5060a083015161402860a0860182613f75565b5060c083015161403b60c0860182613f84565b5060e083015161404e60e0860182613f13565b50610100830151614063610100860182613f13565b5061012083015184820361012086015261407d8282613c98565b915050610140830151614094610140860182613f93565b508091505092915050565b6000610100820190506140b5600083018b613c6d565b81810360208301526140c7818a613fa2565b90506140d66040830189613dbe565b6140e36060830188613daf565b6140f06080830187613c6d565b6140fd60a0830186613dbe565b61410a60c0830185613daf565b61411760e0830184613c6d565b9998505050505050505050565b60006020820190506141396000830184613c6d565b92915050565b614148816139a1565b811461415357600080fd5b50565b6000813590506141658161413f565b92915050565b600080600080600080600060e0888a03121561418a576141896138dc565b5b60006141988a828b0161396c565b97505060206141a98a828b01614156565b96505060406141ba8a828b016139dc565b95505060606141cb8a828b0161396c565b94505060806141dc8a828b01614156565b93505060a06141ed8a828b016139dc565b92505060c06141fe8a828b0161396c565b91505092959891949750929550565b60008083601f840112614223576142226138e6565b5b8235905067ffffffffffffffff8111156142405761423f6138eb565b5b60208301915083600182028301111561425c5761425b6138f0565b5b9250929050565b6000806020838503121561427a576142796138dc565b5b600083013567ffffffffffffffff811115614298576142976138e1565b5b6142a48582860161420d565b92509250509250929050565b600060208201905081810360008301526142ca8184613d26565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61430f82613bd4565b810181811067ffffffffffffffff8211171561432e5761432d6142d7565b5b80604052505050565b60006143416138d2565b905061434d8282614306565b919050565b600067ffffffffffffffff82111561436d5761436c6142d7565b5b61437682613bd4565b9050602081019050919050565b82818337600083830152505050565b60006143a56143a084614352565b614337565b9050828152602081018484840111156143c1576143c06142d2565b5b6143cc848285614383565b509392505050565b600082601f8301126143e9576143e86138e6565b5b81356143f9848260208601614392565b91505092915050565b600060208284031215614418576144176138dc565b5b600082013567ffffffffffffffff811115614436576144356138e1565b5b614442848285016143d4565b91505092915050565b60008060408385031215614462576144616138dc565b5b600083013567ffffffffffffffff8111156144805761447f6138e1565b5b61448c858286016143d4565b925050602083013567ffffffffffffffff8111156144ad576144ac6138e1565b5b6144b9858286016143d4565b9150509250929050565b600080604083850312156144da576144d96138dc565b5b60006144e885828601614156565b92505060206144f98582860161396c565b9150509250929050565b60008060006040848603121561451c5761451b6138dc565b5b600084013567ffffffffffffffff81111561453a576145396138e1565b5b614546868287016138f5565b935093505060206145598682870161396c565b9150509250925092565b6000819050919050565b61457681614563565b82525050565b6000602082019050614591600083018461456d565b92915050565b60006145a38385613d15565b93506145b0838584614383565b6145b983613bd4565b840190509392505050565b600060808201905081810360008301526145df81888a614597565b905081810360208301526145f4818688614597565b90506146036040830185613dbe565b6146106060830184613c6d565b979650505050505050565b600081905092915050565b6000614632838561461b565b935061463f838584614383565b82840190509392505050565b6000614658828486614626565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806146ab57607f821691505b6020821081036146be576146bd614664565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026147267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826146e9565b61473086836146e9565b95508019841693508086168417925050509392505050565b600061476361475e6147598461394b565b613d5f565b61394b565b9050919050565b6000819050919050565b61477d83614748565b6147916147898261476a565b8484546146f6565b825550505050565b600090565b6147a6614799565b6147b1818484614774565b505050565b5b818110156147d5576147ca60008261479e565b6001810190506147b7565b5050565b601f82111561481a576147eb816146c4565b6147f4846146d9565b81016020851015614803578190505b61481761480f856146d9565b8301826147b6565b50505b505050565b600082821c905092915050565b600061483d6000198460080261481f565b1980831691505092915050565b6000614856838361482c565b9150826002028217905092915050565b61486f82613c7c565b67ffffffffffffffff811115614888576148876142d7565b5b6148928254614693565b61489d8282856147d9565b600060209050601f8311600181146148d057600084156148be578287015190505b6148c8858261484a565b865550614930565b601f1984166148de866146c4565b60005b82811015614906578489015182556001820191506020850194506020810190506148e1565b86831015614923578489015161491f601f89168261482c565b8355505b6001600288020188555050505b505050505050565b600061494382613c7c565b61494d818561461b565b935061495d818560208601613baa565b80840191505092915050565b60006149758284614938565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006149ba8261394b565b91506149c58361394b565b92508282019050808211156149dd576149dc614980565b5b92915050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b6000614a19601b83613b99565b9150614a24826149e3565b602082019050919050565b60006020820190508181036000830152614a4881614a0c565b9050919050565b6000819050919050565b614a6281614a4f565b82525050565b600060a082019050614a7d6000830188614a59565b614a8a6020830187613c6d565b8181036040830152614a9c8186613d26565b9050614aab6060830185613daf565b614ab86080830184613c6d565b9695505050505050565b600081519050614ad181613955565b92915050565b600060208284031215614aed57614aec6138dc565b5b6000614afb84828501614ac2565b91505092915050565b6000608082019050614b196000830187614a59565b614b266020830186613c6d565b8181036040830152614b388185613d26565b9050614b476060830184613c6d565b95945050505050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b6000614b86600b83613b99565b9150614b9182614b50565b602082019050919050565b60006020820190508181036000830152614bb581614b79565b9050919050565b7f6d75737420686176652073657061726174652070617274696573000000000000600082015250565b6000614bf2601a83613b99565b9150614bfd82614bbc565b602082019050919050565b60006020820190508181036000830152614c2181614be5565b9050919050565b7f6e6f74206c6f6164696e67000000000000000000000000000000000000000000600082015250565b6000614c5e600b83613b99565b9150614c6982614c28565b602082019050919050565b60006020820190508181036000830152614c8d81614c51565b9050919050565b6000606082019050614ca96000830186613dbe565b614cb66020830185613dbe565b614cc36040830184613c6d565b949350505050565b600081519050614cda816139fd565b92915050565b600060208284031215614cf657614cf56138dc565b5b6000614d0484828501614ccb565b91505092915050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b6000614d43601283613b99565b9150614d4e82614d0d565b602082019050919050565b60006020820190508181036000830152614d7281614d36565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000614daf600f83613b99565b9150614dba82614d79565b602082019050919050565b60006020820190508181036000830152614dde81614da2565b9050919050565b6000604082019050614dfa6000830185613dbe565b614e076020830184613c6d565b9392505050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b6000614e44601383613b99565b9150614e4f82614e0e565b602082019050919050565b60006020820190508181036000830152614e7381614e37565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b6000614eb0601483613b99565b9150614ebb82614e7a565b602082019050919050565b60006020820190508181036000830152614edf81614ea3565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b6000614f1c601283613b99565b9150614f2782614ee6565b602082019050919050565b60006020820190508181036000830152614f4b81614f0f565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b6000614f88601883613b99565b9150614f9382614f52565b602082019050919050565b60006020820190508181036000830152614fb781614f7b565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b6000614ff4601b83613b99565b9150614fff82614fbe565b602082019050919050565b6000602082019050818103600083015261502381614fe7565b9050919050565b60006150368287614938565b91506150428286614938565b915061504e8285614938565b915061505a8284614938565b915081905095945050505050565b60006060820190508181036000830152615083818688614597565b90506150926020830185613dbe565b61509f6040830184613c6d565b95945050505050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b60006150de601783613b99565b91506150e9826150a8565b602082019050919050565b6000602082019050818103600083015261510d816150d1565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b600061514a601183613b99565b915061515582615114565b602082019050919050565b600060208201905081810360008301526151798161513d565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b60006151b6601183613b99565b91506151c182615180565b602082019050919050565b600060208201905081810360008301526151e5816151a9565b9050919050565b7f6e6f74204f70656e000000000000000000000000000000000000000000000000600082015250565b6000615222600883613b99565b915061522d826151ec565b602082019050919050565b6000602082019050818103600083015261525181615215565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b600061528e601083613b99565b915061529982615258565b602082019050919050565b600060208201905081810360008301526152bd81615281565b9050919050565b60006080820190506152d96000830187613dbe565b6152e66020830186614a59565b6152f36040830185613c6d565b81810360608301526153058184613d26565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b6000615346601183613b99565b915061535182615310565b602082019050919050565b6000602082019050818103600083015261537581615339565b9050919050565b6000815461538981614693565b6153938186613d15565b945060018216600081146153ae57600181146153c4576153f7565b60ff1983168652811515602002860193506153f7565b6153cd856146c4565b60005b838110156153ef578154818901526001820191506020810190506153d0565b808801955050505b50505092915050565b60006080820190506154156000830187613dbe565b6154226020830186614a59565b61542f6040830185613c6d565b8181036060830152615441818461537c565b905095945050505050565b600080fd5b6000815190506154608161413f565b92915050565b600081519050615475816139c5565b92915050565b600060e082840312156154915761549061544c565b5b61549b60e0614337565b905060006154ab84828501614ccb565b60008301525060206154bf84828501614ccb565b60208301525060406154d384828501614ccb565b60408301525060606154e784828501614ccb565b60608301525060806154fb84828501614ccb565b60808301525060a061550f84828501614ac2565b60a08301525060c061552384828501614ac2565b60c08301525092915050565b61553881614563565b811461554357600080fd5b50565b6000815190506155558161552f565b92915050565b600061020082840312156155725761557161544c565b5b61557d610140614337565b9050600061558d84828501615451565b60008301525060206155a184828501615451565b60208301525060406155b584828501615466565b60408301525060606155c984828501614ccb565b60608301525060806155dd8482850161547b565b6080830152506101606155f284828501615546565b60a08301525061018061560784828501615546565b60c0830152506101a061561c84828501614ac2565b60e0830152506101c061563184828501614ac2565b610100830152506101e061564784828501614ac2565b6101208301525092915050565b6000610200828403121561566b5761566a6138dc565b5b60006156798482850161555b565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006156b8601f83613b99565b91506156c382615682565b602082019050919050565b600060208201905081810360008301526156e7816156ab565b905091905056fe3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e203220666f7220616d626967756f75732f756e6b6e6f7761626c65207c202d2d2d2d2d2d2d2d2053706563696669636174696f6e73202d2d2d2d2d2d2d2d3e20a2646970667358221220e10e9fb824142a81ea6310a5e79ede20060fae55c6182200dff25353eeb5fda364736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80635fb5a70d116100a2578063945e5a4211610071578063945e5a4214610326578063c511a07414610356578063d247f92b14610372578063dc60054e1461038e578063e5da66af146103aa57610116565b80635fb5a70d1461027a578063677bd9ff146102aa5780636d4e9637146102c65780638068aa68146102f657610116565b806327bce91b116100e957806327bce91b146101d85780632adb9e3c146101f65780633268fc8a14610212578063357401f51461022e57806345b7c1c11461024a57610116565b8063030425b71461011b57806306c66b85146101375780630efbf5291461016757806322af00fa146101a1575b600080fd5b61013560048036038101906101309190613a29565b6103da565b005b610151600480360381019061014c9190613b41565b6108c1565b60405161015e9190613c1e565b60405180910390f35b610181600480360381019061017c9190613c40565b610910565b6040516101989b9a99989796959493929190613e53565b60405180910390f35b6101bb60048036038101906101b69190613c40565b610c02565b6040516101cf98979695949392919061409f565b60405180910390f35b6101e061105b565b6040516101ed9190614124565b60405180910390f35b610210600480360381019061020b9190613c40565b611061565b005b61022c6004803603810190610227919061416b565b6114e5565b005b61024860048036038101906102439190613c40565b611f24565b005b610264600480360381019061025f9190614263565b612273565b60405161027191906142b0565b60405180910390f35b610294600480360381019061028f9190614402565b6122c2565b6040516102a19190614124565b60405180910390f35b6102c460048036038101906102bf9190613c40565b6122f0565b005b6102e060048036038101906102db919061444b565b61282e565b6040516102ed91906142b0565b60405180910390f35b610310600480360381019061030b91906144c3565b6128b1565b60405161031d9190614124565b60405180910390f35b610340600480360381019061033b9190614503565b6128e2565b60405161034d91906142b0565b60405180910390f35b610370600480360381019061036b9190613c40565b612913565b005b61038c60048036038101906103879190613c40565b612f64565b005b6103a860048036038101906103a39190613c40565b6132e3565b005b6103c460048036038101906103bf9190613c40565b6136d4565b6040516103d1919061457c565b60405180910390f35b6103e2613879565b600060405180604001604052808d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250905060006105178d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061282e565b9050600060405180610160016040528060035481526020018481526020018381526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001871515815260200189815260200188815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600060068111156105eb576105ea613ddc565b5b815250905060008e8e8e8e334260405160200161060d969594939291906145c4565b60405160208183030381529060405290508e8e60405161062e92919061464b565b60405180910390206003543373ffffffffffffffffffffffffffffffffffffffff167fe5adba74b6b724460a7880fb90bec588832442132225c4b4b117612a47e6e99360405160405180910390a4816004600060035481526020019081526020016000206000820151816000015560208201518160010160008201518160000190816106ba9190614866565b5060208201518160010190816106d09190614866565b50505060408201518160030190816106e89190614866565b506060820151816004015560808201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160146101000a81548160ff02191690831515021790555060e0820151816007015561010082015181600801556101208201518160090190816107cc9190614866565b5061014082015181600a0160006101000a81548160ff021916908360068111156107f9576107f8613ddc565b5b02179055509050506003546005826040516108149190614969565b908152602001604051809103902081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546108a191906149af565b92505081905550505050506108b46138c8565b5050505050505050505050565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b60046020528060005260406000206000915090508060000154908060010160405180604001604052908160008201805461094990614693565b80601f016020809104026020016040519081016040528092919081815260200182805461097590614693565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b505050505081526020016001820180546109db90614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0790614693565b8015610a545780601f10610a2957610100808354040283529160200191610a54565b820191906000526020600020905b815481529060010190602001808311610a3757829003601f168201915b50505050508152505090806003018054610a6d90614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9990614693565b8015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b5050505050908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160149054906101000a900460ff1690806007015490806008015490806009018054610b6c90614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9890614693565b8015610be55780601f10610bba57610100808354040283529160200191610be5565b820191906000526020600020905b815481529060010190602001808311610bc857829003601f168201915b50505050509080600a0160009054906101000a900460ff1690508b565b600660205280600052604060002060009150905080600001549080600101604051806101600160405290816000820154815260200160018201604051806040016040529081600082018054610c5690614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8290614693565b8015610ccf5780601f10610ca457610100808354040283529160200191610ccf565b820191906000526020600020905b815481529060010190602001808311610cb257829003601f168201915b50505050508152602001600182018054610ce890614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1490614693565b8015610d615780601f10610d3657610100808354040283529160200191610d61565b820191906000526020600020905b815481529060010190602001808311610d4457829003601f168201915b5050505050815250508152602001600382018054610d7e90614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610daa90614693565b8015610df75780601f10610dcc57610100808354040283529160200191610df7565b820191906000526020600020905b815481529060010190602001808311610dda57829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff161515151581526020016007820154815260200160088201548152602001600982018054610ef590614693565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2190614693565b8015610f6e5780601f10610f4357610100808354040283529160200191610f6e565b820191906000526020600020905b815481529060010190602001808311610f5157829003601f168201915b50505050508152602001600a820160009054906101000a900460ff166006811115610f9c57610f9b613ddc565b5b6006811115610fae57610fad613ddc565b5b815250509080600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600e01549080600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060100160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060110154905088565b60035481565b60006006600083815260200190815260200160002090506002600681111561108c5761108b613ddc565b5b81600101600a0160009054906101000a900460ff1660068111156110b3576110b2613ddc565b5b146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea90614a2f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806111a057503373ffffffffffffffffffffffffffffffffffffffff1681600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6111a957600080fd5b60008160010160030180546111bd90614693565b80601f01602080910402602001604051908101604052809291908181526020018280546111e990614693565b80156112365780601f1061120b57610100808354040283529160200191611236565b820191906000526020600020905b81548152906001019060200180831161121957829003601f168201915b505050505090504260028190555060008260010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083600101600801549050600084600101600701549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b815260040161130d959493929190614a68565b6020604051808303816000875af115801561132c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113509190614ad7565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b81526004016113d49493929190614b04565b600060405180830381600087803b1580156113ee57600080fd5b505af1158015611402573d6000803e3d6000fd5b50505050600385600101600a0160006101000a81548160ff0219169083600681111561143157611430613ddc565b5b0217905550846000015485600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1686600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a4505050505050565b6114ed613879565b60006004600089815260200190815260200160002090508060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158d90614b9c565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603611604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fb90614c08565b60405180910390fd5b6000600681111561161857611617613ddc565b5b81600a0160009054906101000a900460ff16600681111561163c5761163b613ddc565b5b1461167c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167390614c74565b60405180910390fd5b60006040518061010001604052808a8152602001836040518061016001604052908160008201548152602001600182016040518060400160405290816000820180546116c790614693565b80601f01602080910402602001604051908101604052809291908181526020018280546116f390614693565b80156117405780601f1061171557610100808354040283529160200191611740565b820191906000526020600020905b81548152906001019060200180831161172357829003601f168201915b5050505050815260200160018201805461175990614693565b80601f016020809104026020016040519081016040528092919081815260200182805461178590614693565b80156117d25780601f106117a7576101008083540402835291602001916117d2565b820191906000526020600020905b8154815290600101906020018083116117b557829003601f168201915b50505050508152505081526020016003820180546117ef90614693565b80601f016020809104026020016040519081016040528092919081815260200182805461181b90614693565b80156118685780601f1061183d57610100808354040283529160200191611868565b820191906000526020600020905b81548152906001019060200180831161184b57829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff16151515158152602001600782015481526020016008820154815260200160098201805461196690614693565b80601f016020809104026020016040519081016040528092919081815260200182805461199290614693565b80156119df5780601f106119b4576101008083540402835291602001916119df565b820191906000526020600020905b8154815290600101906020018083116119c257829003601f168201915b50505050508152602001600a820160009054906101000a900460ff166006811115611a0d57611a0c613ddc565b5b6006811115611a1f57611a1e613ddc565b5b8152505081526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481525090508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611b5d578673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401611b1493929190614c94565b6020604051808303816000875af1158015611b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b579190614ce0565b50611c13565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611c12578373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611bcd93929190614c94565b6020604051808303816000875af1158015611bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c109190614ce0565b505b5b6001816020015161014001906006811115611c3157611c30613ddc565b5b90816006811115611c4557611c44613ddc565b5b8152505080600660008b815260200190815260200160002060008201518160000155602082015181600101600082015181600001556020820151816001016000820151816000019081611c989190614866565b506020820151816001019081611cae9190614866565b5050506040820151816003019081611cc69190614866565b506060820151816004015560808201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160146101000a81548160ff02191690831515021790555060e082015181600701556101008201518160080155610120820151816009019081611daa9190614866565b5061014082015181600a0160006101000a81548160ff02191690836006811115611dd757611dd6613ddc565b5b02179055505050604082015181600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600d0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600e015560a082015181600f0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160100160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181601101559050505050611f1b6138c8565b50505050505050565b611f2c613879565b60006006600083815260200190815260200160002090506000806006811115611f5857611f57613ddc565b5b82600101600a0160009054906101000a900460ff166006811115611f7f57611f7e613ddc565b5b1480611fc3575060016006811115611f9a57611f99613ddc565b5b82600101600a0160009054906101000a900460ff166006811115611fc157611fc0613ddc565b5b145b612002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff990614d59565b60405180910390fd5b8160010160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208e90614dc5565b60405180910390fd5b81600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036121215781600e01549050612129565b816011015490505b8160010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016121b2929190614de5565b6020604051808303816000875af11580156121d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f59190614ce0565b50808260010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600001547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a450506122706138c8565b50565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b6005818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6122f8613879565b60006006600083815260200190815260200160002090506000816011015482600e015461232591906149af565b90506000612332846136d4565b90506004600681111561234857612347613ddc565b5b83600101600a0160009054906101000a900460ff16600681111561236f5761236e613ddc565b5b146123af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a690614e5a565b60405180910390fd5b82600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061245c575082600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61249b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249290614ec6565b60405180910390fd5b670de0b6b3a76400008114806124b15750600081145b6124f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e790614f32565b60405180910390fd5b670de0b6b3a764000081036126605782600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258890614f9e565b60405180910390fd5b8260010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401612617929190614de5565b6020604051808303816000875af1158015612636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265a9190614ce0565b506127bd565b82600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146126f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e99061500a565b60405180910390fd5b8260010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401612778929190614de5565b6020604051808303816000875af1158015612797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bb9190614ce0565b505b600583600101600a0160006101000a81548160ff021916908360068111156127e8576127e7613ddc565b5b0217905550808284600001547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a450505061282b6138c8565b50565b606060006040518060400160405280600381526020017f513a200000000000000000000000000000000000000000000000000000000000815250846040518060800160405280605c81526020016156ef605c913985604051602001612896949392919061502a565b60405160208183030381529060405290508091505092915050565b600760205281600052604060002081815481106128cd57600080fd5b90600052602060002001600091509150505481565b6060838333846040516020016128fb9493929190615068565b60405160208183030381529060405290509392505050565b61291b613879565b60006006600083815260200190815260200160002090508060010160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036129c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129be906150f4565b60405180910390fd5b600015158160010160060160149054906101000a900460ff16151503612ada57600073ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612a965750600073ffffffffffffffffffffffffffffffffffffffff1681600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612acc90615160565b60405180910390fd5b612bc7565b80600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612b87575080600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bbd906151cc565b60405180910390fd5b5b60016006811115612bdb57612bda613ddc565b5b81600101600a0160009054906101000a900460ff166006811115612c0257612c01613ddc565b5b14612c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3990615238565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612d8e578060010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600e01546040518463ffffffff1660e01b8152600401612d0293929190614c94565b6020604051808303816000875af1158015612d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d459190614ce0565b503381600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612e7e565b8060010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084601101546040518463ffffffff1660e01b8152600401612df693929190614c94565b6020604051808303816000875af1158015612e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e399190614ce0565b503381600f0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600281600101600a0160006101000a81548160ff02191690836006811115612f0f57612f0e613ddc565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350612f616138c8565b50565b600060066000838152602001908152602001600020905060036006811115612f8f57612f8e613ddc565b5b81600101600a0160009054906101000a900460ff166006811115612fb657612fb5613ddc565b5b14612ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fed906152a4565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806130a357503373ffffffffffffffffffffffffffffffffffffffff1681600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6130ac57600080fd5b60008160010160030180546130c090614693565b80601f01602080910402602001604051908101604052809291908181526020018280546130ec90614693565b80156131395780601f1061310e57610100808354040283529160200191613139565b820191906000526020600020905b81548152906001019060200180831161311c57829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b81526004016131c394939291906152c4565b6020604051808303816000875af11580156131e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132069190614ad7565b50600482600101600a0160006101000a81548160ff0219169083600681111561323257613231613ddc565b5b0217905550816000015482600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a4505050565b6132eb613879565b6000600660008381526020019081526020016000209050600061330d836136d4565b90506004600681111561332357613322613ddc565b5b82600101600a0160009054906101000a900460ff16600681111561334a57613349613ddc565b5b1461338a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338190614e5a565b60405180910390fd5b81600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613437575081600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b613476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346d90614ec6565b60405180910390fd5b671bc16d674ec8000081146134c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b79061535c565b60405180910390fd5b8160010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600e01546040518363ffffffff1660e01b815260040161354a929190614de5565b6020604051808303816000875af1158015613569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358d9190614ce0565b508160010160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684601101546040518363ffffffff1660e01b8152600401613618929190614de5565b6020604051808303816000875af1158015613637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365b9190614ce0565b50600682600101600a0160006101000a81548160ff0219169083600681111561368757613686613ddc565b5b0217905550816011015482600e015483600001547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a450506136d16138c8565b50565b6000806006600084815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff1681600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061379957503373ffffffffffffffffffffffffffffffffffffffff1681600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6137a257600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856001016003016040518563ffffffff1660e01b815260040161382b9493929190615400565b61020060405180830381865afa158015613849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386d9190615654565b60c00151915050919050565b6002600054036138be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138b5906156ce565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261390b5761390a6138e6565b5b8235905067ffffffffffffffff811115613928576139276138eb565b5b602083019150836001820283011115613944576139436138f0565b5b9250929050565b6000819050919050565b61395e8161394b565b811461396957600080fd5b50565b60008135905061397b81613955565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139ac82613981565b9050919050565b60006139be826139a1565b9050919050565b6139ce816139b3565b81146139d957600080fd5b50565b6000813590506139eb816139c5565b92915050565b60008115159050919050565b613a06816139f1565b8114613a1157600080fd5b50565b600081359050613a23816139fd565b92915050565b60008060008060008060008060008060006101008c8e031215613a4f57613a4e6138dc565b5b60008c013567ffffffffffffffff811115613a6d57613a6c6138e1565b5b613a798e828f016138f5565b9b509b505060208c013567ffffffffffffffff811115613a9c57613a9b6138e1565b5b613aa88e828f016138f5565b99509950506040613abb8e828f0161396c565b9750506060613acc8e828f016139dc565b9650506080613add8e828f0161396c565b95505060a0613aee8e828f0161396c565b94505060c0613aff8e828f01613a14565b93505060e08c013567ffffffffffffffff811115613b2057613b1f6138e1565b5b613b2c8e828f016138f5565b92509250509295989b509295989b9093969950565b60008060208385031215613b5857613b576138dc565b5b600083013567ffffffffffffffff811115613b7657613b756138e1565b5b613b82858286016138f5565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613bc8578082015181840152602081019050613bad565b60008484015250505050565b6000601f19601f8301169050919050565b6000613bf082613b8e565b613bfa8185613b99565b9350613c0a818560208601613baa565b613c1381613bd4565b840191505092915050565b60006020820190508181036000830152613c388184613be5565b905092915050565b600060208284031215613c5657613c556138dc565b5b6000613c648482850161396c565b91505092915050565b613c768161394b565b82525050565b600081519050919050565b600082825260208201905092915050565b6000613ca382613c7c565b613cad8185613c87565b9350613cbd818560208601613baa565b613cc681613bd4565b840191505092915050565b60006040830160008301518482036000860152613cee8282613c98565b91505060208301518482036020860152613d088282613c98565b9150508091505092915050565b600082825260208201905092915050565b6000613d3182613c7c565b613d3b8185613d15565b9350613d4b818560208601613baa565b613d5481613bd4565b840191505092915050565b6000819050919050565b6000613d84613d7f613d7a84613981565b613d5f565b613981565b9050919050565b6000613d9682613d69565b9050919050565b6000613da882613d8b565b9050919050565b613db881613d9d565b82525050565b613dc7816139a1565b82525050565b613dd6816139f1565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110613e1c57613e1b613ddc565b5b50565b6000819050613e2d82613e0b565b919050565b6000613e3d82613e1f565b9050919050565b613e4d81613e32565b82525050565b600061016082019050613e69600083018e613c6d565b8181036020830152613e7b818d613cd1565b90508181036040830152613e8f818c613d26565b9050613e9e606083018b613c6d565b613eab608083018a613daf565b613eb860a0830189613dbe565b613ec560c0830188613dcd565b613ed260e0830187613c6d565b613ee0610100830186613c6d565b818103610120830152613ef38185613d26565b9050613f03610140830184613e44565b9c9b505050505050505050505050565b613f1c8161394b565b82525050565b60006040830160008301518482036000860152613f3f8282613c98565b91505060208301518482036020860152613f598282613c98565b9150508091505092915050565b613f6f81613d9d565b82525050565b613f7e816139a1565b82525050565b613f8d816139f1565b82525050565b613f9c81613e32565b82525050565b600061016083016000830151613fbb6000860182613f13565b5060208301518482036020860152613fd38282613f22565b91505060408301518482036040860152613fed8282613c98565b91505060608301516140026060860182613f13565b5060808301516140156080860182613f66565b5060a083015161402860a0860182613f75565b5060c083015161403b60c0860182613f84565b5060e083015161404e60e0860182613f13565b50610100830151614063610100860182613f13565b5061012083015184820361012086015261407d8282613c98565b915050610140830151614094610140860182613f93565b508091505092915050565b6000610100820190506140b5600083018b613c6d565b81810360208301526140c7818a613fa2565b90506140d66040830189613dbe565b6140e36060830188613daf565b6140f06080830187613c6d565b6140fd60a0830186613dbe565b61410a60c0830185613daf565b61411760e0830184613c6d565b9998505050505050505050565b60006020820190506141396000830184613c6d565b92915050565b614148816139a1565b811461415357600080fd5b50565b6000813590506141658161413f565b92915050565b600080600080600080600060e0888a03121561418a576141896138dc565b5b60006141988a828b0161396c565b97505060206141a98a828b01614156565b96505060406141ba8a828b016139dc565b95505060606141cb8a828b0161396c565b94505060806141dc8a828b01614156565b93505060a06141ed8a828b016139dc565b92505060c06141fe8a828b0161396c565b91505092959891949750929550565b60008083601f840112614223576142226138e6565b5b8235905067ffffffffffffffff8111156142405761423f6138eb565b5b60208301915083600182028301111561425c5761425b6138f0565b5b9250929050565b6000806020838503121561427a576142796138dc565b5b600083013567ffffffffffffffff811115614298576142976138e1565b5b6142a48582860161420d565b92509250509250929050565b600060208201905081810360008301526142ca8184613d26565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61430f82613bd4565b810181811067ffffffffffffffff8211171561432e5761432d6142d7565b5b80604052505050565b60006143416138d2565b905061434d8282614306565b919050565b600067ffffffffffffffff82111561436d5761436c6142d7565b5b61437682613bd4565b9050602081019050919050565b82818337600083830152505050565b60006143a56143a084614352565b614337565b9050828152602081018484840111156143c1576143c06142d2565b5b6143cc848285614383565b509392505050565b600082601f8301126143e9576143e86138e6565b5b81356143f9848260208601614392565b91505092915050565b600060208284031215614418576144176138dc565b5b600082013567ffffffffffffffff811115614436576144356138e1565b5b614442848285016143d4565b91505092915050565b60008060408385031215614462576144616138dc565b5b600083013567ffffffffffffffff8111156144805761447f6138e1565b5b61448c858286016143d4565b925050602083013567ffffffffffffffff8111156144ad576144ac6138e1565b5b6144b9858286016143d4565b9150509250929050565b600080604083850312156144da576144d96138dc565b5b60006144e885828601614156565b92505060206144f98582860161396c565b9150509250929050565b60008060006040848603121561451c5761451b6138dc565b5b600084013567ffffffffffffffff81111561453a576145396138e1565b5b614546868287016138f5565b935093505060206145598682870161396c565b9150509250925092565b6000819050919050565b61457681614563565b82525050565b6000602082019050614591600083018461456d565b92915050565b60006145a38385613d15565b93506145b0838584614383565b6145b983613bd4565b840190509392505050565b600060808201905081810360008301526145df81888a614597565b905081810360208301526145f4818688614597565b90506146036040830185613dbe565b6146106060830184613c6d565b979650505050505050565b600081905092915050565b6000614632838561461b565b935061463f838584614383565b82840190509392505050565b6000614658828486614626565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806146ab57607f821691505b6020821081036146be576146bd614664565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026147267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826146e9565b61473086836146e9565b95508019841693508086168417925050509392505050565b600061476361475e6147598461394b565b613d5f565b61394b565b9050919050565b6000819050919050565b61477d83614748565b6147916147898261476a565b8484546146f6565b825550505050565b600090565b6147a6614799565b6147b1818484614774565b505050565b5b818110156147d5576147ca60008261479e565b6001810190506147b7565b5050565b601f82111561481a576147eb816146c4565b6147f4846146d9565b81016020851015614803578190505b61481761480f856146d9565b8301826147b6565b50505b505050565b600082821c905092915050565b600061483d6000198460080261481f565b1980831691505092915050565b6000614856838361482c565b9150826002028217905092915050565b61486f82613c7c565b67ffffffffffffffff811115614888576148876142d7565b5b6148928254614693565b61489d8282856147d9565b600060209050601f8311600181146148d057600084156148be578287015190505b6148c8858261484a565b865550614930565b601f1984166148de866146c4565b60005b82811015614906578489015182556001820191506020850194506020810190506148e1565b86831015614923578489015161491f601f89168261482c565b8355505b6001600288020188555050505b505050505050565b600061494382613c7c565b61494d818561461b565b935061495d818560208601613baa565b80840191505092915050565b60006149758284614938565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006149ba8261394b565b91506149c58361394b565b92508282019050808211156149dd576149dc614980565b5b92915050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b6000614a19601b83613b99565b9150614a24826149e3565b602082019050919050565b60006020820190508181036000830152614a4881614a0c565b9050919050565b6000819050919050565b614a6281614a4f565b82525050565b600060a082019050614a7d6000830188614a59565b614a8a6020830187613c6d565b8181036040830152614a9c8186613d26565b9050614aab6060830185613daf565b614ab86080830184613c6d565b9695505050505050565b600081519050614ad181613955565b92915050565b600060208284031215614aed57614aec6138dc565b5b6000614afb84828501614ac2565b91505092915050565b6000608082019050614b196000830187614a59565b614b266020830186613c6d565b8181036040830152614b388185613d26565b9050614b476060830184613c6d565b95945050505050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b6000614b86600b83613b99565b9150614b9182614b50565b602082019050919050565b60006020820190508181036000830152614bb581614b79565b9050919050565b7f6d75737420686176652073657061726174652070617274696573000000000000600082015250565b6000614bf2601a83613b99565b9150614bfd82614bbc565b602082019050919050565b60006020820190508181036000830152614c2181614be5565b9050919050565b7f6e6f74206c6f6164696e67000000000000000000000000000000000000000000600082015250565b6000614c5e600b83613b99565b9150614c6982614c28565b602082019050919050565b60006020820190508181036000830152614c8d81614c51565b9050919050565b6000606082019050614ca96000830186613dbe565b614cb66020830185613dbe565b614cc36040830184613c6d565b949350505050565b600081519050614cda816139fd565b92915050565b600060208284031215614cf657614cf56138dc565b5b6000614d0484828501614ccb565b91505092915050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b6000614d43601283613b99565b9150614d4e82614d0d565b602082019050919050565b60006020820190508181036000830152614d7281614d36565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000614daf600f83613b99565b9150614dba82614d79565b602082019050919050565b60006020820190508181036000830152614dde81614da2565b9050919050565b6000604082019050614dfa6000830185613dbe565b614e076020830184613c6d565b9392505050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b6000614e44601383613b99565b9150614e4f82614e0e565b602082019050919050565b60006020820190508181036000830152614e7381614e37565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b6000614eb0601483613b99565b9150614ebb82614e7a565b602082019050919050565b60006020820190508181036000830152614edf81614ea3565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b6000614f1c601283613b99565b9150614f2782614ee6565b602082019050919050565b60006020820190508181036000830152614f4b81614f0f565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b6000614f88601883613b99565b9150614f9382614f52565b602082019050919050565b60006020820190508181036000830152614fb781614f7b565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b6000614ff4601b83613b99565b9150614fff82614fbe565b602082019050919050565b6000602082019050818103600083015261502381614fe7565b9050919050565b60006150368287614938565b91506150428286614938565b915061504e8285614938565b915061505a8284614938565b915081905095945050505050565b60006060820190508181036000830152615083818688614597565b90506150926020830185613dbe565b61509f6040830184613c6d565b95945050505050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b60006150de601783613b99565b91506150e9826150a8565b602082019050919050565b6000602082019050818103600083015261510d816150d1565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b600061514a601183613b99565b915061515582615114565b602082019050919050565b600060208201905081810360008301526151798161513d565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b60006151b6601183613b99565b91506151c182615180565b602082019050919050565b600060208201905081810360008301526151e5816151a9565b9050919050565b7f6e6f74204f70656e000000000000000000000000000000000000000000000000600082015250565b6000615222600883613b99565b915061522d826151ec565b602082019050919050565b6000602082019050818103600083015261525181615215565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b600061528e601083613b99565b915061529982615258565b602082019050919050565b600060208201905081810360008301526152bd81615281565b9050919050565b60006080820190506152d96000830187613dbe565b6152e66020830186614a59565b6152f36040830185613c6d565b81810360608301526153058184613d26565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b6000615346601183613b99565b915061535182615310565b602082019050919050565b6000602082019050818103600083015261537581615339565b9050919050565b6000815461538981614693565b6153938186613d15565b945060018216600081146153ae57600181146153c4576153f7565b60ff1983168652811515602002860193506153f7565b6153cd856146c4565b60005b838110156153ef578154818901526001820191506020810190506153d0565b808801955050505b50505092915050565b60006080820190506154156000830187613dbe565b6154226020830186614a59565b61542f6040830185613c6d565b8181036060830152615441818461537c565b905095945050505050565b600080fd5b6000815190506154608161413f565b92915050565b600081519050615475816139c5565b92915050565b600060e082840312156154915761549061544c565b5b61549b60e0614337565b905060006154ab84828501614ccb565b60008301525060206154bf84828501614ccb565b60208301525060406154d384828501614ccb565b60408301525060606154e784828501614ccb565b60608301525060806154fb84828501614ccb565b60808301525060a061550f84828501614ac2565b60a08301525060c061552384828501614ac2565b60c08301525092915050565b61553881614563565b811461554357600080fd5b50565b6000815190506155558161552f565b92915050565b600061020082840312156155725761557161544c565b5b61557d610140614337565b9050600061558d84828501615451565b60008301525060206155a184828501615451565b60208301525060406155b584828501615466565b60408301525060606155c984828501614ccb565b60608301525060806155dd8482850161547b565b6080830152506101606155f284828501615546565b60a08301525061018061560784828501615546565b60c0830152506101a061561c84828501614ac2565b60e0830152506101c061563184828501614ac2565b610100830152506101e061564784828501614ac2565b6101208301525092915050565b6000610200828403121561566b5761566a6138dc565b5b60006156798482850161555b565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006156b8601f83613b99565b91506156c382615682565b602082019050919050565b600060208201905081810360008301526156e7816156ab565b905091905056fe3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e203220666f7220616d626967756f75732f756e6b6e6f7761626c65207c202d2d2d2d2d2d2d2d2053706563696669636174696f6e73202d2d2d2d2d2d2d2d3e20a2646970667358221220e10e9fb824142a81ea6310a5e79ede20060fae55c6182200dff25353eeb5fda364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 529,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "oo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(OptimisticOracleV2Interface)517"
      },
      {
        "astId": 532,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "requestTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 672,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 677,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betDetails",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(BetDetails)587_storage)"
      },
      {
        "astId": 681,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "hashIds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 686,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "bets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Bet)607_storage)"
      },
      {
        "astId": 691,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "userBets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)131": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(OptimisticOracleV2Interface)517": {
        "encoding": "inplace",
        "label": "contract OptimisticOracleV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)615": {
        "encoding": "inplace",
        "label": "enum OO_BetHandler.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bet)607_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)607_storage"
      },
      "t_mapping(t_uint256,t_struct(BetDetails)587_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.BetDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(BetDetails)587_storage"
      },
      "t_struct(Bet)607_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.Bet",
        "members": [
          {
            "astId": 589,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 592,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betDetails",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(BetDetails)587_storage"
          },
          {
            "astId": 594,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmation",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          },
          {
            "astId": 597,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationToken",
            "offset": 0,
            "slot": "13",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 599,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationAmount",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 601,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negation",
            "offset": 0,
            "slot": "15",
            "type": "t_address"
          },
          {
            "astId": 604,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationToken",
            "offset": 0,
            "slot": "16",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 606,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationAmount",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(BetContract)561_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.BetContract",
        "members": [
          {
            "astId": 558,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "question",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 560,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "specifications",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BetDetails)587_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.BetDetails",
        "members": [
          {
            "astId": 563,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 566,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betContract",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(BetContract)561_storage"
          },
          {
            "astId": 568,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "ancillaryData",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 570,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "expiry",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 573,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "bondCurrency",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 575,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "creator",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 577,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "privateBet",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 579,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "liveness",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 581,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "reward",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 583,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "imgUrl",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes_storage"
          },
          {
            "astId": 586,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betStatus",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(BetStatus)615"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}