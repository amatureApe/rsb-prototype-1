{
  "address": "0x4d954AbddF500966AD58dF99F05Fc37a88F70652",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        }
      ],
      "name": "BetCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "affirmationRefund",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "negationRefund",
          "type": "uint256"
        }
      ],
      "name": "BetKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "winner",
          "type": "int256"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "betId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bets",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "question",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liveness",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "privateBet",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "negationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "enum OO_BetHandler.BetStatus",
          "name": "betStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "cancelBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "claimWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        }
      ],
      "name": "createQuestion",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "getSettledData",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "killBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "requestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_bondCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liveness",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_privateBet",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_privateBetRecipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_affirmation",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_counterBetAmount",
          "type": "uint256"
        }
      ],
      "name": "setBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "settleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c3ab18ca9c8ca603b14605ed3b5b0bc62a597b48657a2b50dd352bdc283a110",
  "receipt": {
    "to": null,
    "from": "0x4204FDD868FFe0e62F57e6A626F8C9530F7d5AD1",
    "contractAddress": "0x4d954AbddF500966AD58dF99F05Fc37a88F70652",
    "transactionIndex": 33,
    "gasUsed": "3592164",
    "logsBloom": "0x
    "blockHash": "0xec4c1746cda9311f7e046f98081ee50fb8e5a85b8e92fc646401d71a02b38fa6",
    "transactionHash": "0x0c3ab18ca9c8ca603b14605ed3b5b0bc62a597b48657a2b50dd352bdc283a110",
    "logs": [],
    "blockNumber": 7738988,
    "cumulativeGasUsed": "10710648",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "7dc83037875bc6235dc25a5626f243df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"BetCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"affirmationRefund\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"negationRefund\",\"type\":\"uint256\"}],\"name\":\"BetKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"winner\",\"type\":\"int256\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"betId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liveness\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateBet\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"negationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"enum OO_BetHandler.BetStatus\",\"name\":\"betStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"}],\"name\":\"createQuestion\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"getSettledData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"killBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_bondCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liveness\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_privateBet\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_privateBetRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_affirmation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_counterBetAmount\",\"type\":\"uint256\"}],\"name\":\"setBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"settleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OO_BetHandler.sol\":\"OO_BetHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleV2Interface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    struct RequestSettings {\\n        bool eventBased; // True if the request is set to be event-based.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\n     * @dev Calling this method has a few impacts on the request:\\n     *\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\n     *    with the request.\\n     *\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\n     *    prematurely proposes a response loses their bond.\\n     *\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\n     *    the requesting contract.\\n     *\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setEventBased(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets which callbacks should be enabled for the request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\n     */\\n    function setCallbacks(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        bool callbackOnPriceProposed,\\n        bool callbackOnPriceDisputed,\\n        bool callbackOnPriceSettled\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbfd9778b3e7c86e149cc140eda5e7210ef4a604cde576abaaa46c1289c5e334f\",\"license\":\"AGPL-3.0-only\"},\"contracts/OO_BetHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract OO_BetHandler is ReentrancyGuard {\\n    // Create an Optimistic oracle instance at the deployed address on G\\u00f6rli.\\n    OptimisticOracleV2Interface oo =\\n        OptimisticOracleV2Interface(0xA5B9d8a0B0Fa04Ba71BDD68069661ED5C0848884);\\n\\n    uint256 requestTime = 0; // Store the request time so we can re-use it later.\\n    bytes32 constant IDENTIFIER = bytes32(\\\"YES_OR_NO_QUERY\\\"); // Use the yes no idetifier to ask arbitary questions, such as the weather on a particular day.\\n    address constant ZERO_ADDRESS = address(0);\\n    // 0x0000000000000000000000000000000000000000\\n\\n    struct Bet {\\n        bytes question;\\n        IERC20 bondCurrency;\\n        uint256 reward;\\n        uint256 liveness;\\n        address creator; // Creator of the bet contract.\\n        bool privateBet; // Is the bet meant for a specific person or open to everyone?\\n        address affirmation; // Address of the side of the bet that affirms the question.\\n        uint256 affirmationAmount; // Amount deposited into the bet by the affrimation.\\n        address negation; // Address of the side of the bet that negates the question.\\n        uint256 negationAmount; // Amount deposited into the bet by the negation.\\n        uint256 betId; // The bet's global id number.\\n        BetStatus betStatus;\\n    }\\n\\n    enum BetStatus {\\n        OPEN,\\n        ACTIVE,\\n        SETTLING,\\n        SETTLED,\\n        CLAIMED,\\n        DEAD\\n    }\\n\\n    // ******** EVENTS ************\\n\\n    event BetSet(\\n        address indexed creator,\\n        address indexed bondCurrency,\\n        bytes indexed ancillaryData,\\n        uint256 betId\\n    );\\n\\n    event BetTaken(address indexed taker, uint256 indexed betId);\\n\\n    event DataRequested(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event BetSettled(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event WinningsClaimed(\\n        uint256 indexed betId,\\n        uint256 indexed totalWinnings,\\n        int256 indexed winner\\n    );\\n\\n    event BetCanceled(\\n        uint256 indexed betId,\\n        address indexed bondCurrency,\\n        uint256 indexed refundAmount\\n    );\\n\\n    event BetKilled(\\n        uint256 indexed betId,\\n        uint256 indexed affirmationRefund,\\n        uint256 indexed negationRefund\\n    );\\n\\n    uint256 public betId = 0; // latest global betId for all managed bets.\\n    mapping(uint256 => Bet) public bets; // All bets mapped by their betId\\n    mapping(address => uint256[]) public userBets; // All bets the user is and has participated in.\\n\\n    // ********* MUTATIVE FUNCTIONS *************\\n\\n    function setBet(\\n        string calldata _question,\\n        address _bondCurrency,\\n        uint256 _reward, // Reward is paid to settlers on UMA. It is recommended to pay 5%-10%\\n        uint256 _liveness,\\n        bool _privateBet,\\n        // If _privateBet is false, _privateBetRecipient should be 0x0000000000000000000000000000000000000000\\n        address _privateBetRecipient,\\n        bool _affirmation,\\n        uint256 _betAmount,\\n        uint256 _counterBetAmount\\n    ) public nonReentrant {\\n        require(msg.sender != _privateBetRecipient, \\\"Can't bet yourself\\\");\\n        if (_privateBet == true) {\\n            require(_privateBetRecipient != ZERO_ADDRESS, \\\"Private bets must have a recipient\\\");\\n        }\\n        bytes memory ancillaryData = createQuestion(_question); // Question to ask the UMA Oracle.\\n        IERC20 bondCurrency = IERC20(_bondCurrency); // Use preferred token as the bond currency.\\n\\n        address affirmation;\\n        uint256 affirmationAmount;\\n        address negation;\\n        uint256 negationAmount;\\n\\n        if (_affirmation == true) {\\n            affirmation = msg.sender;\\n            affirmationAmount = _betAmount;\\n            negationAmount = _counterBetAmount;\\n        } else {\\n            negation = msg.sender;\\n            negationAmount = _betAmount;\\n            affirmationAmount = _counterBetAmount;\\n        }\\n\\n        if (_privateBet == true) {\\n            affirmation == msg.sender\\n                ? negation = _privateBetRecipient\\n                : affirmation = _privateBetRecipient;\\n        }\\n\\n        Bet memory bet = Bet(\\n            ancillaryData,\\n            bondCurrency,\\n            _reward,\\n            _liveness,\\n            msg.sender,\\n            _privateBet,\\n            affirmation,\\n            affirmationAmount,\\n            negation,\\n            negationAmount,\\n            betId,\\n            BetStatus.OPEN\\n        );\\n\\n        // Make sure to approve this contract to spend your ERC20 externally first\\n        bondCurrency.transferFrom(msg.sender, address(this), _betAmount);\\n\\n        emit BetSet(msg.sender, _bondCurrency, ancillaryData, betId);\\n\\n        bets[betId] = bet;\\n        userBets[msg.sender].push(betId);\\n        betId += 1;\\n    }\\n\\n    function takeBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        require(msg.sender != bet.creator, \\\"Can't take your own bet\\\");\\n        if (bet.privateBet == false) {\\n            require(\\n                bet.affirmation == ZERO_ADDRESS || bet.negation == ZERO_ADDRESS,\\n                \\\"Bet already taken\\\"\\n            );\\n        } else {\\n            require(\\n                msg.sender == bet.affirmation || msg.sender == bet.negation,\\n                \\\"Not bet recipient\\\"\\n            );\\n        }\\n        require(bet.betStatus == BetStatus.OPEN, \\\"Bet not Open\\\");\\n\\n        if (bet.affirmation == ZERO_ADDRESS) {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                bet.affirmationAmount\\n            );\\n            bet.affirmation = msg.sender;\\n        } else {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                bet.negationAmount\\n            );\\n            bet.negation = msg.sender;\\n        }\\n\\n        userBets[msg.sender].push(_betId);\\n        bet.betStatus = BetStatus.ACTIVE;\\n\\n        emit BetTaken(msg.sender, _betId);\\n    }\\n\\n    function requestData(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        require(\\n            bet.betStatus == BetStatus.ACTIVE,\\n            \\\"Bet not ready to be settled\\\"\\n        );\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.question; // Question to ask the UMA Oracle.\\n\\n        requestTime = block.timestamp; // Set the request time to the current block time.\\n        IERC20 bondCurrency = IERC20(bet.bondCurrency); // Use preferred token as the bond currency.\\n        uint256 reward = bet.reward; // Set the reward amount for UMA Oracle.\\n\\n        // Set liveness for request disputes measured in seconds. Recommended time is at least 7200 (2 hours).\\n        // Users should increase liveness time depending on various factors such as amount of funds being handled\\n        // and risk of malicious acts.\\n        uint256 liveness = bet.liveness;\\n\\n        // Now, make the price request to the Optimistic oracle with preferred inputs.\\n        oo.requestPrice(\\n            IDENTIFIER,\\n            requestTime,\\n            ancillaryData,\\n            bondCurrency,\\n            reward\\n        );\\n        oo.setCustomLiveness(IDENTIFIER, requestTime, ancillaryData, liveness);\\n\\n        bet.betStatus = BetStatus.SETTLING;\\n        emit DataRequested(bet.affirmation, bet.negation, bet.betId);\\n    }\\n\\n    // Settle the request once it's gone through the liveness period of 30 seconds. This acts the finalize the voted on price.\\n    // In a real world use of the Optimistic Oracle this should be longer to give time to disputers to catch bat price proposals.\\n    function settleRequest(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        require(bet.betStatus == BetStatus.SETTLING, \\\"Bet not settling\\\");\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.question;\\n\\n        oo.settle(address(this), IDENTIFIER, requestTime, ancillaryData);\\n        bet.betStatus = BetStatus.SETTLED;\\n\\n        emit BetSettled(bet.affirmation, bet.negation, bet.betId);\\n    }\\n\\n    function claimWinnings(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        uint256 totalWinnings = bet.affirmationAmount + bet.negationAmount;\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == bet.affirmation || msg.sender == bet.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(\\n            settlementData == 1e18 || settlementData == 0,\\n            \\\"Invalid settlement\\\"\\n        );\\n        if (settlementData == 1e18) {\\n            require(msg.sender == bet.affirmation, \\\"Negation did not win bet\\\");\\n            bet.bondCurrency.transfer(bet.affirmation, totalWinnings);\\n        } else {\\n            require(msg.sender == bet.negation, \\\"Affirmation did not win bet\\\");\\n            bet.bondCurrency.transfer(bet.negation, totalWinnings);\\n        }\\n\\n        bet.betStatus = BetStatus.CLAIMED;\\n\\n        emit WinningsClaimed(bet.betId, totalWinnings, settlementData);\\n    }\\n\\n    function cancelBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        uint256 refundAmount;\\n        require(bet.betStatus == BetStatus.OPEN, \\\"Bet already active\\\");\\n        require(msg.sender == bet.creator, \\\"Not bet creator\\\");\\n\\n        if (bet.creator == bet.affirmation) {\\n            refundAmount = bet.affirmationAmount;\\n        } else {\\n            refundAmount = bet.negationAmount;\\n        }\\n\\n        bet.bondCurrency.transfer(bet.creator, refundAmount);\\n\\n        emit BetCanceled(bet.betId, address(bet.bondCurrency), refundAmount);\\n    }\\n\\n    function killBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == bet.affirmation || msg.sender == bet.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(settlementData == 2 * 1e18, \\\"Bet is settleable\\\");\\n        bet.bondCurrency.transfer(bet.affirmation, bet.affirmationAmount);\\n        bet.bondCurrency.transfer(bet.negation, bet.negationAmount);\\n\\n        bet.betStatus = BetStatus.DEAD;\\n\\n        emit BetKilled(bet.betId, bet.affirmationAmount, bet.negationAmount);\\n    }\\n\\n    //******* VIEW FUNCTIONS ***********\\n    function createQuestion(string memory _question)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory question = bytes(\\n            string.concat(\\n                \\\"Q: \\\",\\n                _question,\\n                \\\"? --- A:1 for yes. 0 for no. 2 for ambiguous/unknowable\\\"\\n            )\\n        );\\n        return question;\\n    }\\n\\n    // Fetch the resolved price from the Optimistic Oracle that was settled.\\n    function getSettledData(uint256 _betId) public view returns (int256) {\\n        Bet storage bet = bets[_betId];\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.question;\\n\\n        return\\n            oo\\n                .getRequest(\\n                    address(this),\\n                    IDENTIFIER,\\n                    requestTime,\\n                    ancillaryData\\n                )\\n                .resolvedPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x0ba9d5344b642d50f71824e4855eb76994fa3bdec720dd7c66d7a7952c38f0d6\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405273a5b9d8a0b0fa04ba71bdd68069661ed5c0848884600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600255600060035534801561006f57600080fd5b506001600081905550613f5e806100876000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638068aa68116100715780638068aa6814610182578063b3580c1e146101b2578063c511a074146101e2578063d247f92b146101fe578063dc60054e1461021a578063e5da66af14610236576100b4565b80630de2f6ba146100b957806322af00fa146100d557806327bce91b146101105780632adb9e3c1461012e578063357401f51461014a578063677bd9ff14610166575b600080fd5b6100d360048036038101906100ce9190612947565b610266565b005b6100ef60048036038101906100ea9190612a32565b61089d565b6040516101079c9b9a99989796959493929190612bf2565b60405180910390f35b610118610a1f565b6040516101259190612cb3565b60405180910390f35b61014860048036038101906101439190612a32565b610a25565b005b610164600480360381019061015f9190612a32565b610e97565b005b610180600480360381019061017b9190612a32565b6111d6565b005b61019c60048036038101906101979190612cce565b61174d565b6040516101a99190612cb3565b60405180910390f35b6101cc60048036038101906101c79190612e3e565b61177e565b6040516101d99190612e87565b60405180910390f35b6101fc60048036038101906101f79190612a32565b6117ad565b005b61021860048036038101906102139190612a32565b611e31565b005b610234600480360381019061022f9190612a32565b6121a7565b005b610250600480360381019061024b9190612a32565b6125d1565b60405161025d9190612ec2565b60405180910390f35b6002600054036102ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a290612f3a565b60405180910390fd5b60026000819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031890612fa6565b60405180910390fd5b600115158515150361039d57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390613038565b60405180910390fd5b5b60006103ec8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061177e565b9050600089905060008060008060011515891515036104135733935087925086905061041d565b3391508790508692505b600115158b15150361046c573373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610465578993508361046a565b899150815b505b60006040518061018001604052808881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018e81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018d151581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160035481526020016000600581111561052c5761052b612b7b565b5b81525090508573ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b815260040161056e93929190613058565b6020604051808303816000875af115801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b191906130a4565b50866040516105c0919061310d565b60405180910390208f73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312377a74e3b2d3c110c0a87dc9a32bdfe8152f1163bc6ebbf8549394889ddfd6003546040516106279190612cb3565b60405180910390a480600460006003548152602001908152602001600020600082015181600001908161065a9190613326565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601556101008201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101208201518160080155610140820151816009015561016082015181600a0160006101000a81548160ff021916908360058111156107f8576107f7612b7b565b5b0217905550905050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600354908060018154018082558091505060019003906000526020600020016000909190919091505560016003600082825461087b9190613427565b9250508190555050505050505050600160008190555050505050505050505050565b60046020528060005260406000206000915090508060000180546108c090613153565b80601f01602080910402602001604051908101604052809291908181526020018280546108ec90613153565b80156109395780601f1061090e57610100808354040283529160200191610939565b820191906000526020600020905b81548152906001019060200180831161091c57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600801549080600901549080600a0160009054906101000a900460ff1690508c565b60035481565b600060046000838152602001908152602001600020905060016005811115610a5057610a4f612b7b565b5b81600a0160009054906101000a900460ff166005811115610a7457610a73612b7b565b5b14610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab906134a7565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b6157503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610b6a57600080fd5b6000816000018054610b7b90613153565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba790613153565b8015610bf45780601f10610bc957610100808354040283529160200191610bf4565b820191906000526020600020905b815481529060010190602001808311610bd757829003601f168201915b505050505090504260028190555060008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083600201549050600084600301549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b8152600401610cc29594939291906134e0565b6020604051808303816000875af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d05919061354f565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b8152600401610d89949392919061357c565b600060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b50505050600285600a0160006101000a81548160ff02191690836005811115610de357610de2612b7b565b5b021790555084600901548560070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a4505050505050565b600260005403610edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed390612f3a565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000806005811115610f1057610f0f612b7b565b5b82600a0160009054906101000a900460ff166005811115610f3457610f33612b7b565b5b14610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b90613614565b60405180910390fd5b8160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffd90613680565b60405180910390fd5b8160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361108d5781600601549050611095565b816008015490505b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016111189291906136a0565b6020604051808303816000875af1158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b91906130a4565b50808260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600901547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a45050600160008190555050565b60026000540361121b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121290612f3a565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000816008015482600601546112509190613427565b9050600061125d846125d1565b90506003600581111561127357611272612b7b565b5b83600a0160009054906101000a900460ff16600581111561129757611296612b7b565b5b146112d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ce90613715565b60405180910390fd5b8260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061138457508260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6113c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ba90613781565b60405180910390fd5b670de0b6b3a76400008114806113d95750600081145b611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f906137ed565b60405180910390fd5b670de0b6b3a76400008103611585578260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b090613859565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161153c9291906136a0565b6020604051808303816000875af115801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f91906130a4565b506116df565b8260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160e906138c5565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161169a9291906136a0565b6020604051808303816000875af11580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd91906130a4565b505b600483600a0160006101000a81548160ff0219169083600581111561170757611706612b7b565b5b0217905550808284600901547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a4505050600160008190555050565b6005602052816000526040600020818154811061176957600080fd5b90600052602060002001600091509150505481565b606060008260405160200161179391906139c4565b604051602081830303815290604052905080915050919050565b6002600054036117f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e990612f3a565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036118a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189a90613a41565b60405180910390fd5b600015158160040160149054906101000a900460ff161515036119b357600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061196f5750600073ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6119ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a590613aad565b60405180910390fd5b611aa0565b8060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611a6057508060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9690613b19565b60405180910390fd5b5b60006005811115611ab457611ab3612b7b565b5b81600a0160009054906101000a900460ff166005811115611ad857611ad7612b7b565b5b14611b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0f90613b85565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611c61578060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600601546040518463ffffffff1660e01b8152600401611bd593929190613058565b6020604051808303816000875af1158015611bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1891906130a4565b50338160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d4e565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600801546040518463ffffffff1660e01b8152600401611cc693929190613058565b6020604051808303816000875af1158015611ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0991906130a4565b50338160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600181600a0160006101000a81548160ff02191690836005811115611ddc57611ddb612b7b565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350600160008190555050565b600060046000838152602001908152602001600020905060026005811115611e5c57611e5b612b7b565b5b81600a0160009054906101000a900460ff166005811115611e8057611e7f612b7b565b5b14611ec0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb790613bf1565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611f6d57503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611f7657600080fd5b6000816000018054611f8790613153565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb390613153565b80156120005780601f10611fd557610100808354040283529160200191612000565b820191906000526020600020905b815481529060010190602001808311611fe357829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b815260040161208a9493929190613c11565b6020604051808303816000875af11580156120a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cd919061354f565b50600382600a0160006101000a81548160ff021916908360058111156120f6576120f5612b7b565b5b021790555081600901548260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a4505050565b6002600054036121ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e390612f3a565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000612216836125d1565b90506003600581111561222c5761222b612b7b565b5b82600a0160009054906101000a900460ff1660058111156122505761224f612b7b565b5b14612290576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228790613715565b60405180910390fd5b8160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061233d57508160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61237c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237390613781565b60405180910390fd5b671bc16d674ec8000081146123c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bd90613ca9565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600601546040518363ffffffff1660e01b815260040161244d9291906136a0565b6020604051808303816000875af115801561246c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249091906130a4565b508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600801546040518363ffffffff1660e01b81526004016125189291906136a0565b6020604051808303816000875af1158015612537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255b91906130a4565b50600582600a0160006101000a81548160ff0219169083600581111561258457612583612b7b565b5b02179055508160080154826006015483600901547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a45050600160008190555050565b6000806004600084815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061269657503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61269f57600080fd5b60008160000180546126b090613153565b80601f01602080910402602001604051908101604052809291908181526020018280546126dc90613153565b80156127295780601f106126fe57610100808354040283529160200191612729565b820191906000526020600020905b81548152906001019060200180831161270c57829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b81526004016127b39493929190613c11565b61020060405180830381865afa1580156127d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f59190613efa565b60c0015192505050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261283b5761283a612816565b5b8235905067ffffffffffffffff8111156128585761285761281b565b5b60208301915083600182028301111561287457612873612820565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128a68261287b565b9050919050565b6128b68161289b565b81146128c157600080fd5b50565b6000813590506128d3816128ad565b92915050565b6000819050919050565b6128ec816128d9565b81146128f757600080fd5b50565b600081359050612909816128e3565b92915050565b60008115159050919050565b6129248161290f565b811461292f57600080fd5b50565b6000813590506129418161291b565b92915050565b6000806000806000806000806000806101208b8d03121561296b5761296a61280c565b5b60008b013567ffffffffffffffff81111561298957612988612811565b5b6129958d828e01612825565b9a509a505060206129a88d828e016128c4565b98505060406129b98d828e016128fa565b97505060606129ca8d828e016128fa565b96505060806129db8d828e01612932565b95505060a06129ec8d828e016128c4565b94505060c06129fd8d828e01612932565b93505060e0612a0e8d828e016128fa565b925050610100612a208d828e016128fa565b9150509295989b9194979a5092959850565b600060208284031215612a4857612a4761280c565b5b6000612a56848285016128fa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612a99578082015181840152602081019050612a7e565b60008484015250505050565b6000601f19601f8301169050919050565b6000612ac182612a5f565b612acb8185612a6a565b9350612adb818560208601612a7b565b612ae481612aa5565b840191505092915050565b6000819050919050565b6000612b14612b0f612b0a8461287b565b612aef565b61287b565b9050919050565b6000612b2682612af9565b9050919050565b6000612b3882612b1b565b9050919050565b612b4881612b2d565b82525050565b612b57816128d9565b82525050565b612b668161289b565b82525050565b612b758161290f565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110612bbb57612bba612b7b565b5b50565b6000819050612bcc82612baa565b919050565b6000612bdc82612bbe565b9050919050565b612bec81612bd1565b82525050565b6000610180820190508181036000830152612c0d818f612ab6565b9050612c1c602083018e612b3f565b612c29604083018d612b4e565b612c36606083018c612b4e565b612c43608083018b612b5d565b612c5060a083018a612b6c565b612c5d60c0830189612b5d565b612c6a60e0830188612b4e565b612c78610100830187612b5d565b612c86610120830186612b4e565b612c94610140830185612b4e565b612ca2610160830184612be3565b9d9c50505050505050505050505050565b6000602082019050612cc86000830184612b4e565b92915050565b60008060408385031215612ce557612ce461280c565b5b6000612cf3858286016128c4565b9250506020612d04858286016128fa565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d4b82612aa5565b810181811067ffffffffffffffff82111715612d6a57612d69612d13565b5b80604052505050565b6000612d7d612802565b9050612d898282612d42565b919050565b600067ffffffffffffffff821115612da957612da8612d13565b5b612db282612aa5565b9050602081019050919050565b82818337600083830152505050565b6000612de1612ddc84612d8e565b612d73565b905082815260208101848484011115612dfd57612dfc612d0e565b5b612e08848285612dbf565b509392505050565b600082601f830112612e2557612e24612816565b5b8135612e35848260208601612dce565b91505092915050565b600060208284031215612e5457612e5361280c565b5b600082013567ffffffffffffffff811115612e7257612e71612811565b5b612e7e84828501612e10565b91505092915050565b60006020820190508181036000830152612ea18184612ab6565b905092915050565b6000819050919050565b612ebc81612ea9565b82525050565b6000602082019050612ed76000830184612eb3565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612f24601f83612edd565b9150612f2f82612eee565b602082019050919050565b60006020820190508181036000830152612f5381612f17565b9050919050565b7f43616e27742062657420796f757273656c660000000000000000000000000000600082015250565b6000612f90601283612edd565b9150612f9b82612f5a565b602082019050919050565b60006020820190508181036000830152612fbf81612f83565b9050919050565b7f507269766174652062657473206d75737420686176652061207265636970696560008201527f6e74000000000000000000000000000000000000000000000000000000000000602082015250565b6000613022602283612edd565b915061302d82612fc6565b604082019050919050565b6000602082019050818103600083015261305181613015565b9050919050565b600060608201905061306d6000830186612b5d565b61307a6020830185612b5d565b6130876040830184612b4e565b949350505050565b60008151905061309e8161291b565b92915050565b6000602082840312156130ba576130b961280c565b5b60006130c88482850161308f565b91505092915050565b600081905092915050565b60006130e782612a5f565b6130f181856130d1565b9350613101818560208601612a7b565b80840191505092915050565b600061311982846130dc565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061316b57607f821691505b60208210810361317e5761317d613124565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026131e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826131a9565b6131f086836131a9565b95508019841693508086168417925050509392505050565b600061322361321e613219846128d9565b612aef565b6128d9565b9050919050565b6000819050919050565b61323d83613208565b6132516132498261322a565b8484546131b6565b825550505050565b600090565b613266613259565b613271818484613234565b505050565b5b818110156132955761328a60008261325e565b600181019050613277565b5050565b601f8211156132da576132ab81613184565b6132b484613199565b810160208510156132c3578190505b6132d76132cf85613199565b830182613276565b50505b505050565b600082821c905092915050565b60006132fd600019846008026132df565b1980831691505092915050565b600061331683836132ec565b9150826002028217905092915050565b61332f82612a5f565b67ffffffffffffffff81111561334857613347612d13565b5b6133528254613153565b61335d828285613299565b600060209050601f831160018114613390576000841561337e578287015190505b613388858261330a565b8655506133f0565b601f19841661339e86613184565b60005b828110156133c6578489015182556001820191506020850194506020810190506133a1565b868310156133e357848901516133df601f8916826132ec565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613432826128d9565b915061343d836128d9565b9250828201905080821115613455576134546133f8565b5b92915050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b6000613491601b83612edd565b915061349c8261345b565b602082019050919050565b600060208201905081810360008301526134c081613484565b9050919050565b6000819050919050565b6134da816134c7565b82525050565b600060a0820190506134f560008301886134d1565b6135026020830187612b4e565b81810360408301526135148186612ab6565b90506135236060830185612b3f565b6135306080830184612b4e565b9695505050505050565b600081519050613549816128e3565b92915050565b6000602082840312156135655761356461280c565b5b60006135738482850161353a565b91505092915050565b600060808201905061359160008301876134d1565b61359e6020830186612b4e565b81810360408301526135b08185612ab6565b90506135bf6060830184612b4e565b95945050505050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b60006135fe601283612edd565b9150613609826135c8565b602082019050919050565b6000602082019050818103600083015261362d816135f1565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b600061366a600f83612edd565b915061367582613634565b602082019050919050565b600060208201905081810360008301526136998161365d565b9050919050565b60006040820190506136b56000830185612b5d565b6136c26020830184612b4e565b9392505050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b60006136ff601383612edd565b915061370a826136c9565b602082019050919050565b6000602082019050818103600083015261372e816136f2565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b600061376b601483612edd565b915061377682613735565b602082019050919050565b6000602082019050818103600083015261379a8161375e565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b60006137d7601283612edd565b91506137e2826137a1565b602082019050919050565b60006020820190508181036000830152613806816137ca565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b6000613843601883612edd565b915061384e8261380d565b602082019050919050565b6000602082019050818103600083015261387281613836565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b60006138af601b83612edd565b91506138ba82613879565b602082019050919050565b600060208201905081810360008301526138de816138a2565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b600061392c8261390b565b6139368185613916565b9350613946818560208601612a7b565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b60006139ae603783613916565b91506139b982613952565b603782019050919050565b60006139cf826138e5565b6003820191506139df8284613921565b91506139ea826139a1565b915081905092915050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b6000613a2b601783612edd565b9150613a36826139f5565b602082019050919050565b60006020820190508181036000830152613a5a81613a1e565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b6000613a97601183612edd565b9150613aa282613a61565b602082019050919050565b60006020820190508181036000830152613ac681613a8a565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b6000613b03601183612edd565b9150613b0e82613acd565b602082019050919050565b60006020820190508181036000830152613b3281613af6565b9050919050565b7f426574206e6f74204f70656e0000000000000000000000000000000000000000600082015250565b6000613b6f600c83612edd565b9150613b7a82613b39565b602082019050919050565b60006020820190508181036000830152613b9e81613b62565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b6000613bdb601083612edd565b9150613be682613ba5565b602082019050919050565b60006020820190508181036000830152613c0a81613bce565b9050919050565b6000608082019050613c266000830187612b5d565b613c3360208301866134d1565b613c406040830185612b4e565b8181036060830152613c528184612ab6565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b6000613c93601183612edd565b9150613c9e82613c5d565b602082019050919050565b60006020820190508181036000830152613cc281613c86565b9050919050565b600080fd5b600081519050613cdd816128ad565b92915050565b6000613cee8261289b565b9050919050565b613cfe81613ce3565b8114613d0957600080fd5b50565b600081519050613d1b81613cf5565b92915050565b600060e08284031215613d3757613d36613cc9565b5b613d4160e0612d73565b90506000613d518482850161308f565b6000830152506020613d658482850161308f565b6020830152506040613d798482850161308f565b6040830152506060613d8d8482850161308f565b6060830152506080613da18482850161308f565b60808301525060a0613db58482850161353a565b60a08301525060c0613dc98482850161353a565b60c08301525092915050565b613dde81612ea9565b8114613de957600080fd5b50565b600081519050613dfb81613dd5565b92915050565b60006102008284031215613e1857613e17613cc9565b5b613e23610140612d73565b90506000613e3384828501613cce565b6000830152506020613e4784828501613cce565b6020830152506040613e5b84828501613d0c565b6040830152506060613e6f8482850161308f565b6060830152506080613e8384828501613d21565b608083015250610160613e9884828501613dec565b60a083015250610180613ead84828501613dec565b60c0830152506101a0613ec28482850161353a565b60e0830152506101c0613ed78482850161353a565b610100830152506101e0613eed8482850161353a565b6101208301525092915050565b60006102008284031215613f1157613f1061280c565b5b6000613f1f84828501613e01565b9150509291505056fea2646970667358221220f8d23dcf1d602a751718c424accfce3cca8654e80355fee91b53b6db9890757b64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638068aa68116100715780638068aa6814610182578063b3580c1e146101b2578063c511a074146101e2578063d247f92b146101fe578063dc60054e1461021a578063e5da66af14610236576100b4565b80630de2f6ba146100b957806322af00fa146100d557806327bce91b146101105780632adb9e3c1461012e578063357401f51461014a578063677bd9ff14610166575b600080fd5b6100d360048036038101906100ce9190612947565b610266565b005b6100ef60048036038101906100ea9190612a32565b61089d565b6040516101079c9b9a99989796959493929190612bf2565b60405180910390f35b610118610a1f565b6040516101259190612cb3565b60405180910390f35b61014860048036038101906101439190612a32565b610a25565b005b610164600480360381019061015f9190612a32565b610e97565b005b610180600480360381019061017b9190612a32565b6111d6565b005b61019c60048036038101906101979190612cce565b61174d565b6040516101a99190612cb3565b60405180910390f35b6101cc60048036038101906101c79190612e3e565b61177e565b6040516101d99190612e87565b60405180910390f35b6101fc60048036038101906101f79190612a32565b6117ad565b005b61021860048036038101906102139190612a32565b611e31565b005b610234600480360381019061022f9190612a32565b6121a7565b005b610250600480360381019061024b9190612a32565b6125d1565b60405161025d9190612ec2565b60405180910390f35b6002600054036102ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a290612f3a565b60405180910390fd5b60026000819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031890612fa6565b60405180910390fd5b600115158515150361039d57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390613038565b60405180910390fd5b5b60006103ec8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061177e565b9050600089905060008060008060011515891515036104135733935087925086905061041d565b3391508790508692505b600115158b15150361046c573373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610465578993508361046a565b899150815b505b60006040518061018001604052808881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018e81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018d151581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160035481526020016000600581111561052c5761052b612b7b565b5b81525090508573ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b815260040161056e93929190613058565b6020604051808303816000875af115801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b191906130a4565b50866040516105c0919061310d565b60405180910390208f73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312377a74e3b2d3c110c0a87dc9a32bdfe8152f1163bc6ebbf8549394889ddfd6003546040516106279190612cb3565b60405180910390a480600460006003548152602001908152602001600020600082015181600001908161065a9190613326565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601556101008201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101208201518160080155610140820151816009015561016082015181600a0160006101000a81548160ff021916908360058111156107f8576107f7612b7b565b5b0217905550905050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600354908060018154018082558091505060019003906000526020600020016000909190919091505560016003600082825461087b9190613427565b9250508190555050505050505050600160008190555050505050505050505050565b60046020528060005260406000206000915090508060000180546108c090613153565b80601f01602080910402602001604051908101604052809291908181526020018280546108ec90613153565b80156109395780601f1061090e57610100808354040283529160200191610939565b820191906000526020600020905b81548152906001019060200180831161091c57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600801549080600901549080600a0160009054906101000a900460ff1690508c565b60035481565b600060046000838152602001908152602001600020905060016005811115610a5057610a4f612b7b565b5b81600a0160009054906101000a900460ff166005811115610a7457610a73612b7b565b5b14610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab906134a7565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b6157503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610b6a57600080fd5b6000816000018054610b7b90613153565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba790613153565b8015610bf45780601f10610bc957610100808354040283529160200191610bf4565b820191906000526020600020905b815481529060010190602001808311610bd757829003601f168201915b505050505090504260028190555060008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083600201549050600084600301549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b8152600401610cc29594939291906134e0565b6020604051808303816000875af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d05919061354f565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b8152600401610d89949392919061357c565b600060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b50505050600285600a0160006101000a81548160ff02191690836005811115610de357610de2612b7b565b5b021790555084600901548560070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a4505050505050565b600260005403610edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed390612f3a565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000806005811115610f1057610f0f612b7b565b5b82600a0160009054906101000a900460ff166005811115610f3457610f33612b7b565b5b14610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b90613614565b60405180910390fd5b8160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffd90613680565b60405180910390fd5b8160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361108d5781600601549050611095565b816008015490505b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016111189291906136a0565b6020604051808303816000875af1158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b91906130a4565b50808260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600901547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a45050600160008190555050565b60026000540361121b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121290612f3a565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000816008015482600601546112509190613427565b9050600061125d846125d1565b90506003600581111561127357611272612b7b565b5b83600a0160009054906101000a900460ff16600581111561129757611296612b7b565b5b146112d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ce90613715565b60405180910390fd5b8260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061138457508260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6113c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ba90613781565b60405180910390fd5b670de0b6b3a76400008114806113d95750600081145b611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f906137ed565b60405180910390fd5b670de0b6b3a76400008103611585578260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b090613859565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161153c9291906136a0565b6020604051808303816000875af115801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f91906130a4565b506116df565b8260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160e906138c5565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161169a9291906136a0565b6020604051808303816000875af11580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd91906130a4565b505b600483600a0160006101000a81548160ff0219169083600581111561170757611706612b7b565b5b0217905550808284600901547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a4505050600160008190555050565b6005602052816000526040600020818154811061176957600080fd5b90600052602060002001600091509150505481565b606060008260405160200161179391906139c4565b604051602081830303815290604052905080915050919050565b6002600054036117f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e990612f3a565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036118a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189a90613a41565b60405180910390fd5b600015158160040160149054906101000a900460ff161515036119b357600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061196f5750600073ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6119ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a590613aad565b60405180910390fd5b611aa0565b8060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611a6057508060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9690613b19565b60405180910390fd5b5b60006005811115611ab457611ab3612b7b565b5b81600a0160009054906101000a900460ff166005811115611ad857611ad7612b7b565b5b14611b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0f90613b85565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611c61578060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600601546040518463ffffffff1660e01b8152600401611bd593929190613058565b6020604051808303816000875af1158015611bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1891906130a4565b50338160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d4e565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600801546040518463ffffffff1660e01b8152600401611cc693929190613058565b6020604051808303816000875af1158015611ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0991906130a4565b50338160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600181600a0160006101000a81548160ff02191690836005811115611ddc57611ddb612b7b565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350600160008190555050565b600060046000838152602001908152602001600020905060026005811115611e5c57611e5b612b7b565b5b81600a0160009054906101000a900460ff166005811115611e8057611e7f612b7b565b5b14611ec0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb790613bf1565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611f6d57503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611f7657600080fd5b6000816000018054611f8790613153565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb390613153565b80156120005780601f10611fd557610100808354040283529160200191612000565b820191906000526020600020905b815481529060010190602001808311611fe357829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b815260040161208a9493929190613c11565b6020604051808303816000875af11580156120a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cd919061354f565b50600382600a0160006101000a81548160ff021916908360058111156120f6576120f5612b7b565b5b021790555081600901548260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a4505050565b6002600054036121ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e390612f3a565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000612216836125d1565b90506003600581111561222c5761222b612b7b565b5b82600a0160009054906101000a900460ff1660058111156122505761224f612b7b565b5b14612290576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228790613715565b60405180910390fd5b8160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061233d57508160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61237c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237390613781565b60405180910390fd5b671bc16d674ec8000081146123c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bd90613ca9565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600601546040518363ffffffff1660e01b815260040161244d9291906136a0565b6020604051808303816000875af115801561246c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249091906130a4565b508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600801546040518363ffffffff1660e01b81526004016125189291906136a0565b6020604051808303816000875af1158015612537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255b91906130a4565b50600582600a0160006101000a81548160ff0219169083600581111561258457612583612b7b565b5b02179055508160080154826006015483600901547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a45050600160008190555050565b6000806004600084815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061269657503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61269f57600080fd5b60008160000180546126b090613153565b80601f01602080910402602001604051908101604052809291908181526020018280546126dc90613153565b80156127295780601f106126fe57610100808354040283529160200191612729565b820191906000526020600020905b81548152906001019060200180831161270c57829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b81526004016127b39493929190613c11565b61020060405180830381865afa1580156127d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f59190613efa565b60c0015192505050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261283b5761283a612816565b5b8235905067ffffffffffffffff8111156128585761285761281b565b5b60208301915083600182028301111561287457612873612820565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128a68261287b565b9050919050565b6128b68161289b565b81146128c157600080fd5b50565b6000813590506128d3816128ad565b92915050565b6000819050919050565b6128ec816128d9565b81146128f757600080fd5b50565b600081359050612909816128e3565b92915050565b60008115159050919050565b6129248161290f565b811461292f57600080fd5b50565b6000813590506129418161291b565b92915050565b6000806000806000806000806000806101208b8d03121561296b5761296a61280c565b5b60008b013567ffffffffffffffff81111561298957612988612811565b5b6129958d828e01612825565b9a509a505060206129a88d828e016128c4565b98505060406129b98d828e016128fa565b97505060606129ca8d828e016128fa565b96505060806129db8d828e01612932565b95505060a06129ec8d828e016128c4565b94505060c06129fd8d828e01612932565b93505060e0612a0e8d828e016128fa565b925050610100612a208d828e016128fa565b9150509295989b9194979a5092959850565b600060208284031215612a4857612a4761280c565b5b6000612a56848285016128fa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612a99578082015181840152602081019050612a7e565b60008484015250505050565b6000601f19601f8301169050919050565b6000612ac182612a5f565b612acb8185612a6a565b9350612adb818560208601612a7b565b612ae481612aa5565b840191505092915050565b6000819050919050565b6000612b14612b0f612b0a8461287b565b612aef565b61287b565b9050919050565b6000612b2682612af9565b9050919050565b6000612b3882612b1b565b9050919050565b612b4881612b2d565b82525050565b612b57816128d9565b82525050565b612b668161289b565b82525050565b612b758161290f565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110612bbb57612bba612b7b565b5b50565b6000819050612bcc82612baa565b919050565b6000612bdc82612bbe565b9050919050565b612bec81612bd1565b82525050565b6000610180820190508181036000830152612c0d818f612ab6565b9050612c1c602083018e612b3f565b612c29604083018d612b4e565b612c36606083018c612b4e565b612c43608083018b612b5d565b612c5060a083018a612b6c565b612c5d60c0830189612b5d565b612c6a60e0830188612b4e565b612c78610100830187612b5d565b612c86610120830186612b4e565b612c94610140830185612b4e565b612ca2610160830184612be3565b9d9c50505050505050505050505050565b6000602082019050612cc86000830184612b4e565b92915050565b60008060408385031215612ce557612ce461280c565b5b6000612cf3858286016128c4565b9250506020612d04858286016128fa565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d4b82612aa5565b810181811067ffffffffffffffff82111715612d6a57612d69612d13565b5b80604052505050565b6000612d7d612802565b9050612d898282612d42565b919050565b600067ffffffffffffffff821115612da957612da8612d13565b5b612db282612aa5565b9050602081019050919050565b82818337600083830152505050565b6000612de1612ddc84612d8e565b612d73565b905082815260208101848484011115612dfd57612dfc612d0e565b5b612e08848285612dbf565b509392505050565b600082601f830112612e2557612e24612816565b5b8135612e35848260208601612dce565b91505092915050565b600060208284031215612e5457612e5361280c565b5b600082013567ffffffffffffffff811115612e7257612e71612811565b5b612e7e84828501612e10565b91505092915050565b60006020820190508181036000830152612ea18184612ab6565b905092915050565b6000819050919050565b612ebc81612ea9565b82525050565b6000602082019050612ed76000830184612eb3565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612f24601f83612edd565b9150612f2f82612eee565b602082019050919050565b60006020820190508181036000830152612f5381612f17565b9050919050565b7f43616e27742062657420796f757273656c660000000000000000000000000000600082015250565b6000612f90601283612edd565b9150612f9b82612f5a565b602082019050919050565b60006020820190508181036000830152612fbf81612f83565b9050919050565b7f507269766174652062657473206d75737420686176652061207265636970696560008201527f6e74000000000000000000000000000000000000000000000000000000000000602082015250565b6000613022602283612edd565b915061302d82612fc6565b604082019050919050565b6000602082019050818103600083015261305181613015565b9050919050565b600060608201905061306d6000830186612b5d565b61307a6020830185612b5d565b6130876040830184612b4e565b949350505050565b60008151905061309e8161291b565b92915050565b6000602082840312156130ba576130b961280c565b5b60006130c88482850161308f565b91505092915050565b600081905092915050565b60006130e782612a5f565b6130f181856130d1565b9350613101818560208601612a7b565b80840191505092915050565b600061311982846130dc565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061316b57607f821691505b60208210810361317e5761317d613124565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026131e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826131a9565b6131f086836131a9565b95508019841693508086168417925050509392505050565b600061322361321e613219846128d9565b612aef565b6128d9565b9050919050565b6000819050919050565b61323d83613208565b6132516132498261322a565b8484546131b6565b825550505050565b600090565b613266613259565b613271818484613234565b505050565b5b818110156132955761328a60008261325e565b600181019050613277565b5050565b601f8211156132da576132ab81613184565b6132b484613199565b810160208510156132c3578190505b6132d76132cf85613199565b830182613276565b50505b505050565b600082821c905092915050565b60006132fd600019846008026132df565b1980831691505092915050565b600061331683836132ec565b9150826002028217905092915050565b61332f82612a5f565b67ffffffffffffffff81111561334857613347612d13565b5b6133528254613153565b61335d828285613299565b600060209050601f831160018114613390576000841561337e578287015190505b613388858261330a565b8655506133f0565b601f19841661339e86613184565b60005b828110156133c6578489015182556001820191506020850194506020810190506133a1565b868310156133e357848901516133df601f8916826132ec565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613432826128d9565b915061343d836128d9565b9250828201905080821115613455576134546133f8565b5b92915050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b6000613491601b83612edd565b915061349c8261345b565b602082019050919050565b600060208201905081810360008301526134c081613484565b9050919050565b6000819050919050565b6134da816134c7565b82525050565b600060a0820190506134f560008301886134d1565b6135026020830187612b4e565b81810360408301526135148186612ab6565b90506135236060830185612b3f565b6135306080830184612b4e565b9695505050505050565b600081519050613549816128e3565b92915050565b6000602082840312156135655761356461280c565b5b60006135738482850161353a565b91505092915050565b600060808201905061359160008301876134d1565b61359e6020830186612b4e565b81810360408301526135b08185612ab6565b90506135bf6060830184612b4e565b95945050505050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b60006135fe601283612edd565b9150613609826135c8565b602082019050919050565b6000602082019050818103600083015261362d816135f1565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b600061366a600f83612edd565b915061367582613634565b602082019050919050565b600060208201905081810360008301526136998161365d565b9050919050565b60006040820190506136b56000830185612b5d565b6136c26020830184612b4e565b9392505050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b60006136ff601383612edd565b915061370a826136c9565b602082019050919050565b6000602082019050818103600083015261372e816136f2565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b600061376b601483612edd565b915061377682613735565b602082019050919050565b6000602082019050818103600083015261379a8161375e565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b60006137d7601283612edd565b91506137e2826137a1565b602082019050919050565b60006020820190508181036000830152613806816137ca565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b6000613843601883612edd565b915061384e8261380d565b602082019050919050565b6000602082019050818103600083015261387281613836565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b60006138af601b83612edd565b91506138ba82613879565b602082019050919050565b600060208201905081810360008301526138de816138a2565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b600061392c8261390b565b6139368185613916565b9350613946818560208601612a7b565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b60006139ae603783613916565b91506139b982613952565b603782019050919050565b60006139cf826138e5565b6003820191506139df8284613921565b91506139ea826139a1565b915081905092915050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b6000613a2b601783612edd565b9150613a36826139f5565b602082019050919050565b60006020820190508181036000830152613a5a81613a1e565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b6000613a97601183612edd565b9150613aa282613a61565b602082019050919050565b60006020820190508181036000830152613ac681613a8a565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b6000613b03601183612edd565b9150613b0e82613acd565b602082019050919050565b60006020820190508181036000830152613b3281613af6565b9050919050565b7f426574206e6f74204f70656e0000000000000000000000000000000000000000600082015250565b6000613b6f600c83612edd565b9150613b7a82613b39565b602082019050919050565b60006020820190508181036000830152613b9e81613b62565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b6000613bdb601083612edd565b9150613be682613ba5565b602082019050919050565b60006020820190508181036000830152613c0a81613bce565b9050919050565b6000608082019050613c266000830187612b5d565b613c3360208301866134d1565b613c406040830185612b4e565b8181036060830152613c528184612ab6565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b6000613c93601183612edd565b9150613c9e82613c5d565b602082019050919050565b60006020820190508181036000830152613cc281613c86565b9050919050565b600080fd5b600081519050613cdd816128ad565b92915050565b6000613cee8261289b565b9050919050565b613cfe81613ce3565b8114613d0957600080fd5b50565b600081519050613d1b81613cf5565b92915050565b600060e08284031215613d3757613d36613cc9565b5b613d4160e0612d73565b90506000613d518482850161308f565b6000830152506020613d658482850161308f565b6020830152506040613d798482850161308f565b6040830152506060613d8d8482850161308f565b6060830152506080613da18482850161308f565b60808301525060a0613db58482850161353a565b60a08301525060c0613dc98482850161353a565b60c08301525092915050565b613dde81612ea9565b8114613de957600080fd5b50565b600081519050613dfb81613dd5565b92915050565b60006102008284031215613e1857613e17613cc9565b5b613e23610140612d73565b90506000613e3384828501613cce565b6000830152506020613e4784828501613cce565b6020830152506040613e5b84828501613d0c565b6040830152506060613e6f8482850161308f565b6060830152506080613e8384828501613d21565b608083015250610160613e9884828501613dec565b60a083015250610180613ead84828501613dec565b60c0830152506101a0613ec28482850161353a565b60e0830152506101c0613ed78482850161353a565b610100830152506101e0613eed8482850161353a565b6101208301525092915050565b60006102008284031215613f1157613f1061280c565b5b6000613f1f84828501613e01565b9150509291505056fea2646970667358221220f8d23dcf1d602a751718c424accfce3cca8654e80355fee91b53b6db9890757b64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 515,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "oo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(OptimisticOracleV2Interface)503"
      },
      {
        "astId": 518,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "requestTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 623,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 628,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "bets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Bet)557_storage)"
      },
      {
        "astId": 633,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "userBets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)117": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(OptimisticOracleV2Interface)503": {
        "encoding": "inplace",
        "label": "contract OptimisticOracleV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)564": {
        "encoding": "inplace",
        "label": "enum OO_BetHandler.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bet)557_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)557_storage"
      },
      "t_struct(Bet)557_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.Bet",
        "members": [
          {
            "astId": 532,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "question",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 535,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "bondCurrency",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)117"
          },
          {
            "astId": 537,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 539,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "liveness",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 541,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 543,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "privateBet",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 545,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmation",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 547,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 549,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negation",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 551,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 553,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 556,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betStatus",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(BetStatus)564"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}