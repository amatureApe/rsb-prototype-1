{
  "address": "0xC35B78BFd3838dCc32a73E003eBdCEDEd020f294",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        }
      ],
      "name": "BetCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "affirmationRefund",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "negationRefund",
          "type": "uint256"
        }
      ],
      "name": "BetKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "BetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "winner",
          "type": "int256"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "affirmationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "negationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "negationAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "privateBet",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liveness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "imgUrl",
          "type": "bytes"
        },
        {
          "internalType": "enum OO_BetHandler.BetStatus",
          "name": "betStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "cancelBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "claimWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        }
      ],
      "name": "createQuestion",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getHashId",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "getSettledData",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "hashIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "killBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_affirmation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_affirmationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_negation",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_negationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_negationAmount",
          "type": "uint256"
        }
      ],
      "name": "loadBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "requestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_question",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_bondCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liveness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_privateBet",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_imgUrl",
          "type": "bytes"
        }
      ],
      "name": "setBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "settleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        }
      ],
      "name": "stringDecode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_string",
          "type": "string"
        }
      ],
      "name": "stringEncode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x008dfb82415fabb0178be54c3e7ca060acd09708a358176be1c700621c208f08",
  "receipt": {
    "to": null,
    "from": "0x4204FDD868FFe0e62F57e6A626F8C9530F7d5AD1",
    "contractAddress": "0xC35B78BFd3838dCc32a73E003eBdCEDEd020f294",
    "transactionIndex": 77,
    "gasUsed": "4275845",
    "logsBloom": "0x
    "blockHash": "0x57aeb966e6eab3abe1794d7c86cc891c895b2909b4463e7a7131ed48c59d0ab2",
    "transactionHash": "0x008dfb82415fabb0178be54c3e7ca060acd09708a358176be1c700621c208f08",
    "logs": [],
    "blockNumber": 8132277,
    "cumulativeGasUsed": "22543929",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "a854de33c0474ab0f0a5c39b47bdda41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"BetCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"affirmationRefund\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"negationRefund\",\"type\":\"uint256\"}],\"name\":\"BetKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"BetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"winner\",\"type\":\"int256\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"affirmationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"negationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"negationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateBet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"imgUrl\",\"type\":\"bytes\"},{\"internalType\":\"enum OO_BetHandler.BetStatus\",\"name\":\"betStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"}],\"name\":\"createQuestion\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getHashId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"getSettledData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"hashIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"killBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_affirmation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_affirmationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_negation\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_negationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_negationAmount\",\"type\":\"uint256\"}],\"name\":\"loadBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_question\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_bondCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_privateBet\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_imgUrl\",\"type\":\"bytes\"}],\"name\":\"setBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"settleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"}],\"name\":\"stringDecode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"stringEncode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OO_BetHandler.sol\":\"OO_BetHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleV2Interface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    struct RequestSettings {\\n        bool eventBased; // True if the request is set to be event-based.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\n     * @dev Calling this method has a few impacts on the request:\\n     *\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\n     *    with the request.\\n     *\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\n     *    prematurely proposes a response loses their bond.\\n     *\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\n     *    the requesting contract.\\n     *\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setEventBased(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets which callbacks should be enabled for the request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\n     */\\n    function setCallbacks(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        bool callbackOnPriceProposed,\\n        bool callbackOnPriceDisputed,\\n        bool callbackOnPriceSettled\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbfd9778b3e7c86e149cc140eda5e7210ef4a604cde576abaaa46c1289c5e334f\",\"license\":\"AGPL-3.0-only\"},\"contracts/OO_BetHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract OO_BetHandler is ReentrancyGuard {\\n    OptimisticOracleV2Interface oo =\\n        OptimisticOracleV2Interface(0xA5B9d8a0B0Fa04Ba71BDD68069661ED5C0848884);\\n\\n    uint256 requestTime = 0; // Store the request time so we can re-use it later.\\n    bytes32 constant IDENTIFIER = bytes32(\\\"YES_OR_NO_QUERY\\\"); // Use the yes no idetifier to ask arbitary questions, such as the weather on a particular day.\\n    address constant ZERO_ADDRESS = address(0);\\n    // 0x0000000000000000000000000000000000000000\\n    //\\n\\n    struct Bet {\\n        uint256 betId;\\n        bytes question;\\n        uint256 expiry;\\n        IERC20 bondCurrency;\\n        address creator;\\n        bool privateBet;\\n        uint256 liveness;\\n        uint256 reward;\\n        bytes imgUrl;\\n        BetStatus betStatus;\\n    }\\n\\n    struct BetAmount {\\n        uint256 betId;\\n        address affirmation; // Address of the side of the bet that affirms the question.\\n        IERC20 affirmationToken;\\n        uint256 affirmationAmount; // Amount deposited into the bet by the affrimation.\\n        address negation; // Address of the side of the bet that negates the question.\\n        IERC20 negationToken;\\n        uint256 negationAmount; // Amount deposited into the bet by the negation.\\n    }\\n\\n    enum BetStatus {\\n        LOADING,\\n        OPEN,\\n        ACTIVE,\\n        SETTLING,\\n        SETTLED,\\n        CLAIMED,\\n        DEAD\\n    }\\n\\n    // ******** EVENTS ************\\n\\n    event BetSet(\\n        address indexed creator,\\n        uint256 indexed betId,\\n        bytes indexed ancillaryData\\n    );\\n\\n    event BetTaken(address indexed taker, uint256 indexed betId);\\n\\n    event DataRequested(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event BetSettled(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event WinningsClaimed(\\n        uint256 indexed betId,\\n        uint256 indexed totalWinnings,\\n        int256 indexed winner\\n    );\\n\\n    event BetCanceled(\\n        uint256 indexed betId,\\n        address indexed bondCurrency,\\n        uint256 indexed refundAmount\\n    );\\n\\n    event BetKilled(\\n        uint256 indexed betId,\\n        uint256 indexed affirmationRefund,\\n        uint256 indexed negationRefund\\n    );\\n\\n    uint256 public betId = 0; // latest global betId for all managed bets.\\n    mapping(uint256 => Bet) public bets; // All bets mapped by their betId\\n    mapping(bytes => uint256) public hashIds; // A hash of bet question, msg.sender, and timestamp to betId\\n    mapping(uint256 => BetAmount) public betAmounts; // All bet amounts mapped by their betId.\\n    mapping(address => uint256[]) public userBets; // All bets the user is and has participated in.\\n\\n    // ********* MUTATIVE FUNCTIONS *************\\n\\n    function setBet(\\n        bytes calldata _question,\\n        uint256 _expiry,\\n        IERC20 _bondCurrency,\\n        uint256 _liveness,\\n        uint256 _reward,\\n        bool _privateBet,\\n        bytes calldata _imgUrl\\n    ) public nonReentrant {\\n        Bet memory bet = Bet(\\n            betId,\\n            _question,\\n            _expiry,\\n            _bondCurrency,\\n            msg.sender,\\n            _privateBet,\\n            _liveness,\\n            _reward,\\n            _imgUrl,\\n            BetStatus.LOADING\\n        );\\n\\n        bytes memory hashId = abi.encode(\\n            _question,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        emit BetSet(msg.sender, betId, _question);\\n\\n        bets[betId] = bet;\\n        hashIds[hashId] = betId;\\n        userBets[msg.sender].push(betId);\\n        betId += 1;\\n    }\\n\\n    function loadBet(\\n        uint256 _betId,\\n        address _affirmation,\\n        IERC20 _affirmationToken,\\n        uint256 _affirmationAmount,\\n        address _negation,\\n        IERC20 _negationToken,\\n        uint256 _negationAmount\\n    ) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        require(msg.sender == bet.creator, \\\"not creator\\\");\\n        require(\\n            bet.creator == _affirmation || bet.creator == _negation,\\n            \\\"must be participant\\\"\\n        );\\n        require(_affirmation != _negation, \\\"must have separate parties\\\");\\n        require(bet.betStatus == BetStatus.LOADING, \\\"not loading\\\");\\n\\n        BetAmount memory betAmount = BetAmount(\\n            _betId,\\n            _affirmation,\\n            _affirmationToken,\\n            _affirmationAmount,\\n            _negation,\\n            _negationToken,\\n            _negationAmount\\n        );\\n\\n        // Make sure to approve this contract to spend your ERC20 externally first\\n        if (msg.sender == _affirmation) {\\n            _affirmationToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _affirmationAmount\\n            );\\n        } else if (msg.sender == _negation) {\\n            _negationToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _negationAmount\\n            );\\n        }\\n\\n        betAmounts[_betId] = betAmount;\\n        bet.betStatus = BetStatus.OPEN;\\n    }\\n\\n    function takeBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(msg.sender != bet.creator, \\\"Can't take your own bet\\\");\\n        if (bet.privateBet == false) {\\n            require(\\n                betAmount.affirmation == ZERO_ADDRESS ||\\n                    betAmount.negation == ZERO_ADDRESS,\\n                \\\"Bet already taken\\\"\\n            );\\n        } else {\\n            require(\\n                msg.sender == betAmount.affirmation ||\\n                    msg.sender == betAmount.negation,\\n                \\\"Not bet recipient\\\"\\n            );\\n        }\\n        require(bet.betStatus == BetStatus.OPEN, \\\"not Open\\\");\\n\\n        if (betAmount.affirmation == ZERO_ADDRESS) {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                betAmount.affirmationAmount\\n            );\\n            betAmount.affirmation = msg.sender;\\n        } else {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                betAmount.negationAmount\\n            );\\n            betAmount.negation = msg.sender;\\n        }\\n\\n        userBets[msg.sender].push(_betId);\\n        bet.betStatus = BetStatus.ACTIVE;\\n\\n        emit BetTaken(msg.sender, _betId);\\n    }\\n\\n    function requestData(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(\\n            bet.betStatus == BetStatus.ACTIVE,\\n            \\\"Bet not ready to be settled\\\"\\n        );\\n        require(\\n            betAmount.affirmation == msg.sender ||\\n                betAmount.negation == msg.sender\\n        );\\n\\n        bytes memory ancillaryData = bet.question; // Question to ask the UMA Oracle.\\n\\n        requestTime = block.timestamp; // Set the request time to the current block time.\\n        IERC20 bondCurrency = IERC20(bet.bondCurrency); // Use preferred token as the bond currency.\\n        uint256 reward = bet.reward; // Set the reward amount for UMA Oracle.\\n\\n        // Set liveness for request disputes measured in seconds. Recommended time is at least 7200 (2 hours).\\n        // Users should increase liveness time depending on various factors such as amount of funds being handled\\n        // and risk of malicious acts.\\n        uint256 liveness = bet.liveness;\\n\\n        // Now, make the price request to the Optimistic oracle with preferred inputs.\\n        oo.requestPrice(\\n            IDENTIFIER,\\n            requestTime,\\n            ancillaryData,\\n            bondCurrency,\\n            reward\\n        );\\n        oo.setCustomLiveness(IDENTIFIER, requestTime, ancillaryData, liveness);\\n\\n        bet.betStatus = BetStatus.SETTLING;\\n        emit DataRequested(\\n            betAmount.affirmation,\\n            betAmount.negation,\\n            betAmount.betId\\n        );\\n    }\\n\\n    // Settle the request once it's gone through the liveness period of 30 seconds. This acts the finalize the voted on price.\\n    // In a real world use of the Optimistic Oracle this should be longer to give time to disputers to catch bat price proposals.\\n    function settleRequest(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(bet.betStatus == BetStatus.SETTLING, \\\"Bet not settling\\\");\\n        require(\\n            betAmount.affirmation == msg.sender ||\\n                betAmount.negation == msg.sender\\n        );\\n\\n        bytes memory ancillaryData = bet.question;\\n\\n        oo.settle(address(this), IDENTIFIER, requestTime, ancillaryData);\\n        bet.betStatus = BetStatus.SETTLED;\\n\\n        emit BetSettled(\\n            betAmount.affirmation,\\n            betAmount.negation,\\n            betAmount.betId\\n        );\\n    }\\n\\n    function claimWinnings(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        uint256 totalWinnings = betAmount.affirmationAmount +\\n            betAmount.negationAmount;\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == betAmount.affirmation ||\\n                msg.sender == betAmount.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(\\n            settlementData == 1e18 || settlementData == 0,\\n            \\\"Invalid settlement\\\"\\n        );\\n        if (settlementData == 1e18) {\\n            require(\\n                msg.sender == betAmount.affirmation,\\n                \\\"Negation did not win bet\\\"\\n            );\\n            bet.bondCurrency.transfer(betAmount.affirmation, totalWinnings);\\n        } else {\\n            require(\\n                msg.sender == betAmount.negation,\\n                \\\"Affirmation did not win bet\\\"\\n            );\\n            bet.bondCurrency.transfer(betAmount.negation, totalWinnings);\\n        }\\n\\n        bet.betStatus = BetStatus.CLAIMED;\\n\\n        emit WinningsClaimed(bet.betId, totalWinnings, settlementData);\\n    }\\n\\n    function cancelBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        uint256 refundAmount;\\n        require(\\n            bet.betStatus == BetStatus.LOADING ||\\n                bet.betStatus == BetStatus.OPEN,\\n            \\\"Bet already active\\\"\\n        );\\n        require(msg.sender == bet.creator, \\\"Not bet creator\\\");\\n\\n        if (bet.creator == betAmount.affirmation) {\\n            refundAmount = betAmount.affirmationAmount;\\n        } else {\\n            refundAmount = betAmount.negationAmount;\\n        }\\n\\n        bet.bondCurrency.transfer(bet.creator, refundAmount);\\n\\n        emit BetCanceled(bet.betId, address(bet.bondCurrency), refundAmount);\\n    }\\n\\n    function killBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == betAmount.affirmation ||\\n                msg.sender == betAmount.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(settlementData == 2 * 1e18, \\\"Bet is settleable\\\");\\n        bet.bondCurrency.transfer(\\n            betAmount.affirmation,\\n            betAmount.affirmationAmount\\n        );\\n        bet.bondCurrency.transfer(betAmount.negation, betAmount.negationAmount);\\n\\n        bet.betStatus = BetStatus.DEAD;\\n\\n        emit BetKilled(\\n            betAmount.betId,\\n            betAmount.affirmationAmount,\\n            betAmount.negationAmount\\n        );\\n    }\\n\\n    //******* VIEW FUNCTIONS ***********\\n    function createQuestion(string memory _question)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory question = bytes(\\n            string.concat(\\n                \\\"Q: \\\",\\n                _question,\\n                \\\"? --- A:1 for yes. 0 for no. 2 for ambiguous/unknowable\\\"\\n            )\\n        );\\n        return question;\\n    }\\n\\n    // Fetch the resolved price from the Optimistic Oracle that was settled.\\n    function getSettledData(uint256 _betId) public view returns (int256) {\\n        Bet storage bet = bets[_betId];\\n        BetAmount storage betAmount = betAmounts[_betId];\\n        require(\\n            betAmount.affirmation == msg.sender ||\\n                betAmount.negation == msg.sender\\n        );\\n\\n        return\\n            oo\\n                .getRequest(\\n                    address(this),\\n                    IDENTIFIER,\\n                    requestTime,\\n                    bet.question\\n                )\\n                .resolvedPrice;\\n    }\\n\\n    function getHashId(bytes calldata _question, uint256 timestamp)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        return abi.encode(_question, msg.sender, timestamp);\\n    }\\n\\n    function stringEncode(string calldata _string)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return bytes(_string);\\n    }\\n\\n    function stringDecode(bytes calldata _bytes)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return string(_bytes);\\n    }\\n}\\n\",\"keccak256\":\"0x613c85855c6f1609be57e05fc9ba5e25f34f73aeb3086dce62be6cc37ab5371c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405273a5b9d8a0b0fa04ba71bdd68069661ed5c0848884600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600255600060035534801561006f57600080fd5b506001600081905550614bba806100876000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063677bd9ff116100a2578063b3580c1e11610071578063b3580c1e14610324578063c511a07414610354578063d247f92b14610370578063dc60054e1461038c578063e5da66af146103a857610116565b8063677bd9ff14610272578063744104291461028e5780638068aa68146102c4578063945e5a42146102f457610116565b80633268fc8a116100e95780633268fc8a146101be578063357401f5146101da57806345b7c1c1146101f657806346049d54146102265780635fb5a70d1461024257610116565b806306c66b851461011b57806322af00fa1461014b57806327bce91b146101845780632adb9e3c146101a2575b600080fd5b61013560048036038101906101309190612f0f565b6103d8565b6040516101429190612fec565b60405180910390f35b61016560048036038101906101609190613044565b610427565b60405161017b9a99989796959493929190613207565b60405180910390f35b61018c6105e5565b60405161019991906132b1565b60405180910390f35b6101bc60048036038101906101b79190613044565b6105eb565b005b6101d860048036038101906101d39190613336565b610a75565b005b6101f460048036038101906101ef9190613044565b611087565b005b610210600480360381019061020b919061342e565b6113d9565b60405161021d919061347b565b60405180910390f35b610240600480360381019061023b91906134c9565b611428565b005b61025c600480360381019061025791906136db565b6117d6565b60405161026991906132b1565b60405180910390f35b61028c60048036038101906102879190613044565b611804565b005b6102a860048036038101906102a39190613044565b611d4e565b6040516102bb9796959493929190613724565b60405180910390f35b6102de60048036038101906102d99190613793565b611e10565b6040516102eb91906132b1565b60405180910390f35b61030e600480360381019061030991906137d3565b611e41565b60405161031b919061347b565b60405180910390f35b61033e600480360381019061033991906138d4565b611e72565b60405161034b919061347b565b60405180910390f35b61036e60048036038101906103699190613044565b611ea1565b005b61038a60048036038101906103859190613044565b6124f8565b005b6103a660048036038101906103a19190613044565b612886565b005b6103c260048036038101906103bd9190613044565b612c83565b6040516103cf9190613936565b60405180910390f35b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b600460205280600052604060002060009150905080600001549080600101805461045090613980565b80601f016020809104026020016040519081016040528092919081815260200182805461047c90613980565b80156104c95780601f1061049e576101008083540402835291602001916104c9565b820191906000526020600020905b8154815290600101906020018083116104ac57829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff169080600501549080600601549080600701805461054f90613980565b80601f016020809104026020016040519081016040528092919081815260200182805461057b90613980565b80156105c85780601f1061059d576101008083540402835291602001916105c8565b820191906000526020600020905b8154815290600101906020018083116105ab57829003601f168201915b5050505050908060080160009054906101000a900460ff1690508a565b60035481565b600060046000838152602001908152602001600020905060006006600084815260200190815260200160002090506002600681111561062d5761062c613190565b5b8260080160009054906101000a900460ff16600681111561065157610650613190565b5b14610691576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610688906139fd565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061073e57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61074757600080fd5b600082600101805461075890613980565b80601f016020809104026020016040519081016040528092919081815260200182805461078490613980565b80156107d15780601f106107a6576101008083540402835291602001916107d1565b820191906000526020600020905b8154815290600101906020018083116107b457829003601f168201915b505050505090504260028190555060008360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600084600601549050600085600501549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b815260040161089f959493929190613a36565b6020604051808303816000875af11580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190613aa5565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b81526004016109669493929190613ad2565b600060405180830381600087803b15801561098057600080fd5b505af1158015610994573d6000803e3d6000fd5b5050505060038660080160006101000a81548160ff021916908360068111156109c0576109bf613190565b5b021790555084600001548560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a450505050505050565b610a7d612e3d565b60006004600089815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1d90613b6a565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610bd357508373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0990613bd6565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7790613c42565b60405180910390fd5b60006006811115610c9457610c93613190565b5b8160080160009054906101000a900460ff166006811115610cb857610cb7613190565b5b14610cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cef90613cae565b60405180910390fd5b60006040518060e001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481525090508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610e40578673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401610df793929190613cce565b6020604051808303816000875af1158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190613d1a565b50610ef6565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610ef5578373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610eb093929190613cce565b6020604051808303816000875af1158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190613d1a565b505b5b80600660008b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015590505060018260080160006101000a81548160ff0219169083600681111561106f5761106e613190565b5b0217905550505061107e612e8c565b50505050505050565b61108f612e3d565b6000600460008381526020019081526020016000209050600060066000848152602001908152602001600020905060008060068111156110d2576110d1613190565b5b8360080160009054906101000a900460ff1660068111156110f6576110f5613190565b5b148061113757506001600681111561111157611110613190565b5b8360080160009054906101000a900460ff16600681111561113557611134613190565b5b145b611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116d90613d93565b60405180910390fd5b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ff90613dff565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361128f5781600301549050611297565b816006015490505b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161131a929190613e1f565b6020604051808303816000875af1158015611339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135d9190613d1a565b50808360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600001547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a45050506113d6612e8c565b50565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b611430612e3d565b600060405180610140016040528060035481526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001851515815260200187815260200186815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600060068111156115405761153f613190565b5b815250905060008a8a334260405160200161155e9493929190613e75565b60405160208183030381529060405290508a8a60405161157f929190613ee5565b60405180910390206003543373ffffffffffffffffffffffffffffffffffffffff167fe5adba74b6b724460a7880fb90bec588832442132225c4b4b117612a47e6e99360405160405180910390a48160046000600354815260200190815260200160002060008201518160000155602082015181600101908161160291906140a0565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015560e082015181600601556101008201518160070190816116e591906140a0565b506101208201518160080160006101000a81548160ff0219169083600681111561171257611711613190565b5b021790555090505060035460058260405161172d91906141a3565b908152602001604051809103902081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546117ba91906141e9565b9250508190555050506117cb612e8c565b505050505050505050565b6005818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b61180c612e3d565b6000600460008381526020019081526020016000209050600060066000848152602001908152602001600020905060008160060154826003015461185091906141e9565b9050600061185d85612c83565b90506004600681111561187357611872613190565b5b8460080160009054906101000a900460ff16600681111561189757611896613190565b5b146118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce90614269565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061198457508260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ba906142d5565b60405180910390fd5b670de0b6b3a76400008114806119d95750600081145b611a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0f90614341565b60405180910390fd5b670de0b6b3a76400008103611b85578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab0906143ad565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611b3c929190613e1f565b6020604051808303816000875af1158015611b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7f9190613d1a565b50611cdf565b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0e90614419565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611c9a929190613e1f565b6020604051808303816000875af1158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190613d1a565b505b60058460080160006101000a81548160ff02191690836006811115611d0757611d06613190565b5b0217905550808285600001547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a450505050611d4b612e8c565b50565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154905087565b60076020528160005260406000208181548110611e2c57600080fd5b90600052602060002001600091509150505481565b606083833384604051602001611e5a9493929190613e75565b60405160208183030381529060405290509392505050565b6060600082604051602001611e87919061450d565b604051602081830303815290604052905080915050919050565b611ea9612e3d565b600060046000838152602001908152602001600020905060006006600084815260200190815260200160002090508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f609061458a565b60405180910390fd5b600015158260040160149054906101000a900460ff1615150361207957600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806120355750600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206b906145f6565b60405180910390fd5b612166565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061212657508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215c90614662565b60405180910390fd5b5b6001600681111561217a57612179613190565b5b8260080160009054906101000a900460ff16600681111561219e5761219d613190565b5b146121de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d5906146ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612327578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600301546040518463ffffffff1660e01b815260040161229b93929190613cce565b6020604051808303816000875af11580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de9190613d1a565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612414565b8160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600601546040518463ffffffff1660e01b815260040161238c93929190613cce565b6020604051808303816000875af11580156123ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cf9190613d1a565b50338160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505560028260080160006101000a81548160ff021916908360068111156124a2576124a1613190565b5b0217905550823373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350506124f5612e8c565b50565b600060046000838152602001908152602001600020905060006006600084815260200190815260200160002090506003600681111561253a57612539613190565b5b8260080160009054906101000a900460ff16600681111561255e5761255d613190565b5b1461259e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125959061473a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061264b57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61265457600080fd5b600082600101805461266590613980565b80601f016020809104026020016040519081016040528092919081815260200182805461269190613980565b80156126de5780601f106126b3576101008083540402835291602001916126de565b820191906000526020600020905b8154815290600101906020018083116126c157829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b8152600401612768949392919061475a565b6020604051808303816000875af1158015612787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ab9190613aa5565b5060048360080160006101000a81548160ff021916908360068111156127d4576127d3613190565b5b021790555081600001548260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a450505050565b61288e612e3d565b6000600460008381526020019081526020016000209050600060066000848152602001908152602001600020905060006128c784612c83565b9050600460068111156128dd576128dc613190565b5b8360080160009054906101000a900460ff16600681111561290157612900613190565b5b14612941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293890614269565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806129ee57508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a24906142d5565b60405180910390fd5b671bc16d674ec800008114612a77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6e906147f2565b60405180910390fd5b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600301546040518363ffffffff1660e01b8152600401612afe929190613e1f565b6020604051808303816000875af1158015612b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b419190613d1a565b508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600601546040518363ffffffff1660e01b8152600401612bc9929190613e1f565b6020604051808303816000875af1158015612be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0c9190613d1a565b5060068360080160006101000a81548160ff02191690836006811115612c3557612c34613190565b5b02179055508160060154826003015483600001547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a4505050612c80612e8c565b50565b60008060046000848152602001908152602001600020905060006006600085815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612d5f57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612d6857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254866001016040518563ffffffff1660e01b8152600401612dee9493929190614896565b61020060405180830381865afa158015612e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e309190614aea565b60c0015192505050919050565b600260005403612e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7990614b64565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112612ecf57612ece612eaa565b5b8235905067ffffffffffffffff811115612eec57612eeb612eaf565b5b602083019150836001820283011115612f0857612f07612eb4565b5b9250929050565b60008060208385031215612f2657612f25612ea0565b5b600083013567ffffffffffffffff811115612f4457612f43612ea5565b5b612f5085828601612eb9565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f96578082015181840152602081019050612f7b565b60008484015250505050565b6000601f19601f8301169050919050565b6000612fbe82612f5c565b612fc88185612f67565b9350612fd8818560208601612f78565b612fe181612fa2565b840191505092915050565b600060208201905081810360008301526130068184612fb3565b905092915050565b6000819050919050565b6130218161300e565b811461302c57600080fd5b50565b60008135905061303e81613018565b92915050565b60006020828403121561305a57613059612ea0565b5b60006130688482850161302f565b91505092915050565b61307a8161300e565b82525050565b600081519050919050565b600082825260208201905092915050565b60006130a782613080565b6130b1818561308b565b93506130c1818560208601612f78565b6130ca81612fa2565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061311a613115613110846130d5565b6130f5565b6130d5565b9050919050565b600061312c826130ff565b9050919050565b600061313e82613121565b9050919050565b61314e81613133565b82525050565b600061315f826130d5565b9050919050565b61316f81613154565b82525050565b60008115159050919050565b61318a81613175565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600781106131d0576131cf613190565b5b50565b60008190506131e1826131bf565b919050565b60006131f1826131d3565b9050919050565b613201816131e6565b82525050565b60006101408201905061321d600083018d613071565b818103602083015261322f818c61309c565b905061323e604083018b613071565b61324b606083018a613145565b6132586080830189613166565b61326560a0830188613181565b61327260c0830187613071565b61327f60e0830186613071565b818103610100830152613292818561309c565b90506132a26101208301846131f8565b9b9a5050505050505050505050565b60006020820190506132c66000830184613071565b92915050565b6132d581613154565b81146132e057600080fd5b50565b6000813590506132f2816132cc565b92915050565b600061330382613154565b9050919050565b613313816132f8565b811461331e57600080fd5b50565b6000813590506133308161330a565b92915050565b600080600080600080600060e0888a03121561335557613354612ea0565b5b60006133638a828b0161302f565b97505060206133748a828b016132e3565b96505060406133858a828b01613321565b95505060606133968a828b0161302f565b94505060806133a78a828b016132e3565b93505060a06133b88a828b01613321565b92505060c06133c98a828b0161302f565b91505092959891949750929550565b60008083601f8401126133ee576133ed612eaa565b5b8235905067ffffffffffffffff81111561340b5761340a612eaf565b5b60208301915083600182028301111561342757613426612eb4565b5b9250929050565b6000806020838503121561344557613444612ea0565b5b600083013567ffffffffffffffff81111561346357613462612ea5565b5b61346f858286016133d8565b92509250509250929050565b60006020820190508181036000830152613495818461309c565b905092915050565b6134a681613175565b81146134b157600080fd5b50565b6000813590506134c38161349d565b92915050565b600080600080600080600080600060e08a8c0312156134eb576134ea612ea0565b5b60008a013567ffffffffffffffff81111561350957613508612ea5565b5b6135158c828d01612eb9565b995099505060206135288c828d0161302f565b97505060406135398c828d01613321565b965050606061354a8c828d0161302f565b955050608061355b8c828d0161302f565b94505060a061356c8c828d016134b4565b93505060c08a013567ffffffffffffffff81111561358d5761358c612ea5565b5b6135998c828d01612eb9565b92509250509295985092959850929598565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135e882612fa2565b810181811067ffffffffffffffff82111715613607576136066135b0565b5b80604052505050565b600061361a612e96565b905061362682826135df565b919050565b600067ffffffffffffffff821115613646576136456135b0565b5b61364f82612fa2565b9050602081019050919050565b82818337600083830152505050565b600061367e6136798461362b565b613610565b90508281526020810184848401111561369a576136996135ab565b5b6136a584828561365c565b509392505050565b600082601f8301126136c2576136c1612eaa565b5b81356136d284826020860161366b565b91505092915050565b6000602082840312156136f1576136f0612ea0565b5b600082013567ffffffffffffffff81111561370f5761370e612ea5565b5b61371b848285016136ad565b91505092915050565b600060e082019050613739600083018a613071565b6137466020830189613166565b6137536040830188613145565b6137606060830187613071565b61376d6080830186613166565b61377a60a0830185613145565b61378760c0830184613071565b98975050505050505050565b600080604083850312156137aa576137a9612ea0565b5b60006137b8858286016132e3565b92505060206137c98582860161302f565b9150509250929050565b6000806000604084860312156137ec576137eb612ea0565b5b600084013567ffffffffffffffff81111561380a57613809612ea5565b5b61381686828701612eb9565b935093505060206138298682870161302f565b9150509250925092565b600067ffffffffffffffff82111561384e5761384d6135b0565b5b61385782612fa2565b9050602081019050919050565b600061387761387284613833565b613610565b905082815260208101848484011115613893576138926135ab565b5b61389e84828561365c565b509392505050565b600082601f8301126138bb576138ba612eaa565b5b81356138cb848260208601613864565b91505092915050565b6000602082840312156138ea576138e9612ea0565b5b600082013567ffffffffffffffff81111561390857613907612ea5565b5b613914848285016138a6565b91505092915050565b6000819050919050565b6139308161391d565b82525050565b600060208201905061394b6000830184613927565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061399857607f821691505b6020821081036139ab576139aa613951565b5b50919050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b60006139e7601b83612f67565b91506139f2826139b1565b602082019050919050565b60006020820190508181036000830152613a16816139da565b9050919050565b6000819050919050565b613a3081613a1d565b82525050565b600060a082019050613a4b6000830188613a27565b613a586020830187613071565b8181036040830152613a6a818661309c565b9050613a796060830185613145565b613a866080830184613071565b9695505050505050565b600081519050613a9f81613018565b92915050565b600060208284031215613abb57613aba612ea0565b5b6000613ac984828501613a90565b91505092915050565b6000608082019050613ae76000830187613a27565b613af46020830186613071565b8181036040830152613b06818561309c565b9050613b156060830184613071565b95945050505050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b6000613b54600b83612f67565b9150613b5f82613b1e565b602082019050919050565b60006020820190508181036000830152613b8381613b47565b9050919050565b7f6d757374206265207061727469636970616e7400000000000000000000000000600082015250565b6000613bc0601383612f67565b9150613bcb82613b8a565b602082019050919050565b60006020820190508181036000830152613bef81613bb3565b9050919050565b7f6d75737420686176652073657061726174652070617274696573000000000000600082015250565b6000613c2c601a83612f67565b9150613c3782613bf6565b602082019050919050565b60006020820190508181036000830152613c5b81613c1f565b9050919050565b7f6e6f74206c6f6164696e67000000000000000000000000000000000000000000600082015250565b6000613c98600b83612f67565b9150613ca382613c62565b602082019050919050565b60006020820190508181036000830152613cc781613c8b565b9050919050565b6000606082019050613ce36000830186613166565b613cf06020830185613166565b613cfd6040830184613071565b949350505050565b600081519050613d148161349d565b92915050565b600060208284031215613d3057613d2f612ea0565b5b6000613d3e84828501613d05565b91505092915050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b6000613d7d601283612f67565b9150613d8882613d47565b602082019050919050565b60006020820190508181036000830152613dac81613d70565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000613de9600f83612f67565b9150613df482613db3565b602082019050919050565b60006020820190508181036000830152613e1881613ddc565b9050919050565b6000604082019050613e346000830185613166565b613e416020830184613071565b9392505050565b6000613e54838561308b565b9350613e6183858461365c565b613e6a83612fa2565b840190509392505050565b60006060820190508181036000830152613e90818688613e48565b9050613e9f6020830185613166565b613eac6040830184613071565b95945050505050565b600081905092915050565b6000613ecc8385613eb5565b9350613ed983858461365c565b82840190509392505050565b6000613ef2828486613ec0565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613f607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f23565b613f6a8683613f23565b95508019841693508086168417925050509392505050565b6000613f9d613f98613f938461300e565b6130f5565b61300e565b9050919050565b6000819050919050565b613fb783613f82565b613fcb613fc382613fa4565b848454613f30565b825550505050565b600090565b613fe0613fd3565b613feb818484613fae565b505050565b5b8181101561400f57614004600082613fd8565b600181019050613ff1565b5050565b601f8211156140545761402581613efe565b61402e84613f13565b8101602085101561403d578190505b61405161404985613f13565b830182613ff0565b50505b505050565b600082821c905092915050565b600061407760001984600802614059565b1980831691505092915050565b60006140908383614066565b9150826002028217905092915050565b6140a982613080565b67ffffffffffffffff8111156140c2576140c16135b0565b5b6140cc8254613980565b6140d7828285614013565b600060209050601f83116001811461410a57600084156140f8578287015190505b6141028582614084565b86555061416a565b601f19841661411886613efe565b60005b828110156141405784890151825560018201915060208501945060208101905061411b565b8683101561415d5784890151614159601f891682614066565b8355505b6001600288020188555050505b505050505050565b600061417d82613080565b6141878185613eb5565b9350614197818560208601612f78565b80840191505092915050565b60006141af8284614172565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006141f48261300e565b91506141ff8361300e565b9250828201905080821115614217576142166141ba565b5b92915050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b6000614253601383612f67565b915061425e8261421d565b602082019050919050565b6000602082019050818103600083015261428281614246565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b60006142bf601483612f67565b91506142ca82614289565b602082019050919050565b600060208201905081810360008301526142ee816142b2565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b600061432b601283612f67565b9150614336826142f5565b602082019050919050565b6000602082019050818103600083015261435a8161431e565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b6000614397601883612f67565b91506143a282614361565b602082019050919050565b600060208201905081810360008301526143c68161438a565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b6000614403601b83612f67565b915061440e826143cd565b602082019050919050565b60006020820190508181036000830152614432816143f6565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b600061447582612f5c565b61447f818561445f565b935061448f818560208601612f78565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b60006144f760378361445f565b91506145028261449b565b603782019050919050565b600061451882614439565b600382019150614528828461446a565b9150614533826144ea565b915081905092915050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b6000614574601783612f67565b915061457f8261453e565b602082019050919050565b600060208201905081810360008301526145a381614567565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b60006145e0601183612f67565b91506145eb826145aa565b602082019050919050565b6000602082019050818103600083015261460f816145d3565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b600061464c601183612f67565b915061465782614616565b602082019050919050565b6000602082019050818103600083015261467b8161463f565b9050919050565b7f6e6f74204f70656e000000000000000000000000000000000000000000000000600082015250565b60006146b8600883612f67565b91506146c382614682565b602082019050919050565b600060208201905081810360008301526146e7816146ab565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b6000614724601083612f67565b915061472f826146ee565b602082019050919050565b6000602082019050818103600083015261475381614717565b9050919050565b600060808201905061476f6000830187613166565b61477c6020830186613a27565b6147896040830185613071565b818103606083015261479b818461309c565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b60006147dc601183612f67565b91506147e7826147a6565b602082019050919050565b6000602082019050818103600083015261480b816147cf565b9050919050565b6000815461481f81613980565b614829818661308b565b94506001821660008114614844576001811461485a5761488d565b60ff19831686528115156020028601935061488d565b61486385613efe565b60005b8381101561488557815481890152600182019150602081019050614866565b808801955050505b50505092915050565b60006080820190506148ab6000830187613166565b6148b86020830186613a27565b6148c56040830185613071565b81810360608301526148d78184614812565b905095945050505050565b600080fd5b6000815190506148f6816132cc565b92915050565b60008151905061490b8161330a565b92915050565b600060e08284031215614927576149266148e2565b5b61493160e0613610565b9050600061494184828501613d05565b600083015250602061495584828501613d05565b602083015250604061496984828501613d05565b604083015250606061497d84828501613d05565b606083015250608061499184828501613d05565b60808301525060a06149a584828501613a90565b60a08301525060c06149b984828501613a90565b60c08301525092915050565b6149ce8161391d565b81146149d957600080fd5b50565b6000815190506149eb816149c5565b92915050565b60006102008284031215614a0857614a076148e2565b5b614a13610140613610565b90506000614a23848285016148e7565b6000830152506020614a37848285016148e7565b6020830152506040614a4b848285016148fc565b6040830152506060614a5f84828501613d05565b6060830152506080614a7384828501614911565b608083015250610160614a88848285016149dc565b60a083015250610180614a9d848285016149dc565b60c0830152506101a0614ab284828501613a90565b60e0830152506101c0614ac784828501613a90565b610100830152506101e0614add84828501613a90565b6101208301525092915050565b60006102008284031215614b0157614b00612ea0565b5b6000614b0f848285016149f1565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614b4e601f83612f67565b9150614b5982614b18565b602082019050919050565b60006020820190508181036000830152614b7d81614b41565b905091905056fea26469706673582212208db36b1a64a07bac19331c18d2aa13f0fbf7ce8b39208b7d0a6bf24af9edd1f564736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063677bd9ff116100a2578063b3580c1e11610071578063b3580c1e14610324578063c511a07414610354578063d247f92b14610370578063dc60054e1461038c578063e5da66af146103a857610116565b8063677bd9ff14610272578063744104291461028e5780638068aa68146102c4578063945e5a42146102f457610116565b80633268fc8a116100e95780633268fc8a146101be578063357401f5146101da57806345b7c1c1146101f657806346049d54146102265780635fb5a70d1461024257610116565b806306c66b851461011b57806322af00fa1461014b57806327bce91b146101845780632adb9e3c146101a2575b600080fd5b61013560048036038101906101309190612f0f565b6103d8565b6040516101429190612fec565b60405180910390f35b61016560048036038101906101609190613044565b610427565b60405161017b9a99989796959493929190613207565b60405180910390f35b61018c6105e5565b60405161019991906132b1565b60405180910390f35b6101bc60048036038101906101b79190613044565b6105eb565b005b6101d860048036038101906101d39190613336565b610a75565b005b6101f460048036038101906101ef9190613044565b611087565b005b610210600480360381019061020b919061342e565b6113d9565b60405161021d919061347b565b60405180910390f35b610240600480360381019061023b91906134c9565b611428565b005b61025c600480360381019061025791906136db565b6117d6565b60405161026991906132b1565b60405180910390f35b61028c60048036038101906102879190613044565b611804565b005b6102a860048036038101906102a39190613044565b611d4e565b6040516102bb9796959493929190613724565b60405180910390f35b6102de60048036038101906102d99190613793565b611e10565b6040516102eb91906132b1565b60405180910390f35b61030e600480360381019061030991906137d3565b611e41565b60405161031b919061347b565b60405180910390f35b61033e600480360381019061033991906138d4565b611e72565b60405161034b919061347b565b60405180910390f35b61036e60048036038101906103699190613044565b611ea1565b005b61038a60048036038101906103859190613044565b6124f8565b005b6103a660048036038101906103a19190613044565b612886565b005b6103c260048036038101906103bd9190613044565b612c83565b6040516103cf9190613936565b60405180910390f35b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b600460205280600052604060002060009150905080600001549080600101805461045090613980565b80601f016020809104026020016040519081016040528092919081815260200182805461047c90613980565b80156104c95780601f1061049e576101008083540402835291602001916104c9565b820191906000526020600020905b8154815290600101906020018083116104ac57829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff169080600501549080600601549080600701805461054f90613980565b80601f016020809104026020016040519081016040528092919081815260200182805461057b90613980565b80156105c85780601f1061059d576101008083540402835291602001916105c8565b820191906000526020600020905b8154815290600101906020018083116105ab57829003601f168201915b5050505050908060080160009054906101000a900460ff1690508a565b60035481565b600060046000838152602001908152602001600020905060006006600084815260200190815260200160002090506002600681111561062d5761062c613190565b5b8260080160009054906101000a900460ff16600681111561065157610650613190565b5b14610691576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610688906139fd565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061073e57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61074757600080fd5b600082600101805461075890613980565b80601f016020809104026020016040519081016040528092919081815260200182805461078490613980565b80156107d15780601f106107a6576101008083540402835291602001916107d1565b820191906000526020600020905b8154815290600101906020018083116107b457829003601f168201915b505050505090504260028190555060008360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600084600601549050600085600501549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b815260040161089f959493929190613a36565b6020604051808303816000875af11580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190613aa5565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b81526004016109669493929190613ad2565b600060405180830381600087803b15801561098057600080fd5b505af1158015610994573d6000803e3d6000fd5b5050505060038660080160006101000a81548160ff021916908360068111156109c0576109bf613190565b5b021790555084600001548560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a450505050505050565b610a7d612e3d565b60006004600089815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1d90613b6a565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610bd357508373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0990613bd6565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7790613c42565b60405180910390fd5b60006006811115610c9457610c93613190565b5b8160080160009054906101000a900460ff166006811115610cb857610cb7613190565b5b14610cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cef90613cae565b60405180910390fd5b60006040518060e001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481525090508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610e40578673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401610df793929190613cce565b6020604051808303816000875af1158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190613d1a565b50610ef6565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610ef5578373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610eb093929190613cce565b6020604051808303816000875af1158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190613d1a565b505b5b80600660008b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015590505060018260080160006101000a81548160ff0219169083600681111561106f5761106e613190565b5b0217905550505061107e612e8c565b50505050505050565b61108f612e3d565b6000600460008381526020019081526020016000209050600060066000848152602001908152602001600020905060008060068111156110d2576110d1613190565b5b8360080160009054906101000a900460ff1660068111156110f6576110f5613190565b5b148061113757506001600681111561111157611110613190565b5b8360080160009054906101000a900460ff16600681111561113557611134613190565b5b145b611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116d90613d93565b60405180910390fd5b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ff90613dff565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361128f5781600301549050611297565b816006015490505b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161131a929190613e1f565b6020604051808303816000875af1158015611339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135d9190613d1a565b50808360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600001547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a45050506113d6612e8c565b50565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905092915050565b611430612e3d565b600060405180610140016040528060035481526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001851515815260200187815260200186815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600060068111156115405761153f613190565b5b815250905060008a8a334260405160200161155e9493929190613e75565b60405160208183030381529060405290508a8a60405161157f929190613ee5565b60405180910390206003543373ffffffffffffffffffffffffffffffffffffffff167fe5adba74b6b724460a7880fb90bec588832442132225c4b4b117612a47e6e99360405160405180910390a48160046000600354815260200190815260200160002060008201518160000155602082015181600101908161160291906140a0565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015560e082015181600601556101008201518160070190816116e591906140a0565b506101208201518160080160006101000a81548160ff0219169083600681111561171257611711613190565b5b021790555090505060035460058260405161172d91906141a3565b908152602001604051809103902081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546117ba91906141e9565b9250508190555050506117cb612e8c565b505050505050505050565b6005818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b61180c612e3d565b6000600460008381526020019081526020016000209050600060066000848152602001908152602001600020905060008160060154826003015461185091906141e9565b9050600061185d85612c83565b90506004600681111561187357611872613190565b5b8460080160009054906101000a900460ff16600681111561189757611896613190565b5b146118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce90614269565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061198457508260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ba906142d5565b60405180910390fd5b670de0b6b3a76400008114806119d95750600081145b611a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0f90614341565b60405180910390fd5b670de0b6b3a76400008103611b85578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab0906143ad565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611b3c929190613e1f565b6020604051808303816000875af1158015611b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7f9190613d1a565b50611cdf565b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0e90614419565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611c9a929190613e1f565b6020604051808303816000875af1158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190613d1a565b505b60058460080160006101000a81548160ff02191690836006811115611d0757611d06613190565b5b0217905550808285600001547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a450505050611d4b612e8c565b50565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154905087565b60076020528160005260406000208181548110611e2c57600080fd5b90600052602060002001600091509150505481565b606083833384604051602001611e5a9493929190613e75565b60405160208183030381529060405290509392505050565b6060600082604051602001611e87919061450d565b604051602081830303815290604052905080915050919050565b611ea9612e3d565b600060046000838152602001908152602001600020905060006006600084815260200190815260200160002090508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f609061458a565b60405180910390fd5b600015158260040160149054906101000a900460ff1615150361207957600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806120355750600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206b906145f6565b60405180910390fd5b612166565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061212657508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215c90614662565b60405180910390fd5b5b6001600681111561217a57612179613190565b5b8260080160009054906101000a900460ff16600681111561219e5761219d613190565b5b146121de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d5906146ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612327578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600301546040518463ffffffff1660e01b815260040161229b93929190613cce565b6020604051808303816000875af11580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de9190613d1a565b50338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612414565b8160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600601546040518463ffffffff1660e01b815260040161238c93929190613cce565b6020604051808303816000875af11580156123ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cf9190613d1a565b50338160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505560028260080160006101000a81548160ff021916908360068111156124a2576124a1613190565b5b0217905550823373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350506124f5612e8c565b50565b600060046000838152602001908152602001600020905060006006600084815260200190815260200160002090506003600681111561253a57612539613190565b5b8260080160009054906101000a900460ff16600681111561255e5761255d613190565b5b1461259e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125959061473a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061264b57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61265457600080fd5b600082600101805461266590613980565b80601f016020809104026020016040519081016040528092919081815260200182805461269190613980565b80156126de5780601f106126b3576101008083540402835291602001916126de565b820191906000526020600020905b8154815290600101906020018083116126c157829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b8152600401612768949392919061475a565b6020604051808303816000875af1158015612787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ab9190613aa5565b5060048360080160006101000a81548160ff021916908360068111156127d4576127d3613190565b5b021790555081600001548260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a450505050565b61288e612e3d565b6000600460008381526020019081526020016000209050600060066000848152602001908152602001600020905060006128c784612c83565b9050600460068111156128dd576128dc613190565b5b8360080160009054906101000a900460ff16600681111561290157612900613190565b5b14612941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293890614269565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806129ee57508160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a24906142d5565b60405180910390fd5b671bc16d674ec800008114612a77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6e906147f2565b60405180910390fd5b8260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600301546040518363ffffffff1660e01b8152600401612afe929190613e1f565b6020604051808303816000875af1158015612b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b419190613d1a565b508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600601546040518363ffffffff1660e01b8152600401612bc9929190613e1f565b6020604051808303816000875af1158015612be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0c9190613d1a565b5060068360080160006101000a81548160ff02191690836006811115612c3557612c34613190565b5b02179055508160060154826003015483600001547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a4505050612c80612e8c565b50565b60008060046000848152602001908152602001600020905060006006600085815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612d5f57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612d6857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254866001016040518563ffffffff1660e01b8152600401612dee9493929190614896565b61020060405180830381865afa158015612e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e309190614aea565b60c0015192505050919050565b600260005403612e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7990614b64565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112612ecf57612ece612eaa565b5b8235905067ffffffffffffffff811115612eec57612eeb612eaf565b5b602083019150836001820283011115612f0857612f07612eb4565b5b9250929050565b60008060208385031215612f2657612f25612ea0565b5b600083013567ffffffffffffffff811115612f4457612f43612ea5565b5b612f5085828601612eb9565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f96578082015181840152602081019050612f7b565b60008484015250505050565b6000601f19601f8301169050919050565b6000612fbe82612f5c565b612fc88185612f67565b9350612fd8818560208601612f78565b612fe181612fa2565b840191505092915050565b600060208201905081810360008301526130068184612fb3565b905092915050565b6000819050919050565b6130218161300e565b811461302c57600080fd5b50565b60008135905061303e81613018565b92915050565b60006020828403121561305a57613059612ea0565b5b60006130688482850161302f565b91505092915050565b61307a8161300e565b82525050565b600081519050919050565b600082825260208201905092915050565b60006130a782613080565b6130b1818561308b565b93506130c1818560208601612f78565b6130ca81612fa2565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061311a613115613110846130d5565b6130f5565b6130d5565b9050919050565b600061312c826130ff565b9050919050565b600061313e82613121565b9050919050565b61314e81613133565b82525050565b600061315f826130d5565b9050919050565b61316f81613154565b82525050565b60008115159050919050565b61318a81613175565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600781106131d0576131cf613190565b5b50565b60008190506131e1826131bf565b919050565b60006131f1826131d3565b9050919050565b613201816131e6565b82525050565b60006101408201905061321d600083018d613071565b818103602083015261322f818c61309c565b905061323e604083018b613071565b61324b606083018a613145565b6132586080830189613166565b61326560a0830188613181565b61327260c0830187613071565b61327f60e0830186613071565b818103610100830152613292818561309c565b90506132a26101208301846131f8565b9b9a5050505050505050505050565b60006020820190506132c66000830184613071565b92915050565b6132d581613154565b81146132e057600080fd5b50565b6000813590506132f2816132cc565b92915050565b600061330382613154565b9050919050565b613313816132f8565b811461331e57600080fd5b50565b6000813590506133308161330a565b92915050565b600080600080600080600060e0888a03121561335557613354612ea0565b5b60006133638a828b0161302f565b97505060206133748a828b016132e3565b96505060406133858a828b01613321565b95505060606133968a828b0161302f565b94505060806133a78a828b016132e3565b93505060a06133b88a828b01613321565b92505060c06133c98a828b0161302f565b91505092959891949750929550565b60008083601f8401126133ee576133ed612eaa565b5b8235905067ffffffffffffffff81111561340b5761340a612eaf565b5b60208301915083600182028301111561342757613426612eb4565b5b9250929050565b6000806020838503121561344557613444612ea0565b5b600083013567ffffffffffffffff81111561346357613462612ea5565b5b61346f858286016133d8565b92509250509250929050565b60006020820190508181036000830152613495818461309c565b905092915050565b6134a681613175565b81146134b157600080fd5b50565b6000813590506134c38161349d565b92915050565b600080600080600080600080600060e08a8c0312156134eb576134ea612ea0565b5b60008a013567ffffffffffffffff81111561350957613508612ea5565b5b6135158c828d01612eb9565b995099505060206135288c828d0161302f565b97505060406135398c828d01613321565b965050606061354a8c828d0161302f565b955050608061355b8c828d0161302f565b94505060a061356c8c828d016134b4565b93505060c08a013567ffffffffffffffff81111561358d5761358c612ea5565b5b6135998c828d01612eb9565b92509250509295985092959850929598565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135e882612fa2565b810181811067ffffffffffffffff82111715613607576136066135b0565b5b80604052505050565b600061361a612e96565b905061362682826135df565b919050565b600067ffffffffffffffff821115613646576136456135b0565b5b61364f82612fa2565b9050602081019050919050565b82818337600083830152505050565b600061367e6136798461362b565b613610565b90508281526020810184848401111561369a576136996135ab565b5b6136a584828561365c565b509392505050565b600082601f8301126136c2576136c1612eaa565b5b81356136d284826020860161366b565b91505092915050565b6000602082840312156136f1576136f0612ea0565b5b600082013567ffffffffffffffff81111561370f5761370e612ea5565b5b61371b848285016136ad565b91505092915050565b600060e082019050613739600083018a613071565b6137466020830189613166565b6137536040830188613145565b6137606060830187613071565b61376d6080830186613166565b61377a60a0830185613145565b61378760c0830184613071565b98975050505050505050565b600080604083850312156137aa576137a9612ea0565b5b60006137b8858286016132e3565b92505060206137c98582860161302f565b9150509250929050565b6000806000604084860312156137ec576137eb612ea0565b5b600084013567ffffffffffffffff81111561380a57613809612ea5565b5b61381686828701612eb9565b935093505060206138298682870161302f565b9150509250925092565b600067ffffffffffffffff82111561384e5761384d6135b0565b5b61385782612fa2565b9050602081019050919050565b600061387761387284613833565b613610565b905082815260208101848484011115613893576138926135ab565b5b61389e84828561365c565b509392505050565b600082601f8301126138bb576138ba612eaa565b5b81356138cb848260208601613864565b91505092915050565b6000602082840312156138ea576138e9612ea0565b5b600082013567ffffffffffffffff81111561390857613907612ea5565b5b613914848285016138a6565b91505092915050565b6000819050919050565b6139308161391d565b82525050565b600060208201905061394b6000830184613927565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061399857607f821691505b6020821081036139ab576139aa613951565b5b50919050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b60006139e7601b83612f67565b91506139f2826139b1565b602082019050919050565b60006020820190508181036000830152613a16816139da565b9050919050565b6000819050919050565b613a3081613a1d565b82525050565b600060a082019050613a4b6000830188613a27565b613a586020830187613071565b8181036040830152613a6a818661309c565b9050613a796060830185613145565b613a866080830184613071565b9695505050505050565b600081519050613a9f81613018565b92915050565b600060208284031215613abb57613aba612ea0565b5b6000613ac984828501613a90565b91505092915050565b6000608082019050613ae76000830187613a27565b613af46020830186613071565b8181036040830152613b06818561309c565b9050613b156060830184613071565b95945050505050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b6000613b54600b83612f67565b9150613b5f82613b1e565b602082019050919050565b60006020820190508181036000830152613b8381613b47565b9050919050565b7f6d757374206265207061727469636970616e7400000000000000000000000000600082015250565b6000613bc0601383612f67565b9150613bcb82613b8a565b602082019050919050565b60006020820190508181036000830152613bef81613bb3565b9050919050565b7f6d75737420686176652073657061726174652070617274696573000000000000600082015250565b6000613c2c601a83612f67565b9150613c3782613bf6565b602082019050919050565b60006020820190508181036000830152613c5b81613c1f565b9050919050565b7f6e6f74206c6f6164696e67000000000000000000000000000000000000000000600082015250565b6000613c98600b83612f67565b9150613ca382613c62565b602082019050919050565b60006020820190508181036000830152613cc781613c8b565b9050919050565b6000606082019050613ce36000830186613166565b613cf06020830185613166565b613cfd6040830184613071565b949350505050565b600081519050613d148161349d565b92915050565b600060208284031215613d3057613d2f612ea0565b5b6000613d3e84828501613d05565b91505092915050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b6000613d7d601283612f67565b9150613d8882613d47565b602082019050919050565b60006020820190508181036000830152613dac81613d70565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000613de9600f83612f67565b9150613df482613db3565b602082019050919050565b60006020820190508181036000830152613e1881613ddc565b9050919050565b6000604082019050613e346000830185613166565b613e416020830184613071565b9392505050565b6000613e54838561308b565b9350613e6183858461365c565b613e6a83612fa2565b840190509392505050565b60006060820190508181036000830152613e90818688613e48565b9050613e9f6020830185613166565b613eac6040830184613071565b95945050505050565b600081905092915050565b6000613ecc8385613eb5565b9350613ed983858461365c565b82840190509392505050565b6000613ef2828486613ec0565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613f607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f23565b613f6a8683613f23565b95508019841693508086168417925050509392505050565b6000613f9d613f98613f938461300e565b6130f5565b61300e565b9050919050565b6000819050919050565b613fb783613f82565b613fcb613fc382613fa4565b848454613f30565b825550505050565b600090565b613fe0613fd3565b613feb818484613fae565b505050565b5b8181101561400f57614004600082613fd8565b600181019050613ff1565b5050565b601f8211156140545761402581613efe565b61402e84613f13565b8101602085101561403d578190505b61405161404985613f13565b830182613ff0565b50505b505050565b600082821c905092915050565b600061407760001984600802614059565b1980831691505092915050565b60006140908383614066565b9150826002028217905092915050565b6140a982613080565b67ffffffffffffffff8111156140c2576140c16135b0565b5b6140cc8254613980565b6140d7828285614013565b600060209050601f83116001811461410a57600084156140f8578287015190505b6141028582614084565b86555061416a565b601f19841661411886613efe565b60005b828110156141405784890151825560018201915060208501945060208101905061411b565b8683101561415d5784890151614159601f891682614066565b8355505b6001600288020188555050505b505050505050565b600061417d82613080565b6141878185613eb5565b9350614197818560208601612f78565b80840191505092915050565b60006141af8284614172565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006141f48261300e565b91506141ff8361300e565b9250828201905080821115614217576142166141ba565b5b92915050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b6000614253601383612f67565b915061425e8261421d565b602082019050919050565b6000602082019050818103600083015261428281614246565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b60006142bf601483612f67565b91506142ca82614289565b602082019050919050565b600060208201905081810360008301526142ee816142b2565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b600061432b601283612f67565b9150614336826142f5565b602082019050919050565b6000602082019050818103600083015261435a8161431e565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b6000614397601883612f67565b91506143a282614361565b602082019050919050565b600060208201905081810360008301526143c68161438a565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b6000614403601b83612f67565b915061440e826143cd565b602082019050919050565b60006020820190508181036000830152614432816143f6565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b600061447582612f5c565b61447f818561445f565b935061448f818560208601612f78565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b60006144f760378361445f565b91506145028261449b565b603782019050919050565b600061451882614439565b600382019150614528828461446a565b9150614533826144ea565b915081905092915050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b6000614574601783612f67565b915061457f8261453e565b602082019050919050565b600060208201905081810360008301526145a381614567565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b60006145e0601183612f67565b91506145eb826145aa565b602082019050919050565b6000602082019050818103600083015261460f816145d3565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b600061464c601183612f67565b915061465782614616565b602082019050919050565b6000602082019050818103600083015261467b8161463f565b9050919050565b7f6e6f74204f70656e000000000000000000000000000000000000000000000000600082015250565b60006146b8600883612f67565b91506146c382614682565b602082019050919050565b600060208201905081810360008301526146e7816146ab565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b6000614724601083612f67565b915061472f826146ee565b602082019050919050565b6000602082019050818103600083015261475381614717565b9050919050565b600060808201905061476f6000830187613166565b61477c6020830186613a27565b6147896040830185613071565b818103606083015261479b818461309c565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b60006147dc601183612f67565b91506147e7826147a6565b602082019050919050565b6000602082019050818103600083015261480b816147cf565b9050919050565b6000815461481f81613980565b614829818661308b565b94506001821660008114614844576001811461485a5761488d565b60ff19831686528115156020028601935061488d565b61486385613efe565b60005b8381101561488557815481890152600182019150602081019050614866565b808801955050505b50505092915050565b60006080820190506148ab6000830187613166565b6148b86020830186613a27565b6148c56040830185613071565b81810360608301526148d78184614812565b905095945050505050565b600080fd5b6000815190506148f6816132cc565b92915050565b60008151905061490b8161330a565b92915050565b600060e08284031215614927576149266148e2565b5b61493160e0613610565b9050600061494184828501613d05565b600083015250602061495584828501613d05565b602083015250604061496984828501613d05565b604083015250606061497d84828501613d05565b606083015250608061499184828501613d05565b60808301525060a06149a584828501613a90565b60a08301525060c06149b984828501613a90565b60c08301525092915050565b6149ce8161391d565b81146149d957600080fd5b50565b6000815190506149eb816149c5565b92915050565b60006102008284031215614a0857614a076148e2565b5b614a13610140613610565b90506000614a23848285016148e7565b6000830152506020614a37848285016148e7565b6020830152506040614a4b848285016148fc565b6040830152506060614a5f84828501613d05565b6060830152506080614a7384828501614911565b608083015250610160614a88848285016149dc565b60a083015250610180614a9d848285016149dc565b60c0830152506101a0614ab284828501613a90565b60e0830152506101c0614ac784828501613a90565b610100830152506101e0614add84828501613a90565b6101208301525092915050565b60006102008284031215614b0157614b00612ea0565b5b6000614b0f848285016149f1565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614b4e601f83612f67565b9150614b5982614b18565b602082019050919050565b60006020820190508181036000830152614b7d81614b41565b905091905056fea26469706673582212208db36b1a64a07bac19331c18d2aa13f0fbf7ce8b39208b7d0a6bf24af9edd1f564736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 529,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "oo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(OptimisticOracleV2Interface)517"
      },
      {
        "astId": 532,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "requestTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 649,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 654,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "bets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Bet)567_storage)"
      },
      {
        "astId": 658,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "hashIds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 663,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betAmounts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(BetAmount)584_storage)"
      },
      {
        "astId": 668,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "userBets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)131": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(OptimisticOracleV2Interface)517": {
        "encoding": "inplace",
        "label": "contract OptimisticOracleV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)592": {
        "encoding": "inplace",
        "label": "enum OO_BetHandler.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bet)567_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)567_storage"
      },
      "t_mapping(t_uint256,t_struct(BetAmount)584_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.BetAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(BetAmount)584_storage"
      },
      "t_struct(Bet)567_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.Bet",
        "members": [
          {
            "astId": 546,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 548,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "question",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 550,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 553,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "bondCurrency",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 555,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 557,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "privateBet",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 559,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "liveness",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 561,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "reward",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 563,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "imgUrl",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes_storage"
          },
          {
            "astId": 566,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betStatus",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(BetStatus)592"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(BetAmount)584_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.BetAmount",
        "members": [
          {
            "astId": 569,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 571,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmation",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 574,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 576,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 578,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negation",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 581,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationToken",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IERC20)131"
          },
          {
            "astId": 583,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}