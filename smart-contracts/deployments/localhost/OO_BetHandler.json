{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        }
      ],
      "name": "BetCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "affirmationRefund",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "negationRefund",
          "type": "uint256"
        }
      ],
      "name": "BetKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "winner",
          "type": "int256"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bets",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "question",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "bondCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liveness",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "privateBet",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "affirmation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "affirmationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "negation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "negationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "enum OO_BetHandler.BetStatus",
          "name": "betStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "cancelBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "claimWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        }
      ],
      "name": "createQuestion",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "getSettledData",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "killBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "requestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_bondCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liveness",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_privateBet",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_privateBetRecipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_affirmation",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_counterBetAmount",
          "type": "uint256"
        }
      ],
      "name": "setBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "settleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c681c58ae538fb1f60b18b90288b7f3b9f81ba82bfec8c554d66ff9d4237c89",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3477772",
    "logsBloom": "0x
    "blockHash": "0xfcc14ddd00b5ef3df67bf02fe3631a4550f014578910ca5e44c3fbe8f8a183db",
    "transactionHash": "0x6c681c58ae538fb1f60b18b90288b7f3b9f81ba82bfec8c554d66ff9d4237c89",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "3477772",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a4a73abb46bb0298a720f2010695d8b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"BetCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"affirmationRefund\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"negationRefund\",\"type\":\"uint256\"}],\"name\":\"BetKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"winner\",\"type\":\"int256\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liveness\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateBet\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"affirmation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affirmationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"negation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"negationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"enum OO_BetHandler.BetStatus\",\"name\":\"betStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"}],\"name\":\"createQuestion\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"getSettledData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"killBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_bondCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liveness\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_privateBet\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_privateBetRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_affirmation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_counterBetAmount\",\"type\":\"uint256\"}],\"name\":\"setBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"settleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OO_BetHandler.sol\":\"OO_BetHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleV2Interface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    struct RequestSettings {\\n        bool eventBased; // True if the request is set to be event-based.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\n     * @dev Calling this method has a few impacts on the request:\\n     *\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\n     *    with the request.\\n     *\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\n     *    prematurely proposes a response loses their bond.\\n     *\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\n     *    the requesting contract.\\n     *\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setEventBased(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets which callbacks should be enabled for the request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\n     */\\n    function setCallbacks(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        bool callbackOnPriceProposed,\\n        bool callbackOnPriceDisputed,\\n        bool callbackOnPriceSettled\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbfd9778b3e7c86e149cc140eda5e7210ef4a604cde576abaaa46c1289c5e334f\",\"license\":\"AGPL-3.0-only\"},\"contracts/OO_BetHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract OO_BetHandler is ReentrancyGuard {\\n    // Create an Optimistic oracle instance at the deployed address on G\\u00f6rli.\\n    OptimisticOracleV2Interface oo =\\n        OptimisticOracleV2Interface(0xA5B9d8a0B0Fa04Ba71BDD68069661ED5C0848884);\\n\\n    uint256 requestTime = 0; // Store the request time so we can re-use it later.\\n    bytes32 constant IDENTIFIER = bytes32(\\\"YES_OR_NO_QUERY\\\"); // Use the yes no idetifier to ask arbitary questions, such as the weather on a particular day.\\n    address constant ZERO_ADDRESS = address(0);\\n    // 0x0000000000000000000000000000000000000000\\n\\n    struct Bet {\\n        bytes question;\\n        IERC20 bondCurrency;\\n        uint256 reward;\\n        uint256 liveness;\\n        address creator; // Creator of the bet contract.\\n        bool privateBet; // Is the bet meant for a specific person or open to everyone?\\n        address affirmation; // Address of the side of the bet that affirms the question.\\n        uint256 affirmationAmount; // Amount deposited into the bet by the affrimation.\\n        address negation; // Address of the side of the bet that negates the question.\\n        uint256 negationAmount; // Amount deposited into the bet by the negation.\\n        uint256 betId; // The bet's global id number.\\n        BetStatus betStatus;\\n    }\\n\\n    enum BetStatus {\\n        OPEN,\\n        ACTIVE,\\n        SETTLING,\\n        SETTLED,\\n        CLAIMED,\\n        DEAD\\n    }\\n\\n    // ******** EVENTS ************\\n\\n    event BetSet(\\n        address indexed creator,\\n        address indexed bondCurrency,\\n        bytes indexed ancillaryData,\\n        uint256 betId\\n    );\\n\\n    event BetTaken(address indexed taker, uint256 indexed betId);\\n\\n    event DataRequested(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event BetSettled(\\n        address indexed affirmation,\\n        address indexed negation,\\n        uint256 indexed betId\\n    );\\n\\n    event WinningsClaimed(\\n        uint256 indexed betId,\\n        uint256 indexed totalWinnings,\\n        int256 indexed winner\\n    );\\n\\n    event BetCanceled(\\n        uint256 indexed betId,\\n        address indexed bondCurrency,\\n        uint256 indexed refundAmount\\n    );\\n\\n    event BetKilled(\\n        uint256 indexed betId,\\n        uint256 indexed affirmationRefund,\\n        uint256 indexed negationRefund\\n    );\\n\\n    uint256 betId = 0; // latest global betId for all managed bets.\\n    mapping(uint256 => Bet) public bets; // All bets mapped by their betId\\n    mapping(address => uint256[]) public userBets; // All bets the user is and has participated in.\\n\\n    // ********* MUTATIVE FUNCTIONS *************\\n\\n    function setBet(\\n        string calldata _question,\\n        address _bondCurrency,\\n        uint256 _reward, // Reward is paid to settlers on UMA. It is recommended to pay 5%-10%\\n        uint256 _liveness,\\n        bool _privateBet,\\n        // If _privateBet is false, _privateBetRecipient should be 0x0000000000000000000000000000000000000000\\n        address _privateBetRecipient,\\n        bool _affirmation,\\n        uint256 _betAmount,\\n        uint256 _counterBetAmount\\n    ) public nonReentrant {\\n        bytes memory ancillaryData = createQuestion(_question); // Question to ask the UMA Oracle.\\n        IERC20 bondCurrency = IERC20(_bondCurrency); // Use preferred token as the bond currency.\\n\\n        address affirmation;\\n        uint256 affirmationAmount;\\n        address negation;\\n        uint256 negationAmount;\\n\\n        if (_affirmation == true) {\\n            affirmation = msg.sender;\\n            affirmationAmount = _betAmount;\\n            negationAmount = _counterBetAmount;\\n        } else {\\n            negation = msg.sender;\\n            negationAmount = _betAmount;\\n            affirmationAmount = _counterBetAmount;\\n        }\\n\\n        if (_privateBet == true) {\\n            affirmation == msg.sender\\n                ? negation = _privateBetRecipient\\n                : affirmation = _privateBetRecipient;\\n        }\\n\\n        Bet memory bet = Bet(\\n            ancillaryData,\\n            bondCurrency,\\n            _reward,\\n            _liveness,\\n            msg.sender,\\n            _privateBet,\\n            affirmation,\\n            affirmationAmount,\\n            negation,\\n            negationAmount,\\n            betId,\\n            BetStatus.OPEN\\n        );\\n\\n        // Make sure to approve this contract to spend your ERC20 externally first\\n        bondCurrency.transferFrom(msg.sender, address(this), _betAmount);\\n\\n        emit BetSet(msg.sender, _bondCurrency, ancillaryData, betId);\\n\\n        bets[betId] = bet;\\n        userBets[msg.sender].push(betId);\\n        betId += 1;\\n    }\\n\\n    function takeBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        require(msg.sender != bet.creator, \\\"Can't take your own bet\\\");\\n        if (bet.privateBet == false) {\\n            require(\\n                bet.affirmation == ZERO_ADDRESS || bet.negation == ZERO_ADDRESS,\\n                \\\"Bet already taken\\\"\\n            );\\n        } else {\\n            require(\\n                msg.sender == bet.affirmation || msg.sender == bet.negation,\\n                \\\"Not bet recipient\\\"\\n            );\\n        }\\n        require(bet.betStatus == BetStatus.OPEN, \\\"Bet not Open\\\");\\n\\n        if (bet.affirmation == ZERO_ADDRESS) {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                bet.affirmationAmount\\n            );\\n            bet.affirmation = msg.sender;\\n        } else {\\n            // Make sure to approve this contract to spend your ERC20 externally first\\n            bet.bondCurrency.transferFrom(\\n                msg.sender,\\n                address(this),\\n                bet.negationAmount\\n            );\\n            bet.negation = msg.sender;\\n        }\\n\\n        userBets[msg.sender].push(_betId);\\n        bet.betStatus = BetStatus.ACTIVE;\\n\\n        emit BetTaken(msg.sender, _betId);\\n    }\\n\\n    function requestData(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        require(\\n            bet.betStatus == BetStatus.ACTIVE,\\n            \\\"Bet not ready to be settled\\\"\\n        );\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.question; // Question to ask the UMA Oracle.\\n\\n        requestTime = block.timestamp; // Set the request time to the current block time.\\n        IERC20 bondCurrency = IERC20(bet.bondCurrency); // Use preferred token as the bond currency.\\n        uint256 reward = bet.reward; // Set the reward amount for UMA Oracle.\\n\\n        // Set liveness for request disputes measured in seconds. Recommended time is at least 7200 (2 hours).\\n        // Users should increase liveness time depending on various factors such as amount of funds being handled\\n        // and risk of malicious acts.\\n        uint256 liveness = bet.liveness;\\n\\n        // Now, make the price request to the Optimistic oracle with preferred inputs.\\n        oo.requestPrice(\\n            IDENTIFIER,\\n            requestTime,\\n            ancillaryData,\\n            bondCurrency,\\n            reward\\n        );\\n        oo.setCustomLiveness(IDENTIFIER, requestTime, ancillaryData, liveness);\\n\\n        bet.betStatus = BetStatus.SETTLING;\\n        emit DataRequested(bet.affirmation, bet.negation, bet.betId);\\n    }\\n\\n    // Settle the request once it's gone through the liveness period of 30 seconds. This acts the finalize the voted on price.\\n    // In a real world use of the Optimistic Oracle this should be longer to give time to disputers to catch bat price proposals.\\n    function settleRequest(uint256 _betId) public {\\n        Bet storage bet = bets[_betId];\\n        require(bet.betStatus == BetStatus.SETTLING, \\\"Bet not settling\\\");\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.question;\\n\\n        oo.settle(address(this), IDENTIFIER, requestTime, ancillaryData);\\n        bet.betStatus = BetStatus.SETTLED;\\n\\n        emit BetSettled(bet.affirmation, bet.negation, bet.betId);\\n    }\\n\\n    function claimWinnings(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        uint256 totalWinnings = bet.affirmationAmount + bet.negationAmount;\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == bet.affirmation || msg.sender == bet.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(\\n            settlementData == 1e18 || settlementData == 0,\\n            \\\"Invalid settlement\\\"\\n        );\\n        if (settlementData == 1e18) {\\n            require(msg.sender == bet.affirmation, \\\"Negation did not win bet\\\");\\n            bet.bondCurrency.transfer(bet.affirmation, totalWinnings);\\n        } else {\\n            require(msg.sender == bet.negation, \\\"Affirmation did not win bet\\\");\\n            bet.bondCurrency.transfer(bet.negation, totalWinnings);\\n        }\\n\\n        bet.betStatus = BetStatus.CLAIMED;\\n\\n        emit WinningsClaimed(bet.betId, totalWinnings, settlementData);\\n    }\\n\\n    function cancelBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        uint256 refundAmount;\\n        require(bet.betStatus == BetStatus.OPEN, \\\"Bet already active\\\");\\n        require(msg.sender == bet.creator, \\\"Not bet creator\\\");\\n\\n        if (bet.creator == bet.affirmation) {\\n            refundAmount = bet.affirmationAmount;\\n        } else {\\n            refundAmount = bet.negationAmount;\\n        }\\n\\n        bet.bondCurrency.transfer(bet.creator, refundAmount);\\n\\n        emit BetCanceled(bet.betId, address(bet.bondCurrency), refundAmount);\\n    }\\n\\n    function killBet(uint256 _betId) public nonReentrant {\\n        Bet storage bet = bets[_betId];\\n        int256 settlementData = getSettledData(_betId);\\n        require(bet.betStatus == BetStatus.SETTLED, \\\"Bet not yet settled\\\");\\n        require(\\n            msg.sender == bet.affirmation || msg.sender == bet.negation,\\n            \\\"This is not your bet\\\"\\n        );\\n        require(settlementData == 2 * 1e18, \\\"Bet is settleable\\\");\\n        bet.bondCurrency.transfer(bet.affirmation, bet.affirmationAmount);\\n        bet.bondCurrency.transfer(bet.negation, bet.negationAmount);\\n\\n        bet.betStatus = BetStatus.DEAD;\\n\\n        emit BetKilled(bet.betId, bet.affirmationAmount, bet.negationAmount);\\n    }\\n\\n    //******* VIEW FUNCTIONS ***********\\n    function createQuestion(string memory _question)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory question = bytes(\\n            string.concat(\\n                \\\"Q: \\\",\\n                _question,\\n                \\\"? --- A:1 for yes. 0 for no. 2 for ambiguous/unknowable\\\"\\n            )\\n        );\\n        return question;\\n    }\\n\\n    // Fetch the resolved price from the Optimistic Oracle that was settled.\\n    function getSettledData(uint256 _betId) public view returns (int256) {\\n        Bet storage bet = bets[_betId];\\n        require(bet.affirmation == msg.sender || bet.negation == msg.sender);\\n\\n        bytes memory ancillaryData = bet.question;\\n\\n        return\\n            oo\\n                .getRequest(\\n                    address(this),\\n                    IDENTIFIER,\\n                    requestTime,\\n                    ancillaryData\\n                )\\n                .resolvedPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x8b1e1cdf92071d5cd15eccd74fb7ab85e75d2c4ed99c392fd34aa52c65f033ee\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405273a5b9d8a0b0fa04ba71bdd68069661ed5c0848884600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600255600060035534801561006f57600080fd5b506001600081905550613d47806100876000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638068aa68116100715780638068aa6814610159578063b3580c1e14610189578063c511a074146101b9578063d247f92b146101d5578063dc60054e146101f1578063e5da66af1461020d576100a9565b80630de2f6ba146100ae57806322af00fa146100ca5780632adb9e3c14610105578063357401f514610121578063677bd9ff1461013d575b600080fd5b6100c860048036038101906100c3919061282e565b61023d565b005b6100e460048036038101906100df9190612919565b61078a565b6040516100fc9c9b9a99989796959493929190612ad9565b60405180910390f35b61011f600480360381019061011a9190612919565b61090c565b005b61013b60048036038101906101369190612919565b610d7e565b005b61015760048036038101906101529190612919565b6110bd565b005b610173600480360381019061016e9190612b9a565b611634565b6040516101809190612bda565b60405180910390f35b6101a3600480360381019061019e9190612d25565b611665565b6040516101b09190612d6e565b60405180910390f35b6101d360048036038101906101ce9190612919565b611694565b005b6101ef60048036038101906101ea9190612919565b611d18565b005b61020b60048036038101906102069190612919565b61208e565b005b61022760048036038101906102229190612919565b6124b8565b6040516102349190612da9565b60405180910390f35b600260005403610282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027990612e21565b60405180910390fd5b600260008190555060006102d98b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611665565b9050600089905060008060008060011515891515036103005733935087925086905061030a565b3391508790508692505b600115158b151503610359573373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146103525789935083610357565b899150815b505b60006040518061018001604052808881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018e81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018d151581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160035481526020016000600581111561041957610418612a62565b5b81525090508573ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b815260040161045b93929190612e41565b6020604051808303816000875af115801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190612e8d565b50866040516104ad9190612ef6565b60405180910390208f73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312377a74e3b2d3c110c0a87dc9a32bdfe8152f1163bc6ebbf8549394889ddfd6003546040516105149190612bda565b60405180910390a4806004600060035481526020019081526020016000206000820151816000019081610547919061310f565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601556101008201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101208201518160080155610140820151816009015561016082015181600a0160006101000a81548160ff021916908360058111156106e5576106e4612a62565b5b0217905550905050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546107689190613210565b9250508190555050505050505050600160008190555050505050505050505050565b60046020528060005260406000206000915090508060000180546107ad90612f3c565b80601f01602080910402602001604051908101604052809291908181526020018280546107d990612f3c565b80156108265780601f106107fb57610100808354040283529160200191610826565b820191906000526020600020905b81548152906001019060200180831161080957829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600801549080600901549080600a0160009054906101000a900460ff1690508c565b60006004600083815260200190815260200160002090506001600581111561093757610936612a62565b5b81600a0160009054906101000a900460ff16600581111561095b5761095a612a62565b5b1461099b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099290613290565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610a4857503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610a5157600080fd5b6000816000018054610a6290612f3c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8e90612f3c565b8015610adb5780601f10610ab057610100808354040283529160200191610adb565b820191906000526020600020905b815481529060010190602001808311610abe57829003601f168201915b505050505090504260028190555060008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083600201549050600084600301549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b8152600401610ba99594939291906132c9565b6020604051808303816000875af1158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec9190613338565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b8152600401610c709493929190613365565b600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b50505050600285600a0160006101000a81548160ff02191690836005811115610cca57610cc9612a62565b5b021790555084600901548560070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a4505050505050565b600260005403610dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dba90612e21565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000806005811115610df757610df6612a62565b5b82600a0160009054906101000a900460ff166005811115610e1b57610e1a612a62565b5b14610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e52906133fd565b60405180910390fd5b8160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee490613469565b60405180910390fd5b8160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f745781600601549050610f7c565b816008015490505b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610fff929190613489565b6020604051808303816000875af115801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190612e8d565b50808260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600901547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a45050600160008190555050565b600260005403611102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f990612e21565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000816008015482600601546111379190613210565b90506000611144846124b8565b90506003600581111561115a57611159612a62565b5b83600a0160009054906101000a900460ff16600581111561117e5761117d612a62565b5b146111be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b5906134fe565b60405180910390fd5b8260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061126b57508260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6112aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a19061356a565b60405180910390fd5b670de0b6b3a76400008114806112c05750600081145b6112ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f6906135d6565b60405180910390fd5b670de0b6b3a7640000810361146c578260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139790613642565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611423929190613489565b6020604051808303816000875af1158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190612e8d565b506115c6565b8260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f5906136ae565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611581929190613489565b6020604051808303816000875af11580156115a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c49190612e8d565b505b600483600a0160006101000a81548160ff021916908360058111156115ee576115ed612a62565b5b0217905550808284600901547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a4505050600160008190555050565b6005602052816000526040600020818154811061165057600080fd5b90600052602060002001600091509150505481565b606060008260405160200161167a91906137ad565b604051602081830303815290604052905080915050919050565b6002600054036116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d090612e21565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361178a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117819061382a565b60405180910390fd5b600015158160040160149054906101000a900460ff1615150361189a57600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806118565750600073ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188c90613896565b60405180910390fd5b611987565b8060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061194757508060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197d90613902565b60405180910390fd5b5b6000600581111561199b5761199a612a62565b5b81600a0160009054906101000a900460ff1660058111156119bf576119be612a62565b5b146119ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f69061396e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b48578060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600601546040518463ffffffff1660e01b8152600401611abc93929190612e41565b6020604051808303816000875af1158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff9190612e8d565b50338160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c35565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600801546040518463ffffffff1660e01b8152600401611bad93929190612e41565b6020604051808303816000875af1158015611bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf09190612e8d565b50338160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600181600a0160006101000a81548160ff02191690836005811115611cc357611cc2612a62565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350600160008190555050565b600060046000838152602001908152602001600020905060026005811115611d4357611d42612a62565b5b81600a0160009054906101000a900460ff166005811115611d6757611d66612a62565b5b14611da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9e906139da565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611e5457503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611e5d57600080fd5b6000816000018054611e6e90612f3c565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9a90612f3c565b8015611ee75780601f10611ebc57610100808354040283529160200191611ee7565b820191906000526020600020905b815481529060010190602001808311611eca57829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b8152600401611f7194939291906139fa565b6020604051808303816000875af1158015611f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb49190613338565b50600382600a0160006101000a81548160ff02191690836005811115611fdd57611fdc612a62565b5b021790555081600901548260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a4505050565b6002600054036120d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ca90612e21565b60405180910390fd5b6002600081905550600060046000838152602001908152602001600020905060006120fd836124b8565b90506003600581111561211357612112612a62565b5b82600a0160009054906101000a900460ff16600581111561213757612136612a62565b5b14612177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216e906134fe565b60405180910390fd5b8160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061222457508160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225a9061356a565b60405180910390fd5b671bc16d674ec8000081146122ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a490613a92565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600601546040518363ffffffff1660e01b8152600401612334929190613489565b6020604051808303816000875af1158015612353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123779190612e8d565b508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600801546040518363ffffffff1660e01b81526004016123ff929190613489565b6020604051808303816000875af115801561241e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124429190612e8d565b50600582600a0160006101000a81548160ff0219169083600581111561246b5761246a612a62565b5b02179055508160080154826006015483600901547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a45050600160008190555050565b6000806004600084815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061257d57503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61258657600080fd5b600081600001805461259790612f3c565b80601f01602080910402602001604051908101604052809291908181526020018280546125c390612f3c565b80156126105780601f106125e557610100808354040283529160200191612610565b820191906000526020600020905b8154815290600101906020018083116125f357829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b815260040161269a94939291906139fa565b61020060405180830381865afa1580156126b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dc9190613ce3565b60c0015192505050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112612722576127216126fd565b5b8235905067ffffffffffffffff81111561273f5761273e612702565b5b60208301915083600182028301111561275b5761275a612707565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061278d82612762565b9050919050565b61279d81612782565b81146127a857600080fd5b50565b6000813590506127ba81612794565b92915050565b6000819050919050565b6127d3816127c0565b81146127de57600080fd5b50565b6000813590506127f0816127ca565b92915050565b60008115159050919050565b61280b816127f6565b811461281657600080fd5b50565b60008135905061282881612802565b92915050565b6000806000806000806000806000806101208b8d031215612852576128516126f3565b5b60008b013567ffffffffffffffff8111156128705761286f6126f8565b5b61287c8d828e0161270c565b9a509a5050602061288f8d828e016127ab565b98505060406128a08d828e016127e1565b97505060606128b18d828e016127e1565b96505060806128c28d828e01612819565b95505060a06128d38d828e016127ab565b94505060c06128e48d828e01612819565b93505060e06128f58d828e016127e1565b9250506101006129078d828e016127e1565b9150509295989b9194979a5092959850565b60006020828403121561292f5761292e6126f3565b5b600061293d848285016127e1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612980578082015181840152602081019050612965565b60008484015250505050565b6000601f19601f8301169050919050565b60006129a882612946565b6129b28185612951565b93506129c2818560208601612962565b6129cb8161298c565b840191505092915050565b6000819050919050565b60006129fb6129f66129f184612762565b6129d6565b612762565b9050919050565b6000612a0d826129e0565b9050919050565b6000612a1f82612a02565b9050919050565b612a2f81612a14565b82525050565b612a3e816127c0565b82525050565b612a4d81612782565b82525050565b612a5c816127f6565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110612aa257612aa1612a62565b5b50565b6000819050612ab382612a91565b919050565b6000612ac382612aa5565b9050919050565b612ad381612ab8565b82525050565b6000610180820190508181036000830152612af4818f61299d565b9050612b03602083018e612a26565b612b10604083018d612a35565b612b1d606083018c612a35565b612b2a608083018b612a44565b612b3760a083018a612a53565b612b4460c0830189612a44565b612b5160e0830188612a35565b612b5f610100830187612a44565b612b6d610120830186612a35565b612b7b610140830185612a35565b612b89610160830184612aca565b9d9c50505050505050505050505050565b60008060408385031215612bb157612bb06126f3565b5b6000612bbf858286016127ab565b9250506020612bd0858286016127e1565b9150509250929050565b6000602082019050612bef6000830184612a35565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c328261298c565b810181811067ffffffffffffffff82111715612c5157612c50612bfa565b5b80604052505050565b6000612c646126e9565b9050612c708282612c29565b919050565b600067ffffffffffffffff821115612c9057612c8f612bfa565b5b612c998261298c565b9050602081019050919050565b82818337600083830152505050565b6000612cc8612cc384612c75565b612c5a565b905082815260208101848484011115612ce457612ce3612bf5565b5b612cef848285612ca6565b509392505050565b600082601f830112612d0c57612d0b6126fd565b5b8135612d1c848260208601612cb5565b91505092915050565b600060208284031215612d3b57612d3a6126f3565b5b600082013567ffffffffffffffff811115612d5957612d586126f8565b5b612d6584828501612cf7565b91505092915050565b60006020820190508181036000830152612d88818461299d565b905092915050565b6000819050919050565b612da381612d90565b82525050565b6000602082019050612dbe6000830184612d9a565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612e0b601f83612dc4565b9150612e1682612dd5565b602082019050919050565b60006020820190508181036000830152612e3a81612dfe565b9050919050565b6000606082019050612e566000830186612a44565b612e636020830185612a44565b612e706040830184612a35565b949350505050565b600081519050612e8781612802565b92915050565b600060208284031215612ea357612ea26126f3565b5b6000612eb184828501612e78565b91505092915050565b600081905092915050565b6000612ed082612946565b612eda8185612eba565b9350612eea818560208601612962565b80840191505092915050565b6000612f028284612ec5565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f5457607f821691505b602082108103612f6757612f66612f0d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612fcf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f92565b612fd98683612f92565b95508019841693508086168417925050509392505050565b600061300c613007613002846127c0565b6129d6565b6127c0565b9050919050565b6000819050919050565b61302683612ff1565b61303a61303282613013565b848454612f9f565b825550505050565b600090565b61304f613042565b61305a81848461301d565b505050565b5b8181101561307e57613073600082613047565b600181019050613060565b5050565b601f8211156130c35761309481612f6d565b61309d84612f82565b810160208510156130ac578190505b6130c06130b885612f82565b83018261305f565b50505b505050565b600082821c905092915050565b60006130e6600019846008026130c8565b1980831691505092915050565b60006130ff83836130d5565b9150826002028217905092915050565b61311882612946565b67ffffffffffffffff81111561313157613130612bfa565b5b61313b8254612f3c565b613146828285613082565b600060209050601f8311600181146131795760008415613167578287015190505b61317185826130f3565b8655506131d9565b601f19841661318786612f6d565b60005b828110156131af5784890151825560018201915060208501945060208101905061318a565b868310156131cc57848901516131c8601f8916826130d5565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061321b826127c0565b9150613226836127c0565b925082820190508082111561323e5761323d6131e1565b5b92915050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b600061327a601b83612dc4565b915061328582613244565b602082019050919050565b600060208201905081810360008301526132a98161326d565b9050919050565b6000819050919050565b6132c3816132b0565b82525050565b600060a0820190506132de60008301886132ba565b6132eb6020830187612a35565b81810360408301526132fd818661299d565b905061330c6060830185612a26565b6133196080830184612a35565b9695505050505050565b600081519050613332816127ca565b92915050565b60006020828403121561334e5761334d6126f3565b5b600061335c84828501613323565b91505092915050565b600060808201905061337a60008301876132ba565b6133876020830186612a35565b8181036040830152613399818561299d565b90506133a86060830184612a35565b95945050505050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b60006133e7601283612dc4565b91506133f2826133b1565b602082019050919050565b60006020820190508181036000830152613416816133da565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000613453600f83612dc4565b915061345e8261341d565b602082019050919050565b6000602082019050818103600083015261348281613446565b9050919050565b600060408201905061349e6000830185612a44565b6134ab6020830184612a35565b9392505050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b60006134e8601383612dc4565b91506134f3826134b2565b602082019050919050565b60006020820190508181036000830152613517816134db565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b6000613554601483612dc4565b915061355f8261351e565b602082019050919050565b6000602082019050818103600083015261358381613547565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b60006135c0601283612dc4565b91506135cb8261358a565b602082019050919050565b600060208201905081810360008301526135ef816135b3565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b600061362c601883612dc4565b9150613637826135f6565b602082019050919050565b6000602082019050818103600083015261365b8161361f565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b6000613698601b83612dc4565b91506136a382613662565b602082019050919050565b600060208201905081810360008301526136c78161368b565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b6000613715826136f4565b61371f81856136ff565b935061372f818560208601612962565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b60006137976037836136ff565b91506137a28261373b565b603782019050919050565b60006137b8826136ce565b6003820191506137c8828461370a565b91506137d38261378a565b915081905092915050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b6000613814601783612dc4565b915061381f826137de565b602082019050919050565b6000602082019050818103600083015261384381613807565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b6000613880601183612dc4565b915061388b8261384a565b602082019050919050565b600060208201905081810360008301526138af81613873565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b60006138ec601183612dc4565b91506138f7826138b6565b602082019050919050565b6000602082019050818103600083015261391b816138df565b9050919050565b7f426574206e6f74204f70656e0000000000000000000000000000000000000000600082015250565b6000613958600c83612dc4565b915061396382613922565b602082019050919050565b600060208201905081810360008301526139878161394b565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b60006139c4601083612dc4565b91506139cf8261398e565b602082019050919050565b600060208201905081810360008301526139f3816139b7565b9050919050565b6000608082019050613a0f6000830187612a44565b613a1c60208301866132ba565b613a296040830185612a35565b8181036060830152613a3b818461299d565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b6000613a7c601183612dc4565b9150613a8782613a46565b602082019050919050565b60006020820190508181036000830152613aab81613a6f565b9050919050565b600080fd5b600081519050613ac681612794565b92915050565b6000613ad782612782565b9050919050565b613ae781613acc565b8114613af257600080fd5b50565b600081519050613b0481613ade565b92915050565b600060e08284031215613b2057613b1f613ab2565b5b613b2a60e0612c5a565b90506000613b3a84828501612e78565b6000830152506020613b4e84828501612e78565b6020830152506040613b6284828501612e78565b6040830152506060613b7684828501612e78565b6060830152506080613b8a84828501612e78565b60808301525060a0613b9e84828501613323565b60a08301525060c0613bb284828501613323565b60c08301525092915050565b613bc781612d90565b8114613bd257600080fd5b50565b600081519050613be481613bbe565b92915050565b60006102008284031215613c0157613c00613ab2565b5b613c0c610140612c5a565b90506000613c1c84828501613ab7565b6000830152506020613c3084828501613ab7565b6020830152506040613c4484828501613af5565b6040830152506060613c5884828501612e78565b6060830152506080613c6c84828501613b0a565b608083015250610160613c8184828501613bd5565b60a083015250610180613c9684828501613bd5565b60c0830152506101a0613cab84828501613323565b60e0830152506101c0613cc084828501613323565b610100830152506101e0613cd684828501613323565b6101208301525092915050565b60006102008284031215613cfa57613cf96126f3565b5b6000613d0884828501613bea565b9150509291505056fea2646970667358221220092fb7418687ddbbca890aa06b29969317a1db6c9e24d72c4b1a4a19f2b3bb0364736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638068aa68116100715780638068aa6814610159578063b3580c1e14610189578063c511a074146101b9578063d247f92b146101d5578063dc60054e146101f1578063e5da66af1461020d576100a9565b80630de2f6ba146100ae57806322af00fa146100ca5780632adb9e3c14610105578063357401f514610121578063677bd9ff1461013d575b600080fd5b6100c860048036038101906100c3919061282e565b61023d565b005b6100e460048036038101906100df9190612919565b61078a565b6040516100fc9c9b9a99989796959493929190612ad9565b60405180910390f35b61011f600480360381019061011a9190612919565b61090c565b005b61013b60048036038101906101369190612919565b610d7e565b005b61015760048036038101906101529190612919565b6110bd565b005b610173600480360381019061016e9190612b9a565b611634565b6040516101809190612bda565b60405180910390f35b6101a3600480360381019061019e9190612d25565b611665565b6040516101b09190612d6e565b60405180910390f35b6101d360048036038101906101ce9190612919565b611694565b005b6101ef60048036038101906101ea9190612919565b611d18565b005b61020b60048036038101906102069190612919565b61208e565b005b61022760048036038101906102229190612919565b6124b8565b6040516102349190612da9565b60405180910390f35b600260005403610282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027990612e21565b60405180910390fd5b600260008190555060006102d98b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611665565b9050600089905060008060008060011515891515036103005733935087925086905061030a565b3391508790508692505b600115158b151503610359573373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146103525789935083610357565b899150815b505b60006040518061018001604052808881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018e81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018d151581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160035481526020016000600581111561041957610418612a62565b5b81525090508573ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b815260040161045b93929190612e41565b6020604051808303816000875af115801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190612e8d565b50866040516104ad9190612ef6565b60405180910390208f73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312377a74e3b2d3c110c0a87dc9a32bdfe8152f1163bc6ebbf8549394889ddfd6003546040516105149190612bda565b60405180910390a4806004600060035481526020019081526020016000206000820151816000019081610547919061310f565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601556101008201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101208201518160080155610140820151816009015561016082015181600a0160006101000a81548160ff021916908360058111156106e5576106e4612a62565b5b0217905550905050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150556001600360008282546107689190613210565b9250508190555050505050505050600160008190555050505050505050505050565b60046020528060005260406000206000915090508060000180546107ad90612f3c565b80601f01602080910402602001604051908101604052809291908181526020018280546107d990612f3c565b80156108265780601f106107fb57610100808354040283529160200191610826565b820191906000526020600020905b81548152906001019060200180831161080957829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600801549080600901549080600a0160009054906101000a900460ff1690508c565b60006004600083815260200190815260200160002090506001600581111561093757610936612a62565b5b81600a0160009054906101000a900460ff16600581111561095b5761095a612a62565b5b1461099b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099290613290565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610a4857503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610a5157600080fd5b6000816000018054610a6290612f3c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8e90612f3c565b8015610adb5780601f10610ab057610100808354040283529160200191610adb565b820191906000526020600020905b815481529060010190602001808311610abe57829003601f168201915b505050505090504260028190555060008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083600201549050600084600301549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f17f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006002548787876040518663ffffffff1660e01b8152600401610ba99594939291906132c9565b6020604051808303816000875af1158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec9190613338565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe7f5945535f4f525f4e4f5f5155455259000000000000000000000000000000000060025487856040518563ffffffff1660e01b8152600401610c709493929190613365565b600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b50505050600285600a0160006101000a81548160ff02191690836005811115610cca57610cc9612a62565b5b021790555084600901548560070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5fbd3f9d4c5b040345228923c9c25c84eaec691ee1219afc5f1d32caec1533ee60405160405180910390a4505050505050565b600260005403610dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dba90612e21565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000806005811115610df757610df6612a62565b5b82600a0160009054906101000a900460ff166005811115610e1b57610e1a612a62565b5b14610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e52906133fd565b60405180910390fd5b8160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee490613469565b60405180910390fd5b8160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f745781600601549050610f7c565b816008015490505b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610fff929190613489565b6020604051808303816000875af115801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190612e8d565b50808260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683600901547ff17ce20c49b8c306870d5fe42f4badc29fd4c720a2c6a41dd2942f0cd8e77c3560405160405180910390a45050600160008190555050565b600260005403611102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f990612e21565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090506000816008015482600601546111379190613210565b90506000611144846124b8565b90506003600581111561115a57611159612a62565b5b83600a0160009054906101000a900460ff16600581111561117e5761117d612a62565b5b146111be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b5906134fe565b60405180910390fd5b8260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061126b57508260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6112aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a19061356a565b60405180910390fd5b670de0b6b3a76400008114806112c05750600081145b6112ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f6906135d6565b60405180910390fd5b670de0b6b3a7640000810361146c578260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139790613642565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611423929190613489565b6020604051808303816000875af1158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190612e8d565b506115c6565b8260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f5906136ae565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611581929190613489565b6020604051808303816000875af11580156115a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c49190612e8d565b505b600483600a0160006101000a81548160ff021916908360058111156115ee576115ed612a62565b5b0217905550808284600901547f709206e7f06feafb753d2514917296d705b6de50ca1ce52acb5d16c19efc95b660405160405180910390a4505050600160008190555050565b6005602052816000526040600020818154811061165057600080fd5b90600052602060002001600091509150505481565b606060008260405160200161167a91906137ad565b604051602081830303815290604052905080915050919050565b6002600054036116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d090612e21565b60405180910390fd5b600260008190555060006004600083815260200190815260200160002090508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361178a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117819061382a565b60405180910390fd5b600015158160040160149054906101000a900460ff1615150361189a57600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806118565750600073ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188c90613896565b60405180910390fd5b611987565b8060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061194757508060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197d90613902565b60405180910390fd5b5b6000600581111561199b5761199a612a62565b5b81600a0160009054906101000a900460ff1660058111156119bf576119be612a62565b5b146119ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f69061396e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b48578060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600601546040518463ffffffff1660e01b8152600401611abc93929190612e41565b6020604051808303816000875af1158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff9190612e8d565b50338160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c35565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600801546040518463ffffffff1660e01b8152600401611bad93929190612e41565b6020604051808303816000875af1158015611bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf09190612e8d565b50338160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600181600a0160006101000a81548160ff02191690836005811115611cc357611cc2612a62565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff167f7ed1ee25a0f4816f901eaf4400ccb456dde0d54382927ffb9a58123e9fabc2e960405160405180910390a350600160008190555050565b600060046000838152602001908152602001600020905060026005811115611d4357611d42612a62565b5b81600a0160009054906101000a900460ff166005811115611d6757611d66612a62565b5b14611da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9e906139da565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611e5457503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611e5d57600080fd5b6000816000018054611e6e90612f3c565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9a90612f3c565b8015611ee75780601f10611ebc57610100808354040283529160200191611ee7565b820191906000526020600020905b815481529060010190602001808311611eca57829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e9a79a9307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b8152600401611f7194939291906139fa565b6020604051808303816000875af1158015611f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb49190613338565b50600382600a0160006101000a81548160ff02191690836005811115611fdd57611fdc612a62565b5b021790555081600901548260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbcd882d372171aa04f1d1af4b104cb44e653afc5e0e24f66d1750aeaffd9fec60405160405180910390a4505050565b6002600054036120d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ca90612e21565b60405180910390fd5b6002600081905550600060046000838152602001908152602001600020905060006120fd836124b8565b90506003600581111561211357612112612a62565b5b82600a0160009054906101000a900460ff16600581111561213757612136612a62565b5b14612177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216e906134fe565b60405180910390fd5b8160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061222457508160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225a9061356a565b60405180910390fd5b671bc16d674ec8000081146122ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a490613a92565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600601546040518363ffffffff1660e01b8152600401612334929190613489565b6020604051808303816000875af1158015612353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123779190612e8d565b508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600801546040518363ffffffff1660e01b81526004016123ff929190613489565b6020604051808303816000875af115801561241e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124429190612e8d565b50600582600a0160006101000a81548160ff0219169083600581111561246b5761246a612a62565b5b02179055508160080154826006015483600901547fec8d8a8188ba892bee2a040ee842eb77c0938d7c08100955525d8f68da30a18260405160405180910390a45050600160008190555050565b6000806004600084815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061257d57503373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61258657600080fd5b600081600001805461259790612f3c565b80601f01602080910402602001604051908101604052809291908181526020018280546125c390612f3c565b80156126105780601f106125e557610100808354040283529160200191612610565b820191906000526020600020905b8154815290600101906020018083116125f357829003601f168201915b50505050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9904f9b307f5945535f4f525f4e4f5f51554552590000000000000000000000000000000000600254856040518563ffffffff1660e01b815260040161269a94939291906139fa565b61020060405180830381865afa1580156126b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dc9190613ce3565b60c0015192505050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112612722576127216126fd565b5b8235905067ffffffffffffffff81111561273f5761273e612702565b5b60208301915083600182028301111561275b5761275a612707565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061278d82612762565b9050919050565b61279d81612782565b81146127a857600080fd5b50565b6000813590506127ba81612794565b92915050565b6000819050919050565b6127d3816127c0565b81146127de57600080fd5b50565b6000813590506127f0816127ca565b92915050565b60008115159050919050565b61280b816127f6565b811461281657600080fd5b50565b60008135905061282881612802565b92915050565b6000806000806000806000806000806101208b8d031215612852576128516126f3565b5b60008b013567ffffffffffffffff8111156128705761286f6126f8565b5b61287c8d828e0161270c565b9a509a5050602061288f8d828e016127ab565b98505060406128a08d828e016127e1565b97505060606128b18d828e016127e1565b96505060806128c28d828e01612819565b95505060a06128d38d828e016127ab565b94505060c06128e48d828e01612819565b93505060e06128f58d828e016127e1565b9250506101006129078d828e016127e1565b9150509295989b9194979a5092959850565b60006020828403121561292f5761292e6126f3565b5b600061293d848285016127e1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612980578082015181840152602081019050612965565b60008484015250505050565b6000601f19601f8301169050919050565b60006129a882612946565b6129b28185612951565b93506129c2818560208601612962565b6129cb8161298c565b840191505092915050565b6000819050919050565b60006129fb6129f66129f184612762565b6129d6565b612762565b9050919050565b6000612a0d826129e0565b9050919050565b6000612a1f82612a02565b9050919050565b612a2f81612a14565b82525050565b612a3e816127c0565b82525050565b612a4d81612782565b82525050565b612a5c816127f6565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110612aa257612aa1612a62565b5b50565b6000819050612ab382612a91565b919050565b6000612ac382612aa5565b9050919050565b612ad381612ab8565b82525050565b6000610180820190508181036000830152612af4818f61299d565b9050612b03602083018e612a26565b612b10604083018d612a35565b612b1d606083018c612a35565b612b2a608083018b612a44565b612b3760a083018a612a53565b612b4460c0830189612a44565b612b5160e0830188612a35565b612b5f610100830187612a44565b612b6d610120830186612a35565b612b7b610140830185612a35565b612b89610160830184612aca565b9d9c50505050505050505050505050565b60008060408385031215612bb157612bb06126f3565b5b6000612bbf858286016127ab565b9250506020612bd0858286016127e1565b9150509250929050565b6000602082019050612bef6000830184612a35565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c328261298c565b810181811067ffffffffffffffff82111715612c5157612c50612bfa565b5b80604052505050565b6000612c646126e9565b9050612c708282612c29565b919050565b600067ffffffffffffffff821115612c9057612c8f612bfa565b5b612c998261298c565b9050602081019050919050565b82818337600083830152505050565b6000612cc8612cc384612c75565b612c5a565b905082815260208101848484011115612ce457612ce3612bf5565b5b612cef848285612ca6565b509392505050565b600082601f830112612d0c57612d0b6126fd565b5b8135612d1c848260208601612cb5565b91505092915050565b600060208284031215612d3b57612d3a6126f3565b5b600082013567ffffffffffffffff811115612d5957612d586126f8565b5b612d6584828501612cf7565b91505092915050565b60006020820190508181036000830152612d88818461299d565b905092915050565b6000819050919050565b612da381612d90565b82525050565b6000602082019050612dbe6000830184612d9a565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612e0b601f83612dc4565b9150612e1682612dd5565b602082019050919050565b60006020820190508181036000830152612e3a81612dfe565b9050919050565b6000606082019050612e566000830186612a44565b612e636020830185612a44565b612e706040830184612a35565b949350505050565b600081519050612e8781612802565b92915050565b600060208284031215612ea357612ea26126f3565b5b6000612eb184828501612e78565b91505092915050565b600081905092915050565b6000612ed082612946565b612eda8185612eba565b9350612eea818560208601612962565b80840191505092915050565b6000612f028284612ec5565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f5457607f821691505b602082108103612f6757612f66612f0d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612fcf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f92565b612fd98683612f92565b95508019841693508086168417925050509392505050565b600061300c613007613002846127c0565b6129d6565b6127c0565b9050919050565b6000819050919050565b61302683612ff1565b61303a61303282613013565b848454612f9f565b825550505050565b600090565b61304f613042565b61305a81848461301d565b505050565b5b8181101561307e57613073600082613047565b600181019050613060565b5050565b601f8211156130c35761309481612f6d565b61309d84612f82565b810160208510156130ac578190505b6130c06130b885612f82565b83018261305f565b50505b505050565b600082821c905092915050565b60006130e6600019846008026130c8565b1980831691505092915050565b60006130ff83836130d5565b9150826002028217905092915050565b61311882612946565b67ffffffffffffffff81111561313157613130612bfa565b5b61313b8254612f3c565b613146828285613082565b600060209050601f8311600181146131795760008415613167578287015190505b61317185826130f3565b8655506131d9565b601f19841661318786612f6d565b60005b828110156131af5784890151825560018201915060208501945060208101905061318a565b868310156131cc57848901516131c8601f8916826130d5565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061321b826127c0565b9150613226836127c0565b925082820190508082111561323e5761323d6131e1565b5b92915050565b7f426574206e6f7420726561647920746f20626520736574746c65640000000000600082015250565b600061327a601b83612dc4565b915061328582613244565b602082019050919050565b600060208201905081810360008301526132a98161326d565b9050919050565b6000819050919050565b6132c3816132b0565b82525050565b600060a0820190506132de60008301886132ba565b6132eb6020830187612a35565b81810360408301526132fd818661299d565b905061330c6060830185612a26565b6133196080830184612a35565b9695505050505050565b600081519050613332816127ca565b92915050565b60006020828403121561334e5761334d6126f3565b5b600061335c84828501613323565b91505092915050565b600060808201905061337a60008301876132ba565b6133876020830186612a35565b8181036040830152613399818561299d565b90506133a86060830184612a35565b95945050505050565b7f42657420616c7265616479206163746976650000000000000000000000000000600082015250565b60006133e7601283612dc4565b91506133f2826133b1565b602082019050919050565b60006020820190508181036000830152613416816133da565b9050919050565b7f4e6f74206265742063726561746f720000000000000000000000000000000000600082015250565b6000613453600f83612dc4565b915061345e8261341d565b602082019050919050565b6000602082019050818103600083015261348281613446565b9050919050565b600060408201905061349e6000830185612a44565b6134ab6020830184612a35565b9392505050565b7f426574206e6f742079657420736574746c656400000000000000000000000000600082015250565b60006134e8601383612dc4565b91506134f3826134b2565b602082019050919050565b60006020820190508181036000830152613517816134db565b9050919050565b7f54686973206973206e6f7420796f757220626574000000000000000000000000600082015250565b6000613554601483612dc4565b915061355f8261351e565b602082019050919050565b6000602082019050818103600083015261358381613547565b9050919050565b7f496e76616c696420736574746c656d656e740000000000000000000000000000600082015250565b60006135c0601283612dc4565b91506135cb8261358a565b602082019050919050565b600060208201905081810360008301526135ef816135b3565b9050919050565b7f4e65676174696f6e20646964206e6f742077696e206265740000000000000000600082015250565b600061362c601883612dc4565b9150613637826135f6565b602082019050919050565b6000602082019050818103600083015261365b8161361f565b9050919050565b7f41666669726d6174696f6e20646964206e6f742077696e206265740000000000600082015250565b6000613698601b83612dc4565b91506136a382613662565b602082019050919050565b600060208201905081810360008301526136c78161368b565b9050919050565b7f513a200000000000000000000000000000000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b6000613715826136f4565b61371f81856136ff565b935061372f818560208601612962565b80840191505092915050565b7f3f202d2d2d20413a3120666f72207965732e203020666f72206e6f2e2032206660008201527f6f7220616d626967756f75732f756e6b6e6f7761626c65000000000000000000602082015250565b60006137976037836136ff565b91506137a28261373b565b603782019050919050565b60006137b8826136ce565b6003820191506137c8828461370a565b91506137d38261378a565b915081905092915050565b7f43616e27742074616b6520796f7572206f776e20626574000000000000000000600082015250565b6000613814601783612dc4565b915061381f826137de565b602082019050919050565b6000602082019050818103600083015261384381613807565b9050919050565b7f42657420616c72656164792074616b656e000000000000000000000000000000600082015250565b6000613880601183612dc4565b915061388b8261384a565b602082019050919050565b600060208201905081810360008301526138af81613873565b9050919050565b7f4e6f742062657420726563697069656e74000000000000000000000000000000600082015250565b60006138ec601183612dc4565b91506138f7826138b6565b602082019050919050565b6000602082019050818103600083015261391b816138df565b9050919050565b7f426574206e6f74204f70656e0000000000000000000000000000000000000000600082015250565b6000613958600c83612dc4565b915061396382613922565b602082019050919050565b600060208201905081810360008301526139878161394b565b9050919050565b7f426574206e6f7420736574746c696e6700000000000000000000000000000000600082015250565b60006139c4601083612dc4565b91506139cf8261398e565b602082019050919050565b600060208201905081810360008301526139f3816139b7565b9050919050565b6000608082019050613a0f6000830187612a44565b613a1c60208301866132ba565b613a296040830185612a35565b8181036060830152613a3b818461299d565b905095945050505050565b7f42657420697320736574746c6561626c65000000000000000000000000000000600082015250565b6000613a7c601183612dc4565b9150613a8782613a46565b602082019050919050565b60006020820190508181036000830152613aab81613a6f565b9050919050565b600080fd5b600081519050613ac681612794565b92915050565b6000613ad782612782565b9050919050565b613ae781613acc565b8114613af257600080fd5b50565b600081519050613b0481613ade565b92915050565b600060e08284031215613b2057613b1f613ab2565b5b613b2a60e0612c5a565b90506000613b3a84828501612e78565b6000830152506020613b4e84828501612e78565b6020830152506040613b6284828501612e78565b6040830152506060613b7684828501612e78565b6060830152506080613b8a84828501612e78565b60808301525060a0613b9e84828501613323565b60a08301525060c0613bb284828501613323565b60c08301525092915050565b613bc781612d90565b8114613bd257600080fd5b50565b600081519050613be481613bbe565b92915050565b60006102008284031215613c0157613c00613ab2565b5b613c0c610140612c5a565b90506000613c1c84828501613ab7565b6000830152506020613c3084828501613ab7565b6020830152506040613c4484828501613af5565b6040830152506060613c5884828501612e78565b6060830152506080613c6c84828501613b0a565b608083015250610160613c8184828501613bd5565b60a083015250610180613c9684828501613bd5565b60c0830152506101a0613cab84828501613323565b60e0830152506101c0613cc084828501613323565b610100830152506101e0613cd684828501613323565b6101208301525092915050565b60006102008284031215613cfa57613cf96126f3565b5b6000613d0884828501613bea565b9150509291505056fea2646970667358221220092fb7418687ddbbca890aa06b29969317a1db6c9e24d72c4b1a4a19f2b3bb0364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 515,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "oo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(OptimisticOracleV2Interface)503"
      },
      {
        "astId": 518,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "requestTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 623,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "betId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 628,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "bets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Bet)557_storage)"
      },
      {
        "astId": 633,
        "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
        "label": "userBets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)117": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(OptimisticOracleV2Interface)503": {
        "encoding": "inplace",
        "label": "contract OptimisticOracleV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)564": {
        "encoding": "inplace",
        "label": "enum OO_BetHandler.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bet)557_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OO_BetHandler.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)557_storage"
      },
      "t_struct(Bet)557_storage": {
        "encoding": "inplace",
        "label": "struct OO_BetHandler.Bet",
        "members": [
          {
            "astId": 532,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "question",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 535,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "bondCurrency",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)117"
          },
          {
            "astId": 537,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 539,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "liveness",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 541,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 543,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "privateBet",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 545,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmation",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 547,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "affirmationAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 549,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negation",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 551,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "negationAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 553,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 556,
            "contract": "contracts/OO_BetHandler.sol:OO_BetHandler",
            "label": "betStatus",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(BetStatus)564"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}